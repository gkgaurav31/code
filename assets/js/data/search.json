[ { "title": "Amount of Time for Binary Tree to Be Infected", "url": "/posts/amount-of-time-for-binary-tree-to-be-infected/", "categories": "binarytree", "tags": "java, leetcode, binarytree, important", "date": "2025-01-31 23:03:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.Each minute, a node becomes infected if:The node is currently uninfected.The node is adjacent to an infected node.Return the number ..." }, { "title": "HTTP Cookie", "url": "/posts/http-cookie/", "categories": "clean_code", "tags": "browser, theory, security", "date": "2024-11-14 22:26:00 +0530", "snippet": "HTTP is stateless, meaning each request is independent, with no memory of previous requests. For example, if you visit a website and add items to a shopping cart, the server doesn’t remember your cart between page loads. HTTP cookies solve this by storing small pieces of data on your browser, all..." }, { "title": "Cross-Site Scripting (XSS)", "url": "/posts/cross-site-scripting-xss/", "categories": "clean_code", "tags": "browser, theory, security", "date": "2024-11-13 22:49:00 +0530", "snippet": "Type of injection attack where malicious scripts are injected in trusted websites, and executed by the visitor’s browser.Let us see a sample to understand a XSS security issue:&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Simple XSS Demo&amp;lt;/t..." }, { "title": "Content Security Policy", "url": "/posts/content-security-policy/", "categories": "clean_code", "tags": "browser, theory, security", "date": "2024-11-13 21:55:00 +0530", "snippet": "Content Security Policy (CSP) is a security feature that helps prevent various types of attacks, such as Cross-Site Scripting (XSS) and data injection attacks, by controlling the sources from which resources like scripts, images, and fonts can be loaded.Let us understand this using a simple HTML...." }, { "title": "Reverse Engineering 101", "url": "/posts/reverse-engineering-101/", "categories": "clean_code", "tags": "clean_code, vulnerability, theory, important", "date": "2024-11-12 10:21:00 +0530", "snippet": "GETTING STARTED WITH REVERSE ENGINEERINGASSEMBLY BASICSCPU ARCHITECTURE: REGISTERS, MEMORY AND MACHINE CODEA GENERAL FLOW OF PROGRAM EXECUTION Program on Disk (EXE): The executable file (.exe) is stored on disk. OS Loader: The operating system loads the program from the disk into the primary me..." }, { "title": "Secure Coding in C and C++ (Part 2)", "url": "/posts/secure-coding-in-c-and-c-part-2/", "categories": "clean_code", "tags": "c, c++, theory, important", "date": "2024-11-11 19:50:00 +0530", "snippet": "SECURE CODING IN C AND C++ (Part 2)NEVER USE GETSNever use gets(). Because it is impossible to tell without knowing the data in advance how many characters gets() will read, and because gets() will continue to store characters past the end of the buffer, it is extremely dangerous to use. It has b..." }, { "title": "Secure Coding in Java - OWASP TOP 10", "url": "/posts/secure-coding-in-java/", "categories": "clean_code", "tags": "java, theory, important", "date": "2024-11-11 17:20:00 +0530", "snippet": "OWASP TOP 10 VULNERABILITIESBROKEN ACCESSS CONTROLBroken access control allows users to access resources or functionalities they shouldn’t. This happens when the application fails to check user permissions.Example: A non-admin user can access admin pages by simply changing the URL.public void vie..." }, { "title": "Security Tools", "url": "/posts/security-tools/", "categories": "security", "tags": "tools, theory", "date": "2024-11-10 20:38:00 +0530", "snippet": "SECURITY ESSENTIALSNMAPNetwork Mapper (Nmap) is an open-source network analysis and security auditing tool written in C, C++, Python, and Lua.Scan Techniquesroot@96250515cfd7:/# nmap --help# &amp;lt;SNIP&amp;gt;SCAN TECHNIQUES: -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans -sU: UDP..." }, { "title": "Secure Coding in C and C++ (Part 1)", "url": "/posts/secure-coding-in-c-and-c/", "categories": "clean_code", "tags": "c, c++, theory, important", "date": "2024-11-09 15:24:00 +0530", "snippet": "SECURE CODING IN C AND C++ (Part 1)SIZEOF(ARRAY)In C/C++, when you pass an array to a function, it becomes a pointer to the first element. This means that sizeof(array) inside the function gives the size of the pointer, not the actual array.In the example:void clear(int array[]) { for (size_t ..." }, { "title": "Circular tour (geeksforgeeks - SDE Sheet)", "url": "/posts/circular-tour/", "categories": "sde-sheet", "tags": "java, greedy, geeksforgeeks, sde-sheet, important", "date": "2024-10-21 21:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONSuppose there is a circle. There are N petrol pumps on that circle. You will be given two sets of data. The amount of petrol that every petrol pump has. Distance from that petrol pump to the next petrol pump.Find a starting point where the truck can start to get through the c..." }, { "title": "Circle of strings (geeksforgeeks - SDE Sheet)", "url": "/posts/circle-of-strings/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-10-21 19:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr of lowercase strings, determine if the strings can be chained together to form a circle.A string X can be chained together with another string Y if the last character of X is the same as the first character of Y. If every string of the array can be chained wi..." }, { "title": "LRU Cache (geeksforgeeks - SDE Sheet)", "url": "/posts/lru-cache-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, design, linkedlist, geeksforgeeks, sde-sheet, important", "date": "2024-10-20 19:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONDesign a data structure that works like a LRU Cache. Here cap denotes the capacity of the cache and Q denotes the number of queries. Query can be of two types: SET x y: sets the value of the key x with value y GET x: gets the key of x if present else returns -1.The LRUCache c..." }, { "title": "Search Pattern (Rabin-Karp Algorithm) (geeksforgeeks - SDE Sheet)", "url": "/posts/search-pattern-rabin-karp-algorithm/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet, important", "date": "2024-10-17 19:59:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings, one is a text string and the other is a pattern string. The task is to print the starting indexes of all the occurrences of the pattern string in the text string. For printing, the Starting Index of a string should be taken as 1. The strings will only contain..." }, { "title": "Count total set bits (geeksforgeeks - SDE Sheet)", "url": "/posts/count-total-set-bits/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet, important", "date": "2024-10-16 22:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a number n. Find the total count of set bits for all numbers from 1 to n (both inclusive).geeksforgeeksSOLUTIONBRUTE-FORCE (TLE)class Solution{ //Function to return sum of count of set bits in the integers from 1 to n. public static int countSetBits(int n){ ..." }, { "title": "Rotate Bits (geeksforgeeks - SDE Sheet)", "url": "/posts/rotate-bits/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet, important", "date": "2024-10-16 19:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer N and an integer D, rotate the binary representation of the integer N by D digits to the left as well as right and return the results in their decimal representation after each of the rotation.Note: Integer N is stored using 16 bits. i.e. 12 will be stored as 0..." }, { "title": "Rotate matrix elements clockwise (geeksforgeeks - SDE Sheet)", "url": "/posts/rotate-matrix-elements-clockwise/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet, important", "date": "2024-10-16 17:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two integers M, N, and a 2D matrix Mat of dimensions MxN, clockwise rotate the elements in it.geeksforgeeksSOLUTION We handle the matrix layer by layer, starting by defining the top, bottom, left, and right boundaries, which will keep updating as we move inward to the in..." }, { "title": "Alien Dictionary (geeksforgeeks - SDE Sheet)", "url": "/posts/alien-dictionary-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-10-16 13:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted dictionary of an alien language having N words and k starting alphabets of standard dictionary. Find the order of characters in the alien language.Note: Many orders may be possible for a particular test case, thus you may return any valid order and output will be..." }, { "title": "Heap Sort (geeksforgeeks - SDE Sheet)", "url": "/posts/heap-sort/", "categories": "sde-sheet", "tags": "java, heap, geeksforgeeks, sde-sheet, important", "date": "2024-10-15 22:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of size N. The task is to sort the array elements by completing functions heapify() and buildHeap() which are used to implement Heap Sort.geeksforgeeksSOLUTIONThis blog has a very detailed explantion for Heap Sort, must read: LINKheapify: Consider the current in..." }, { "title": "Palindrome Pairs (geeksforgeeks - SDE Sheet)", "url": "/posts/palindrome-pairs/", "categories": "sde-sheet", "tags": "java, two_pointers, geeksforgeeks, sde-sheet, important", "date": "2024-10-14 21:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of strings arr[] of size N, find if there exists 2 strings arr[i] and arr[j] such that arr[i]+arr[j] is a palindrome i.e the concatenation of string arr[i] and arr[j] results into a palindrome.geeksforgeeksSOLUTIONGood Explanation [str1] + [str2] = [str3]We want..." }, { "title": "Common Elements (geeksforgeeks - SDE Sheet)", "url": "/posts/common-elements/", "categories": "sde-sheet", "tags": "java, two_pointers, geeksforgeeks, sde-sheet", "date": "2024-10-13 21:32:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two lists V1 and V2 of sizes n and m respectively. Return the list of elements common to both the lists and return the list in sorted order. Duplicates may be there in the output list.geeksforgeeksSOLUTIONTo solve this, we sort both arrays and use two pointers to compare ..." }, { "title": "Minimum XOR value pair (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-xor-value-pair/", "categories": "sde-sheet", "tags": "java, trie, geeksforgeeks, sde-sheet, important", "date": "2024-10-13 17:42:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers of size N find minimum xor of any 2 elements.geeksforgeeksSOLUTIONAPPROACH 1The idea is to sort the array and then find the xor of all the number iteratively and calculate the minimum at every iteration.XOR between two numbers is smaller when their bi..." }, { "title": "Trie | (Delete) (geeksforgeeks - SDE Sheet)", "url": "/posts/trie-delete/", "categories": "sde-sheet", "tags": "java, trie, geeksforgeeks, sde-sheet", "date": "2024-10-13 16:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONTrie is an efficient information retrieval data structure. This data structure is used to store Strings and search strings, String stored can also be deleted. Given a Trie root for a larger string super and a string key, delete all the occurences of key in the Trie.geeksforgeek..." }, { "title": "Insert and Search in a Trie (geeksforgeeks - SDE Sheet)", "url": "/posts/insert-and-search-in-a-trie/", "categories": "sde-sheet", "tags": "java, trie, geeksforgeeks, sde-sheet", "date": "2024-10-13 16:07:00 +0530", "snippet": "PROBLEM DESCRIPTIONComplete the Insert and Search functions for a Trie Data Structure. Insert: Accepts the Trie’s root and a string, modifies the root in-place, and returns nothing. Search: Takes the Trie’s root and a string, returns true if the string is in the Trie, otherwise false.geeksforge..." }, { "title": "Strongly Connected Components (Kosaraju&#39;s Algo) (geeksforgeeks - SDE Sheet)", "url": "/posts/strongly-connected-components-kosaraju-s-algo/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-10-13 15:54:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, Find the number of strongly connected components in the graph.geeksforgeeksSOLUTIONGood Explanation - takeUForward We want to find the strongly connected components (SCCs) in a directed graph, where e..." }, { "title": "Dijkstra Algorithm (geeksforgeeks - SDE Sheet)", "url": "/posts/dijkstra-algorithm-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-10-12 22:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that edge..." }, { "title": "Find the number of islands (geeksforgeeks - SDE Sheet)", "url": "/posts/find-the-number-of-islands/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-10-12 18:53:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of ‘0’s (Water) and ‘1’s(Land). Find the number of islands.Note: An island is either surrounded by water or the boundary of a grid and is formed by connecting adjacent lands..." }, { "title": "Topological sort (geeksforgeeks - SDE Sheet)", "url": "/posts/topological-sort/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-10-12 18:40:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an adjacency list for a Directed Acyclic Graph (DAG) where adj_list[i] contains a list of all vertices j such that there is a directed edge from vertex i to vertex j, with V vertices and E edges, your task is to find any valid topological sorting of the graph.In a topolog..." }, { "title": "Directed Graph Cycle (geeksforgeeks - SDE Sheet)", "url": "/posts/directed-graph-cycle/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-10-12 18:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.geeksforgeeksSOLUTIONAPPROACH 1 - USING DFS (STACK OVERFLOW FOR LARGE #NODES)class Solution { public boolean isCyclic(int V, ArrayList&amp;lt;ArrayList&amp..." }, { "title": "Maximize The Cut Segments (geeksforgeeks - SDE Sheet)", "url": "/posts/maximize-the-cut-segments/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-10-03 19:37:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer n denoting the Length of a line segment. You need to cut the line segment in such a way that the cut length of a line segment each time is either x , y or z. Here x, y, and z are integers.After performing all the cut operations, your total number of cut segment..." }, { "title": "Undirected Graph Cycle (geeksforgeeks - SDE Sheet)", "url": "/posts/undirected-graph-cycle/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-10-02 20:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.geeksforgeeksSOLUTIONGood Explanation - geeksforgeek..." }, { "title": "DFS of Graph (geeksforgeeks - SDE Sheet)", "url": "/posts/dfs-of-graph/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-10-02 19:25:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a connected undirected graph. Perform a Depth First Traversal of the graph.geeksforgeeksSOLUTIONTo implement DFS, we use a recursive helper function that explores each node and its neighbors in depth-first order. We maintain a visited array to track which nodes ha..." }, { "title": "BFS of graph (geeksforgeeks - SDE Sheet)", "url": "/posts/bfs-of-graph/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-10-02 17:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.geeksforgeeksSOLUTIONWe use a queue to explore nodes level by level, marking each node as visited once it’s processed. For each node, we visit its unvisited neighbors, mark them as v..." }, { "title": "Minimum sum partition (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-sum-partition/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-10-02 15:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr of size n containing non-negative integers, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the minimum differencegeeksforgeeksSOLUTIONBRUTE FORCE (TLE)We can form all subsets using the..." }, { "title": "Snake and Ladder Problem (geeksforgeeks - SDE Sheet)", "url": "/posts/snake-and-ladder-problem/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-10-01 22:03:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a 5x6 snakes and ladders board, find the minimum number of dice throws required to reach the destination or last cell (30th cell) from the source (1st cell).You are given an integer N denoting the total number of snakes and ladders and an array arr[] of 2N size where 2i a..." }, { "title": "Egg Dropping Puzzle (geeksforgeeks - SDE Sheet)", "url": "/posts/egg-dropping-puzzle/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet, important", "date": "2024-09-26 22:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given N identical eggs and you have access to a K-floored building from 1 to K.There exists a floor f where 0 &amp;lt;= f &amp;lt;= K such that any egg dropped from a floor higher than f will break, and any egg dropped from or below floor f will not break.There are few ..." }, { "title": "Floyd Warshall (geeksforgeeks - SDE Sheet)", "url": "/posts/floyd-warshall-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, graphs, dynamic_programming, geeksforgeeks, sde-sheet, important", "date": "2024-09-25 19:55:00 +0530", "snippet": "PROBLEM DESCRIPTIONThe problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. The graph is represented as an adjacency matrix of size nxn. Matrix[i][j] denotes the weight of the edge from i to j. If Matrix[i][j]=-1, it means there is no e..." }, { "title": "Max Sum Increasing Subsequence (geeksforgeeks - SDE Sheet)", "url": "/posts/max-sum-increasing-subsequence/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet", "date": "2024-09-25 00:20:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of n positive integers. Find the sum of the maximum sum subsequence of the given array such that the integers in the subsequence are sorted in strictly increasing order i.e. a strictly increasing subsequence.geeksforgeeksSOLUTIONclass Solution{ // Method to fi..." }, { "title": "Partition Equal Subset Sum (geeksforgeeks - SDE Sheet)", "url": "/posts/partition-equal-subset-sum-gfg/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet, important", "date": "2024-09-23 19:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.geeksforgeeksSOLUTIONBRUTE-FORCE (TLE)class Solution{ static int equalPartition(int n, int arr[]) { int sum = 0; for(int i=0..." }, { "title": "Longest Common Subsequence (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-common-subsequence/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet", "date": "2024-09-23 18:46:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings str1 &amp;amp; str 2 of length n &amp;amp; m respectively, return the length of their longest common subsequence. If there is no common subsequence then, return 0.A subsequence is a sequence that can be derived from the given string by deleting some or no elem..." }, { "title": "Longest Increasing Subsequence (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-increasing-subsequence/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet", "date": "2024-09-22 00:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array a[ ] of n integers, find the Length of the Longest Strictly Increasing Subsequence.A sequence of numbers is called “strictly increasing” when each term in the sequence is smaller than the term that comes after it.geeksforgeeksSOLUTIONAPPROACH 1 (DYNAMIC PROGRRAMM..." }, { "title": "Count number of hops (geeksforgeeks - SDE Sheet)", "url": "/posts/count-number-of-hops/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet", "date": "2024-09-21 23:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONA frog jumps either 1, 2, or 3 steps to go to the top. In how many ways can it reach the top of Nth step. As the answer will be large find the answer modulo 1000000007.geeksforgeeksSOLUTIONWe can solve this using dynamic programming by counting how many ways the frog can reach ..." }, { "title": "Choose and Swap (geeksforgeeks - SDE Sheet)", "url": "/posts/choose-and-swap/", "categories": "sde-sheet", "tags": "java, greedy, geeksforgeeks, sde-sheet, important", "date": "2024-09-21 19:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a string str of lower case english alphabets. You can choose any two characters in the string and replace all the occurences of the first character with the second character and replace all the occurences of the second character with the first character. Your aim ..." }, { "title": "Activity Selection (geeksforgeeks - SDE Sheet)", "url": "/posts/activity-selection/", "categories": "sde-sheet", "tags": "java, greedy, geeksforgeeks, sde-sheet", "date": "2024-09-21 17:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven N activities with their start and finish day given in array start[ ] and end[ ]. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a given day.Note : Duration of the activity incl..." }, { "title": "Page Faults in LRU (geeksforgeeks - SDE Sheet)", "url": "/posts/page-faults-in-lru/", "categories": "sde-sheet", "tags": "java, hashing, geeksforgeeks, sde-sheet", "date": "2024-09-21 17:13:00 +0530", "snippet": "PROBLEM DESCRIPTIONIn operating systems that use paging for memory management, page replacement algorithm is needed to decide which page needs to be replaced when the new page comes in. Whenever a new page is referred and is not present in memory, the page fault occurs and Operating System replac..." }, { "title": "Minimum number of Coins (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-number-of-coins/", "categories": "sde-sheet", "tags": "java, strings, greedy, geeksforgeeks, sde-sheet", "date": "2024-09-21 13:19:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an infinite supply of each denomination of Indian currency { 1, 2, 5, 10, 20, 50, 100, 200, 500, 2000 } and a target value N.Find the minimum number of coins and/or notes needed to make the change for Rs N. You must return the list containing the value of coins required.g..." }, { "title": "Largest number possible (geeksforgeeks - SDE Sheet)", "url": "/posts/largest-number-possible/", "categories": "sde-sheet", "tags": "java, strings, greedy, geeksforgeeks, sde-sheet", "date": "2024-09-21 12:40:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two numbers ‘N’ and ‘S’ , find the largest number that can be formed with ‘N’ digits and whose sum of digits should be equals to ‘S’. Return -1 if it is not possible.geeksforgeeksSOLUTIONEdge Cases: If the sum is 0 and N &amp;gt; 1, it is impossible to form such a number..." }, { "title": "N meetings in one room (geeksforgeeks - SDE Sheet)", "url": "/posts/n-meetings-in-one-room/", "categories": "sde-sheet", "tags": "java, intervals, geeksforgeeks, sde-sheet", "date": "2024-09-20 23:49:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given timings of n meetings in the form of (start[i], end[i]) where start[i] is the start time of meeting i and end[i] is the finish time of meeting i. Return the maximum number of meetings that can be accommodated in a single meeting room, when only one meeting can be ..." }, { "title": "Maximum Path Sum between 2 Special Nodes (geeksforgeeks - SDE Sheet)", "url": "/posts/maximum-path-sum-between-2-special-nodes/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet, important", "date": "2024-09-20 22:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree in which each node element contains a number. Find the maximum possible path sum from one special node to another special node.Note: Here special node is a node which is connected to exactly one different node.geeksforgeeksSOLUTIONLeaf nodes are considered s..." }, { "title": "Graph is Tree or Not (geeksforgeeks - SDE Sheet)", "url": "/posts/graph-is-tree-or-not/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-20 20:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an undirected graph of N nodes (numbered from 0 to N-1) and M edges. Return 1 if the graph is a tree, else return 0.Note: The input graph can have self-loops and multiple edges.geeksforgeeksSOLUTIONWe can solve this by using a breadth-first search (BFS) approach t..." }, { "title": "Merge two BST&#39;s (geeksforgeeks - SDE Sheet)", "url": "/posts/merge-two-bst-s/", "categories": "sde-sheet", "tags": "java, binarytree, BST, geeksforgeeks, sde-sheet", "date": "2024-09-20 20:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two BSTs, return elements of merged BSTs in sorted form.geeksforgeeksSOLUTIONWe can solve this by performing inorder traversals on both binary search trees to get sorted lists, then merging them using a two-pointer technique to create a single sorted list efficiently.clas..." }, { "title": "Serialize and deserialize a binary tree (geeksforgeeks - SDE Sheet)", "url": "/posts/serialize-and-deserialize-a-binary-tree/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet, important", "date": "2024-09-20 18:42:00 +0530", "snippet": "PROBLEM DESCRIPTIONSerialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions serialize() : stores the tree into an array a and returns the array. deSerialize() : deserializes the array to the tre..." }, { "title": "Connect Nodes at Same Level (geeksforgeeks - SDE Sheet)", "url": "/posts/connect-nodes-at-same-level/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-19 22:34:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, connect the nodes that are at same level. You’ll be given an addition nextRight pointer for the same.Initially, all the nextRight pointers point to garbage values. Your function should set these pointers to point next right for each node.geeksforgeeksSOLUTI..." }, { "title": "Vertical Tree Traversal (geeksforgeeks - SDE Sheet)", "url": "/posts/vertical-tree-traversal/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-19 22:23:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Binary Tree, find the vertical traversal of it starting from the leftmost level to the rightmost level.If there are multiple nodes passing through a vertical line, then they should be printed as they appear in level order traversal of the tree.geeksforgeeksSOLUTIONWe as..." }, { "title": "Bottom View of Binary Tree (geeksforgeeks - SDE Sheet)", "url": "/posts/bottom-view-of-binary-tree/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet, important", "date": "2024-09-19 21:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered.geeksforgeeksSOLUT..." }, { "title": "Diameter of a Binary Tree (geeksforgeeks - SDE Sheet)", "url": "/posts/diameter-of-a-binary-tree/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-18 22:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONThe diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two end nodes.geeksforgeeksSOLUTIONThe key idea is to compute the height of the left and right subtrees for each node and then sum these heights to get the path length passing..." }, { "title": "Array to BST (geeksforgeeks - SDE Sheet)", "url": "/posts/array-to-bst/", "categories": "sde-sheet", "tags": "java, binarytree, BST, geeksforgeeks, sde-sheet", "date": "2024-09-18 21:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted array. Convert it into a Height Balanced Binary Search Tree (BST). Return the root of the BST.Height-balanced BST means a binary tree in which the depth of the left subtree and the right subtree of every node never differ by more than 1.geeksforgeeksSOLUTIONWe ca..." }, { "title": "Lowest Common Ancestor in a BST (geeksforgeeks - SDE Sheet)", "url": "/posts/lowest-common-ancestor-in-a-bst/", "categories": "sde-sheet", "tags": "java, binarytree, BST, geeksforgeeks, sde-sheet", "date": "2024-09-18 21:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Binary Search Tree (with all values unique) and two node values n1 and n2 (n1!=n2). Find the Lowest Common Ancestors of the two nodes in the BST.geeksforgeeksSOLUTIONclass BST{ // LCA: lowest node in the tree that has both n1 and n2 as descendants. Node LCA(Node r..." }, { "title": "Symmetric Tree (geeksforgeeks - SDE Sheet)", "url": "/posts/symmetric-tree/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-18 21:40:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Binary Tree. Check whether it is Symmetric or not, i.e. whether the binary tree is a Mirror image of itself or not.geeksforgeeksSOLUTIONcreate helper method isSame(r1, r2)compare r1 and r2 values.Then recursively check isSame(r1.left, r2.right) &amp;amp;&amp;amp; isSame..." }, { "title": "Kth largest element in BST (geeksforgeeks - SDE Sheet)", "url": "/posts/kth-largest-element-in-bst/", "categories": "sde-sheet", "tags": "java, binarytree, BST, geeksforgeeks, sde-sheet", "date": "2024-09-17 20:28:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Binary Search Tree. Your task is to complete the function which will return the Kth largest element without doing any modification in Binary Search Tree.geeksforgeeksSOLUTIONclass Solution{ int count = 0; int result = -1; public int kthLargest(Node root,int K) ..." }, { "title": "Identical Trees (geeksforgeeks - SDE Sheet)", "url": "/posts/identical-trees/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-17 19:09:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two binary trees, the task is to find if both of them are identical or not.geeksforgeeksSOLUTIONclass Solution{ boolean isIdentical(Node root1, Node root2) { if(root1 == null &amp;amp;&amp;amp; root2 == null) return true; if(root1 == null ||..." }, { "title": "Height of Binary Tree (geeksforgeeks - SDE Sheet)", "url": "/posts/height-of-binary-tree/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-17 19:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, find its height.geeksforgeeksSOLUTIONclass Solution { int height(Node node) { return node == null ? 0 : 1 + Math.max(height(node.left), height(node.right)); }}" }, { "title": "Balanced Tree Check (geeksforgeeks - SDE Sheet)", "url": "/posts/balanced-tree-check/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-17 15:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, find if it is height balanced or not. A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree.geeksforgeeksSOLUTIONAPPROACH 1 - O(N^2) - ACCEPTEDclass Tree{ boolean isBalanced(Node roo..." }, { "title": "Left View of Binary Tree (geeksforgeeks - SDE Sheet)", "url": "/posts/left-view-of-binary-tree/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-17 15:39:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Binary Tree, return its Left view. The left view of a Binary Tree is a set of nodes visible when the tree is visited from the Left side. If no left view is possible, return an empty array.geeksforgeeksSOLUTIONWe can solve this by performing a level-order traversal of th..." }, { "title": "Check for BST (geeksforgeeks - SDE Sheet)", "url": "/posts/check-for-bst/", "categories": "sde-sheet", "tags": "java, binarytree, BST, geeksforgeeks, sde-sheet", "date": "2024-09-17 15:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree. Check whether it is a BST or not.Note: We are considering that BSTs can not contain duplicate Nodes.geeksforgeeksSOLUTIONclass Solution { // Define the range of valid values for the binary tree nodes private static final int MIN = 1; pr..." }, { "title": "Count Leaves in Binary Tree (geeksforgeeks - SDE Sheet)", "url": "/posts/count-leaves-in-binary-tree/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-17 15:04:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Binary Tree of size N, You have to count leaves in it.geeksforgeeksSOLUTIONThis can be solved by recursively traversing the binary tree and counting its leaf nodes. The countLeaves() function checks if the current node is null; if it is, the function returns 0, meaning ..." }, { "title": "Minimum Cost Path (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-cost-path/", "categories": "sde-sheet", "tags": "java, heap, graphs, geeksforgeeks, sde-sheet, important", "date": "2024-09-16 22:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a square grid of size N, each cell of which contains an integer cost that represents a cost to traverse through that cell, we need to find a path from the top left cell to the bottom right cell by which the total cost incurred is minimum.From the cell (i,j) we can go (i,j..." }, { "title": "Find median in a stream (geeksforgeeks - SDE Sheet)", "url": "/posts/find-median-in-a-stream/", "categories": "sde-sheet", "tags": "java, heap, geeksforgeeks, sde-sheet", "date": "2024-09-16 22:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an input stream of N integers. The task is to insert these numbers into a new stream and find the median of the stream formed by each insertion of X to the new stream.geeksforgeeksSOLUTIONWe can solve this by using two heaps: a max-heap to store the smaller half of the nu..." }, { "title": "Huffman Decoding-1 (geeksforgeeks - SDE Sheet)", "url": "/posts/huffman-decoding-1/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, sde-sheet", "date": "2024-09-15 21:17:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string S, implement Huffman Encoding and Decoding.geeksforgeeksSOLUTION Start with an empty string ans to store the decoded characters. Initialize another node curr, which is set to the root of the Huffman tree. Loop through each bit in the string s. If the ..." }, { "title": "Implement Queue using Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/implement-queue-using-linked-list/", "categories": "sde-sheet", "tags": "java, queue, geeksforgeeks, sde-sheet", "date": "2024-09-15 18:34:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement a Queue using Linked List.A Query Q is of 2 Types(i) 1 x (a query of this type means pushing ‘x’ into the queue)(ii) 2 (a query of this type means to pop an element from the queue and print the poped element)geeksforgeeksSOLUTIONPush using rear pointer and pop from fr..." }, { "title": "Histogram Max Rectangular Area (geeksforgeeks - SDE Sheet)", "url": "/posts/histogram-max-rectangular-area/", "categories": "sde-sheet", "tags": "java, stack, geeksforgeeks, sde-sheet, important", "date": "2024-09-15 17:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONFind the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. For simplicity, assume that all bars have the same width and the width is 1 unit, the height of each bar will be given by the array arr.geeksf..." }, { "title": "Get minimum element from stack (geeksforgeeks - SDE Sheet)", "url": "/posts/get-minimum-element-from-stack/", "categories": "sde-sheet", "tags": "java, stack, geeksforgeeks, sde-sheet, important", "date": "2024-09-15 14:39:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given N operations and your task is to Implement a Stack in which you can get a minimum element in O(1) time.geeksforgeeksSOLUTIONWe can solve this by using a stack where each element is an array containing two values: the actual element and the minimum value at that po..." }, { "title": "Next Greater Element (geeksforgeeks - SDE Sheet)", "url": "/posts/next-greater-element/", "categories": "sde-sheet", "tags": "java, stack, geeksforgeeks, sde-sheet, important", "date": "2024-09-15 14:32:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[ ] of n elements, the task is to find the next greater element for each element of the array in order of their appearance in the array. Next greater element of an element in the array is the nearest element on the right which is greater than the current eleme..." }, { "title": "Queue using two Stacks (geeksforgeeks - SDE Sheet)", "url": "/posts/queue-using-two-stacks/", "categories": "sde-sheet", "tags": "java, stack, queue, geeksforgeeks, sde-sheet", "date": "2024-09-15 14:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement a Queue using 2 stacks s1 and s2A Query Q is of 2 Types(i) 1 x (a query of this type means pushing ‘x’ into the queue)(ii) 2 (a query of this type means to pop element from queue and print the poped element)geeksforgeeksSOLUTION push First, all elements ..." }, { "title": "Stack using two queues (geeksforgeeks - SDE Sheet)", "url": "/posts/stack-using-two-queues/", "categories": "sde-sheet", "tags": "java, stack, queue, geeksforgeeks, sde-sheet", "date": "2024-09-15 13:59:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement a Stack using two queues q1 and q2.geeksforgeeksSOLUTION push: add current element to q2transfer all elements from q1 to q2switch q1, q2 references, so q1 becomes q2 and vice versa pop: get element from q1. return -1 if empty class Queues{ Queue&..." }, { "title": "Binary Tree to DLL (geeksforgeeks - SDE Sheet)", "url": "/posts/binary-tree-to-dll/", "categories": "sde-sheet", "tags": "java, binarytree, linkedlist, geeksforgeeks, sde-sheet, important", "date": "2024-09-14 22:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Binary Tree (BT), convert it to a Doubly Linked List (DLL) in place. The left and right pointers in nodes will be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be the same as the order of the given Binary Tree. The firs..." }, { "title": "Reverse a Linked List in Groups (geeksforgeeks - SDE Sheet)", "url": "/posts/reverse-a-linked-list-in-groups/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-14 20:23:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a linked list, the task is to reverse every k node (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarificatio..." }, { "title": "Merge K sorted linked lists (geeksforgeeks - SDE Sheet)", "url": "/posts/merge-k-sorted-linked-lists/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-14 18:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of sorted linked lists of different sizes. The task is to merge them in such a way that after merging they will be a single sorted linked list.geeksforgeeksSOLUTIONclass Solution { Node mergeKLists(List&amp;lt;Node&amp;gt; arr) { int n = arr.size(); ..." }, { "title": "Merge two sorted linked lists (geeksforgeeks - SDE Sheet)", "url": "/posts/merge-two-sorted-linked-lists/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-14 18:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two sorted linked lists consisting of nodes respectively. The task is to merge both lists and return the head of the merged list.geeksforgeeksSOLUTIONclass Solution { Node sortedMerge(Node head1, Node head2) { Node h1 = head1; Node h2 = head2; Node..." }, { "title": "Flattening a Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/flattening-a-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet, important", "date": "2024-09-14 18:33:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a Linked List, where every node represents a sub-linked-list and contains two pointers:(i) a next pointer to the next node,(ii) a bottom pointer to a linked list where this node is head.Each of the sub-linked lists is in sorted order.Flatten the Link List so all the nodes..." }, { "title": "Rotate a Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/rotate-a-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-14 16:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a singly linked list, the task is to rotate the left shift of the linked list by k nodes, where k is a given positive integer smaller than or equal to the length of the linked list.geeksforgeeksSOLUTIONWe can solve this by first reversing the entire linked lis..." }, { "title": "Intersection Point in Y Shaped Linked Lists (geeksforgeeks - SDE Sheet)", "url": "/posts/intersection-point-in-y-shaped-linked-lists/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-14 16:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two singly linked lists, return the point where two linked lists intersect.Note: If the linked lists do not merge at any point, return -1.geeksforgeeksSOLUTIONWe can solve this by first calculating the lengths of both linked lists and determining the difference in their l..." }, { "title": "Add Number Linked Lists (geeksforgeeks - SDE Sheet)", "url": "/posts/add-number-linked-lists/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-14 15:03:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two numbers, num1, and num2, represented by linked lists. The task is to return the head of the linked list representing the sum of these two numbers.For example, the number 190 will be represented by the linked list, 1-&amp;gt;9-&amp;gt;0-&amp;gt;null, similarly 25 by 2-..." }, { "title": "Palindrome Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/palindrome-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet, important", "date": "2024-09-14 14:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a singly linked list of integers. The task is to check if the given linked list is palindrome or not.geeksforgeeksSOLUTIONTo solve this, we can reverse the second half of the linked list and then compare it with the first half. First, we use two pointers (slow and fast) t..." }, { "title": "Detect Loop in linked list (geeksforgeeks - SDE Sheet)", "url": "/posts/detect-loop-in-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-12 22:06:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a singly linked list, the task is to check if the linked list has a loop. A loop means that the last node of the linked list is connected back to a node in the same list. So if the next of the last node is null. then there is no loop.geeksforgeeksSOLUTIONclass..." }, { "title": "Remove loop in Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/remove-loop-in-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-12 22:01:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a linked list that may contain a loop. A loop means that the last node of the linked list is connected back to a node in the same list. So if the next of the previous node is null. then there is no loop. Remove the loop from the linked list, if it is present (..." }, { "title": "Pairwise swap elements of a linked list (geeksforgeeks - SDE Sheet)", "url": "/posts/pairwise-swap-elements-of-a-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-12 21:49:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a singly linked list. The task is to swap elements in the linked list pairwise. For example, if the input list is 1 2 3 4, the resulting list after swaps will be 2 1 4 3.Note: You need to swap the nodes, not only the data. If only data is swapped then the driver code will..." }, { "title": "Implement Stack using Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/implement-stack-using-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-12 21:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONLet’s give it a try! You have a linked list and must implement the functionalities push and pop of stack using this given linked list. Your task is to use the class as shown in the comments in the code editor and complete the functions push() and pop() to implement a stack.The ..." }, { "title": "Sort a linked list of 0s, 1s and 2s (geeksforgeeks - SDE Sheet)", "url": "/posts/sort-a-linked-list-of-0s-1s-and-2s/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-12 21:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a linked list where nodes can contain values 0s, 1s, and 2s only. The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to the head side, 2s at the end of the linked list, and 1s in the middle of 0s and 2s.geeksforgeeksSOLUTIONWe can iterate ov..." }, { "title": "Delete without head pointer (geeksforgeeks - SDE Sheet)", "url": "/posts/delete-without-head-pointer/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-11 23:46:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a node del_node of a Singly Linked List where you have to delete a value of the given node from the linked list but you are not given the head of the list.geeksforgeeksSOLUTIONAPPROACHSince head of the linked list is not given, we cannot get to the previous node a..." }, { "title": "Reverse a linked list (geeksforgeeks - SDE Sheet)", "url": "/posts/reverse-a-linked-list-gfg/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-11 23:23:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a linked list, the task is to reverse this list and return the reversed head.geeksforgeeksSOLUTIONclass Solution { Node reverseList(Node head) { Node h1 = head; Node h2 = null; Node t = head; while(h1 != null){ h1 = h1..." }, { "title": "Middle of a Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/middle-of-a-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-11 23:17:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a linked list, the task is to find the middle. For example, the middle of 1-&amp;gt; 2-&amp;gt;3-&amp;gt;4-&amp;gt;5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&a..." }, { "title": "Kth from End of Linked List (geeksforgeeks - SDE Sheet)", "url": "/posts/kth-from-end-of-linked-list/", "categories": "sde-sheet", "tags": "java, linkedlist, geeksforgeeks, sde-sheet", "date": "2024-09-11 23:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a linked list and the number k, Your task is to find the kth node from the end. If k is more than the number of nodes, then the output should be -1.geeksforgeeksSOLUTIONclass Solution { int getKthFromLast(Node head, int k) { Node f = head; int..." }, { "title": "Swap all odd and even bits (geeksforgeeks - SDE Sheet)", "url": "/posts/swap-all-odd-and-even-bits/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-10 21:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an unsigned integer N. The task is to swap all odd bits with even bits. For example, if the given number is 23 (00010111), it should be converted to 43(00101011). Here, every even position bit is swapped with an adjacent bit on the right side(even position bits are highli..." }, { "title": "Longest Consecutive 1&#39;s (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-consecutive-1-s/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-09 19:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a number N. Find the length of the longest consecutive 1s in its binary representation.geeksforgeeksSOLUTIONAPPROACH 1class Solution{ public static int maxConsecutiveOnes(int n) { int max = 0; int current = 0; while(n != 0){ if((n&amp;am..." }, { "title": "Party of Couples (geeksforgeeks - SDE Sheet)", "url": "/posts/party-of-couples/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-09 19:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer array arr[] of size n, representing n number of people in a party, each person is denoted by an integer. Couples are represented by the same number ie: two people have the same integer value, it means they are a couple. Find out the only single person i..." }, { "title": "Rightmost different bit (geeksforgeeks - SDE Sheet)", "url": "/posts/rightmost-different-bit/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-09 19:30:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two numbers M and N. The task is to find the position of the rightmost different bit in the binary representation of numbers. If both M and N are the same then return -1 in this case.geeksforgeeksSOLUTIONclass Solution{ //Function to find the first position with differ..." }, { "title": "First Set Bit (geeksforgeeks - SDE Sheet)", "url": "/posts/first-set-bit/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-09 19:11:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer N. The task is to return the position of first set bit found from the right side in the binary representation of the number.Note: If there is no set bit in the integer N, then return 0 from the function.geeksforgeeksSOLUTIONAPPROACH 1class Solution{ public s..." }, { "title": "K-th Bit is Set or Not (geeksforgeeks - SDE Sheet)", "url": "/posts/k-th-bit-is-set-or-not/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-09 19:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a number n and a bit number k, check if kth index bit of n is set or not. A bit is called set if it is 1. Position of set bit ‘1’ should be indexed starting with 0 from LSB side in binary representation of the number.geeksforgeeksSOLUTIONclass CheckBit { static boolean..." }, { "title": "Power of 2 (geeksforgeeks - SDE Sheet)", "url": "/posts/power-of-2/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-09 18:59:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a non-negative integer n. The task is to check if it is a power of 2.geeksforgeeksSOLUTIONThe number of set bits should be 1.class Solution { public static boolean isPowerofTwo(long n) { int c = 0; while( n != 0 ){ if( (n&amp;amp;1) != 0 ){ ..." }, { "title": "Toggle bits in the given range (geeksforgeeks - SDE Sheet)", "url": "/posts/toggle-bits-in-the-given-range/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-09 18:47:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a non-negative number n and two values l and r. The problem is to toggle the bits in the range l to r in the binary representation of n, i.e., to toggle bits from the lth least significant bit to the rth least significant bit (the rightmost bit as counted as the first bit..." }, { "title": "Set kth bit (geeksforgeeks - SDE Sheet)", "url": "/posts/set-kth-bit/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-08 19:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a number N and a value K. From the right, set the Kth bit in the binary representation of N. The position of Least Significant Bit(or last bit) is 0, the second last bit is 1 and so on.geeksforgeeksSOLUTIONclass Solution{ static int setKthBit(int N,int K){ // co..." }, { "title": "Number is sparse or not (geeksforgeeks - SDE Sheet)", "url": "/posts/number-is-sparse-or-not/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-08 19:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a number N. The task is to check whether it is sparse or not. A number is said to be a sparse number if no two or more consecutive bits are set in the binary representation.geeksforgeeksSOLUTIONAPPROACH 1We can solve this by iterating through the binary representation of ..." }, { "title": "Bit Difference (geeksforgeeks - SDE Sheet)", "url": "/posts/bit-difference/", "categories": "sde-sheet", "tags": "java, bit_manipulation, geeksforgeeks, sde-sheet", "date": "2024-09-08 19:33:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given two numbers A and B. The task is to count the number of bits needed to be flipped to convert A to B.geeksforgeeksSOLUTIONclass Solution { public static int countBitsFlip(int a, int b) { // XOR of A and B will give a number where the bits set to &#39;1&#3..." }, { "title": "N-Queen Problem (geeksforgeeks - SDE Sheet)", "url": "/posts/n-queen-problem/", "categories": "sde-sheet", "tags": "java, backtracking, geeksforgeeks, sde-sheet", "date": "2024-09-08 19:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONThe n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens placement, whe..." }, { "title": "Rat in a Maze Problem - I (geeksforgeeks - SDE Sheet)", "url": "/posts/rat-in-a-maze-problem-i/", "categories": "sde-sheet", "tags": "java, backtracking, geeksforgeeks, sde-sheet", "date": "2024-09-08 17:13:00 +0530", "snippet": "PROBLEM DESCRIPTIONConsider a rat placed at (0, 0) in a square matrix mat of order n* n. It has to reach the destination at (n - 1, n - 1). Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are ‘U’(up), ‘D’(down), ‘L’ (left..." }, { "title": "Special Keyboard (geeksforgeeks - SDE Sheet)", "url": "/posts/special-keyboard/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet, important", "date": "2024-09-08 16:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONImagine you have a special keyboard with the following keys: Key 1: Prints ‘A’ on screen Key 2: (Ctrl-A): Select screen Key 3: (Ctrl-C): Copy selection to buffer Key 4: (Ctrl-V): Print buffer on screen appending it after what has already been printed.Find maximum numbers of..." }, { "title": "Word Boggle (geeksforgeeks - SDE Sheet)", "url": "/posts/word-boggle/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet", "date": "2024-09-07 22:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a dictionary of distinct words and an M x N board where every cell has one character. Find all possible words from the dictionary that can be formed by a sequence of adjacent characters on the board. We can move to any of 8 adjacent charactersNote: While forming a word we..." }, { "title": "Tower Of Hanoi (geeksforgeeks - SDE Sheet)", "url": "/posts/tower-of-hanoi/", "categories": "sde-sheet", "tags": "java, recursion, geeksforgeeks, sde-sheet", "date": "2024-09-05 21:54:00 +0530", "snippet": "PROBLEM DESCRIPTIONThe tower of Hanoi is a famous puzzle where we have three rods and n disks. The objective of the puzzle is to move the entire stack to another rod. You are given the number of discs n. Initially, these discs are in the rod 1. You need to print all the steps of discs movement so..." }, { "title": "Level order traversal in spiral form (geeksforgeeks - SDE Sheet)", "url": "/posts/level-order-traversal-in-spiral-form/", "categories": "sde-sheet", "tags": "java, binarytree, geeksforgeeks, sde-sheet", "date": "2024-09-05 21:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree and the task is to find the spiral order traversal of the tree.Spiral order Traversal mean: Starting from level 0 for root node, for all the even levels we print the node’s value from right to left and for all the odd levels we print the node’s value from le..." }, { "title": "Edit Distance (geeksforgeeks - SDE Sheet)", "url": "/posts/edit-distance-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet", "date": "2024-09-03 21:42:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings str1 and str2. Return the minimum number of operations required to convert str1 to str2.The possible operations are permitted: Insert a character at any position of the string. Remove any character from the string. Replace any character from the string with..." }, { "title": "Rearrange characters (geeksforgeeks - SDE Sheet)", "url": "/posts/rearrange-characters/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet, important", "date": "2024-09-03 00:01:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string S with repeated characters. The task is to rearrange characters in a string such that no two adjacent characters are the same.Note: The string has only lowercase English alphabets and it can have multiple solutions. Return any one of them.geeksforgeeksSOLUTIONGoo..." }, { "title": "Generate IP Addresses (geeksforgeeks - SDE Sheet)", "url": "/posts/generate-ip-addresses/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet, important", "date": "2024-09-01 23:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string S containing only digits, Your task is to complete the function genIp() which returns a vector containing all possible combinations of valid IPv4 IP addresses and takes only a string S as its only argument.Note: Order doesn’t matter. A valid IP address must be in..." }, { "title": "Form a palindrome (geeksforgeeks - SDE Sheet)", "url": "/posts/form-a-palindrome/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet, important", "date": "2024-09-01 18:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string, find the minimum number of characters to be inserted to convert it to a palindrome.geeksforgeeksSOLUTIONGood Explanation - takeUForwardTo understand how we calculate longest common subsequence, refer:Longest Common SubsequenceThe main idea is to take the reverse..." }, { "title": "Recursively remove all adjacent duplicates (geeksforgeeks - SDE Sheet)", "url": "/posts/recursively-remove-all-adjacent-duplicates/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-09-01 15:36:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s, remove all its adjacent duplicate characters recursively.Note: For some test cases, the resultant string would be an empty string. In that case, the function should return the empty string only.geeksforgeeksSOLUTIONAPPROACH 1 - BRUTE FORCE (ACCEPTED)Iterate th..." }, { "title": "Implement Atoi (geeksforgeeks - SDE Sheet)", "url": "/posts/implement-atoi/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-09-01 13:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s, the objective is to convert it into integer format without utilizing any built-in functions. If the conversion is not feasible, the function should return -1.Note: Conversion is feasible only if all characters in the string are numeric or if its first characte..." }, { "title": "Longest Common Substring (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-common-substring-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet, important", "date": "2024-09-01 12:47:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given two strings str1 and str2. Your task is to find the length of the longest common substring among the given strings.geeksforgeeksSOLUTIONAPPROACH 1 - BRUTE FORCE (ACCEPTED)class Solution { public int longestCommonSubstr(String str1, String str2) { int n =..." }, { "title": "Permutations of a given string (geeksforgeeks - SDE Sheet)", "url": "/posts/permutations-of-a-given-string-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-31 18:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string S. The task is to print all unique permutations of the given string that may contain dulplicates in lexicographically sorted order.geeksforgeeksSOLUTIONBRUTE-FORCE - BACKTRACKING (ACCEPTED)Convert string to a char array. We will try to get permutations by swappin..." }, { "title": "Longest Palindrome in a String (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-palindrome-in-a-string/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-31 17:40:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string str, find the longest palindromic substring in str. Substring of string str: str[ i . . . . j ] where 0 ≤ i ≤ j &amp;lt; len(str). Return the longest palindromic substring of str.Palindrome string: A string that reads the same backward. More formally, str is a pa..." }, { "title": "Longest Distinct characters in string (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-distinct-characters-in-string/", "categories": "sde-sheet", "tags": "java, sliding_window, geeksforgeeks, sde-sheet", "date": "2024-08-31 13:32:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string S, find the length of the longest substring with all distinct characters.geeksforgeeksSOLUTIONThis can be solved using sliding window. Maintain a HashSet to check the characters which have been visited.class Solution{ static int longestSubstrDistinctChars(Stri..." }, { "title": "Roman Number to Integer (geeksforgeeks - SDE Sheet)", "url": "/posts/roman-number-to-integer/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-31 13:20:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string in roman no format (s) your task is to convert it to an integer . Various symbols and their values are given below.I 1V 5X 10L 50C 100D 500M 1000geeksforgeeksSOLUTIONclass Solution { public int romanToDecimal(String str) { int n = str.length(); /..." }, { "title": "String Rotated by 2 Places (geeksforgeeks - SDE Sheet)", "url": "/posts/string-rotated-by-2-places/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-31 13:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings a and b. The task is to find if the string ‘b’ can be obtained by rotating (in any direction) string ‘a’ by exactly 2 places.geeksforgeeksSOLUTIONclass Solution{ //Function to check if a string can be obtained by rotating //another string by exactly 2 pl..." }, { "title": "Reverse Words (geeksforgeeks - SDE Sheet)", "url": "/posts/reverse-words/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-31 12:30:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a String S, reverse the string without reversing its individual words. Words are separated by dots.geeksforgeeksSOLUTIONAPPROACH 1 (TWO POINTERS)class Solution{ String reverseWords(String s) { int n = s.length(); // StringBuffer to store the reversed w..." }, { "title": "Parenthesis Checker (geeksforgeeks - SDE Sheet)", "url": "/posts/parenthesis-checker/", "categories": "sde-sheet", "tags": "java, stack, geeksforgeeks, sde-sheet", "date": "2024-08-31 12:01:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an expression string x. Examine whether the pairs and the orders of {,},(,),[,] are correct in exp.For example, the function should return ‘true’ for exp = [()]{}{[()()]()} and ‘false’ for exp = [(]).Note: The drive code prints “balanced” if function return true, otherwis..." }, { "title": "Implement strstr (geeksforgeeks - SDE Sheet)", "url": "/posts/implement-strstr/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-31 11:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONYour task is to implement the function strstr. The function takes two strings as arguments (s,x) and locates the occurrence of the string x in the string s. The function returns an integer denoting the first occurrence of the string x in s (0 based indexing).Note: You are not a..." }, { "title": "Solve the Sudoku (geeksforgeeks - SDE Sheet)", "url": "/posts/solve-the-sudoku/", "categories": "sde-sheet", "tags": "java, backtracking, geeksforgeeks, sde-sheet", "date": "2024-08-31 11:25:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an incomplete Sudoku configuration in terms of a 9 x 9 2-D square matrix (grid[][]), the task is to find a solved Sudoku. For simplicity, you may assume that there will be only one unique solution.A sudoku solution must satisfy all of the following rules: Each of the dig..." }, { "title": "Kth element in Matrix (geeksforgeeks - SDE Sheet)", "url": "/posts/kth-element-in-matrix/", "categories": "sde-sheet", "tags": "java, binary_search, geeksforgeeks, sde-sheet, important", "date": "2024-08-30 23:00:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a N x N matrix, where every row and column is sorted in non-decreasing order. Find the kth smallest element in the matrix.geeksforgeeksSOLUTIONGood Explanation - Aryan Mittal - YouTubeAPPROACH 1 - MAX HEAP (ACCEPTED)Iterate all the elements in the array and keep adding th..." }, { "title": "Find whether path exist (geeksforgeeks - SDE Sheet)", "url": "/posts/find-whether-path-exist/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-08-30 18:04:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a grid of size n*n filled with 0, 1, 2, 3. Check whether there is a path possible from the source to destination. You can traverse up, down, right and left.The description of cells is as follows: A value of cell 1 means Source. A value of cell 2 means Destination. A va..." }, { "title": "Maximum path sum in matrix (geeksforgeeks - SDE Sheet)", "url": "/posts/maximum-path-sum-in-matrix/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet", "date": "2024-08-30 17:45:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a n x n matrix of positive integers. There are only three possible moves from a cell mat[r][c]. mat[r+1] [c] mat[r+1] [c-1] mat [r+1] [c+1]Starting from any column in row 0 return the largest sum of any of the paths up to row n -1. Return the highest maximum path sum.N..." }, { "title": "Shortest Source to Destination Path (geeksforgeeks - SDE Sheet)", "url": "/posts/shortest-source-to-destination-path/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-08-30 16:30:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a 2D binary matrix A(0-based index) of dimensions NxM. Find the minimum number of steps required to reach from (0,0) to (X, Y).Note: You can only move left, right, up and down, and only through cells that contain 1.geeksforgeeksSOLUTIONclass Solution { int shortestDist..." }, { "title": "Rotten Oranges (geeksforgeeks - SDE Sheet)", "url": "/posts/rotten-oranges-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, graphs, geeksforgeeks, sde-sheet", "date": "2024-08-30 10:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning: 0 : Empty cell 1 : Cells have fresh oranges 2 : Cells have rotten orangesWe have to determine what is the earliest time after which all the oranges are rotten..." }, { "title": "Smallest window in a string containing all the characters of another string (geeksforgeeks - SDE Sheet)", "url": "/posts/smallest-window-in-a-string-containing-all-the-characters-of-another-string/", "categories": "sde-sheet", "tags": "java, strings, sliding_window, geeksforgeeks, sde-sheet", "date": "2024-08-29 21:07:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings S and P. Find the smallest window in the string S consisting of all the characters(including duplicates) of the string P. Return “-1” in case there is no such window present. In case there are multiple such windows of same length, return the one with the least..." }, { "title": "Array Pair Sum Divisibility Problem (geeksforgeeks - SDE Sheet)", "url": "/posts/array-pair-sum-divisibility-problem/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet, important", "date": "2024-08-28 23:17:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers nums and a number k, write a function that returns true if given array can be divided into pairs such that sum of every pair is divisible by k.geeksforgeeksSOLUTION If the array length is odd, return false because you can’t pair all elements. ..." }, { "title": "Longest consecutive subsequence (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-consecutive-subsequence-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-28 23:13:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of non-negative integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.geeksforgeeksSOLUTION class Solution { // arr[] : the input array // N : ..." }, { "title": "Convert a sentence into its equivalent mobile numeric keypad sequence (geeksforgeeks - SDE Sheet)", "url": "/posts/convert-a-sentence-into-its-equivalent-mobile-numeric-keypad-sequence/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-28 23:07:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sentence in the form of a string in uppercase, convert it into its equivalent mobile numeric keypad sequence. Please note there might be spaces in between the words in a sentence and we can print spaces by pressing 0.geeksforgeeksSOLUTIONclass Solution{ String printS..." }, { "title": "Find first repeated character (geeksforgeeks - SDE Sheet)", "url": "/posts/find-first-repeated-character/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-28 22:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string S. The task is to find the first repeated character in it. We need to find the character that occurs more than once and whose index of second occurrence is smallest. S contains only lowercase letters.geeksforgeeksSOLUTIONclass Solution{ String firstRepChar(Str..." }, { "title": "Minimum indexed character (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-indexed-character/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-28 22:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string str and another string patt. Find the minimum index of the character in str that is also present in patt.geeksforgeeksSOLUTIONclass Solution{ //Function to find the minimum indexed character. public static int minIndexChar(String str, String patt) { ..." }, { "title": "Count distinct elements in every window (geeksforgeeks - SDE Sheet)", "url": "/posts/count-distinct-elements-in-every-window/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, sde-sheet", "date": "2024-08-28 22:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers and a number K. Find the count of distinct elements in every window of size K in the array.geeksforgeeksSOLUTIONclass Solution { ArrayList&amp;lt;Integer&amp;gt; countDistinct(int A[], int n, int k) { ArrayList&amp;lt;Integer&amp;gt; result ..." }, { "title": "Remove Duplicates (geeksforgeeks - SDE Sheet)", "url": "/posts/remove-duplicates/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-28 22:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string str without spaces, the task is to remove all duplicate characters from it, keeping only the first occurrence.Note: The original order of characters must be kept the same.geeksforgeeksSOLUTIONclass Solution { String removeDups(String str) { int[] chars ..." }, { "title": "Uncommon characters (geeksforgeeks - SDE Sheet)", "url": "/posts/uncommon-characters/", "categories": "sde-sheet", "tags": "java, strings, geeksforgeeks, sde-sheet", "date": "2024-08-28 21:53:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings A and B consisting of lowercase english characters. Find the characters that are not common in the two strings.Note :- Return the string in sorted order.geeksforgeeksSOLUTION create two Sets which contains all the characters present in A and B strings create..." }, { "title": "Merge Without Extra Space (geeksforgeeks - SDE Sheet)", "url": "/posts/merge-without-extra-space/", "categories": "sde-sheet", "tags": "java, arrays, sorting, geeksforgeeks, sde-sheet, important", "date": "2024-08-28 19:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order without using any extra space. Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.geeksforgeeksSOLUTIONINITIA..." }, { "title": "Number of pairs (geeksforgeeks - SDE Sheet)", "url": "/posts/number-of-pairs/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-27 23:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two positive integer arrays arr and brr, find the number of pairs such that xy &amp;gt; yx (raised to power of) where x is an element from arr and y is an element from brr.geeksforgeeksSOLUTIONINTUITION if (x &amp;lt; y)then x^y &amp;gt; y^xBut, there are some exceptions..." }, { "title": "Largest BST (geeksforgeeks - SDE Sheet)", "url": "/posts/largest-bst/", "categories": "sde-sheet", "tags": "java, BST, binarytree, geeksforgeeks, sde-sheet", "date": "2024-08-26 17:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree. Find the size of its largest subtree which is a Binary Search Tree.Note: Here Size equals the number of nodes in the subtree.geeksforgeeksSOLUTIONBRUTE-FORCEclass Solution{ static int MIN = 0; static int MAX = 1000001; // return the size of the lar..." }, { "title": "Merge Sort (geeksforgeeks - SDE Sheet)", "url": "/posts/merge-sort-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, sorting, geeksforgeeks, sde-sheet", "date": "2024-08-26 16:30:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[], its starting position l and its ending position r. Sort the array using merge sort algorithm.geeksforgeeksSOLUTIONclass Solution{ void merge(int arr[], int l, int m, int r) { int[] out = new int[r-l+1]; int i = l; int j = m+1; ..." }, { "title": "Find All Four Sum Numbers (geeksforgeeks - SDE Sheet)", "url": "/posts/find-all-four-sum-numbers/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-26 15:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A of integers and another number K. Find all the unique quadruple from the given array that sums up to K.Also note that all the quadruples which you return should be internally sorted, ie for any quadruple [q1, q2, q3, q4] the following should follow: q1 &amp;lt;..." }, { "title": "Quick Sort (geeksforgeeks - SDE Sheet)", "url": "/posts/quick-sort/", "categories": "sde-sheet", "tags": "java, sorting, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-26 14:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONQuick Sort is a Divide and Conquer algorithm. It picks an element as a pivot and partitions the given array around the picked pivot.Given an array arr[], its starting position is low (the index of the array) and its ending position is high(the index of the array).Note: The low ..." }, { "title": "Maximize Toys (geeksforgeeks - SDE Sheet)", "url": "/posts/maximize-toys/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-26 12:25:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[] of length N consisting cost of N toys and an integer K depicting the amount with you. Your task is to find maximum number of toys you can buy with K amount.geeksforgeeksSOLUTIONclass Solution{ static int toyCount(int n, int k, int arr[]) { Arra..." }, { "title": "Anagram (geeksforgeeks - SDE Sheet)", "url": "/posts/anagram/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-26 10:17:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings a and b consisting of lowercase characters. The task is to check whether two given strings are an anagram of each other or not. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For examp..." }, { "title": "Allocate Minimum Pages (geeksforgeeks - SDE Sheet)", "url": "/posts/allocate-minimum-pages/", "categories": "sde-sheet", "tags": "java, binary_search, geeksforgeeks, sde-sheet", "date": "2024-08-25 22:54:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou have n books, each with arr[i] a number of pages. m students need to be allocated contiguous books, with each student getting at least one book.Out of all the permutations, the goal is to find the permutation where the sum of the maximum number of pages in a book allotted t..." }, { "title": "Maximum no of 1&#39;s row (geeksforgeeks - SDE Sheet)", "url": "/posts/maximum-no-of-1-s-row/", "categories": "sde-sheet", "tags": "java, binary_search, geeksforgeeks, sde-sheet", "date": "2024-08-25 20:23:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a boolean 2D array, where each row is sorted. Find the row with the maximum number of 1s.geeksforgeeksSOLUTIONclass Sol{ public static int maxOnes (int mat[][], int n, int m) { int max = 0; int res = 0; for(int i=0; i&amp;lt;n; i++){ ..." }, { "title": "Find the element that appears once in sorted array (geeksforgeeks - SDE Sheet)", "url": "/posts/find-the-element-that-appears-once-in-sorted-array/", "categories": "sde-sheet", "tags": "java, xor, geeksforgeeks, sde-sheet", "date": "2024-08-25 20:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted array arr[] of size N. Find the element that appears only once in the array. All other elements appear exactly twice.geeksforgeeksSOLUTIONUSING XORclass Solution{ int findOnce(int arr[], int n) { int x = arr[0]; for(int i=1; i&amp;lt;n; i++) ..." }, { "title": "Overlapping Intervals (geeksforgeeks - SDE Sheet)", "url": "/posts/overlapping-intervals/", "categories": "sde-sheet", "tags": "java, arrays, intervals, geeksforgeeks", "date": "2024-08-25 17:55:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a collection of Intervals, the task is to merge all of the overlapping Intervals.geeksforgeeksSOLUTIONclass Solution{ // Method to merge all overlapping intervals public int[][] overlappedInterval(int[][] intervals) { int n = intervals.length; // So..." }, { "title": "Sum of Middle elements of two sorted arrays (geeksforgeeks - SDE Sheet)", "url": "/posts/sum-of-middle-elements-of-two-sorted-arrays/", "categories": "sde-sheet", "tags": "java, binary_search, arrays, geeksforgeeks", "date": "2024-08-25 17:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven 2 sorted integer arrays arr1 and arr2 of the same size. Find the sum of the middle elements of two sorted arrays arr1 and arr2.geeksforgeeksSOLUTIONThis problem is similar to:Median of two sorted arrayclass Solution { public int SumofMiddleElements(int[] arr1, int[] ar..." }, { "title": "Swapping pairs make sum equal (geeksforgeeks - SDE Sheet)", "url": "/posts/swapping-pairs-make-sum-equal/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, important", "date": "2024-08-25 17:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two arrays of integers a[] and b[] of size n and m, the task is to check if a pair of values (one value from each array) exists such that swapping the elements of the pair will make the sum of two arrays equal.Note: Return 1 if there exists any such pair otherwise return ..." }, { "title": "Largest Number formed from an Array (geeksforgeeks - SDE Sheet)", "url": "/posts/largest-number-formed-from-an-array/", "categories": "sde-sheet", "tags": "java, strings, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-25 15:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of strings arr[] of length n representing non-negative integers, arrange them in a manner, such that, after concatenating them in order, it results in the largest possible number. Since the result may be very large, return it as a string.geeksforgeeksSOLUTIONThe ..." }, { "title": "Stock span problem (geeksforgeeks - SDE Sheet)", "url": "/posts/stock-span-problem/", "categories": "sde-sheet", "tags": "java, stack, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-25 14:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONThe stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate the span of stocks price for all n days.The span Si of the stocks price on a given day i is defined as the maximum number of consecutive days just b..." }, { "title": "Coin Change (Count Ways) (geeksforgeeks - SDE Sheet)", "url": "/posts/coin-change-count-ways/", "categories": "sde-sheet", "tags": "java, dynamic_programming, geeksforgeeks, sde-sheet, important", "date": "2024-08-25 12:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ].Note: Assume that you have an infinite supply of each type of coin. And you can ..." }, { "title": "K-th element of two Arrays (geeksforgeeks - SDE Sheet)", "url": "/posts/k-th-element-of-two-arrays/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet, important", "date": "2024-08-25 11:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two sorted arrays arr1 and arr2 and an element k. The task is to find the element that would be at the kth position of the combined sorted array.geeksforgeeksSOLUTIONThis problem is similar to:Median of two sorted arrayclass Solution { public long kthElement(int k, int..." }, { "title": "Stock buy and sell (geeksforgeeks - SDE Sheet)", "url": "/posts/stock-buy-and-sell/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-24 21:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONThe cost of stock on each day is given in an array A[] of size N. Find all the segments of days on which you buy and sell the stock such that the sum of difference between sell and buy prices is maximized. Each segment consists of indexes of two elements, first is index of day ..." }, { "title": "Spirally traversing a matrix (geeksforgeeks - SDE Sheet)", "url": "/posts/spirally-traversing-a-matrix/", "categories": "sde-sheet", "tags": "java, arrays, geeksforgeeks, sde-sheet", "date": "2024-08-24 20:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a rectangular matrix, and your task is to return an array while traversing the matrix in spiral form.geeksforgeeksSOLUTIONclass Solution { // Function to return a list of integers denoting spiral traversal of matrix. public ArrayList&amp;lt;Integer&amp;gt; s..." }, { "title": "K Sized Subarray Maximum (geeksforgeeks - SDE Sheet)", "url": "/posts/k-sized-subarray-maximum/", "categories": "sde-sheet", "tags": "java, sliding_window, heap, geeksforgeeks, sde-sheet", "date": "2024-08-24 20:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.geeksforgeeksSOLUTIONclass Solution{ static ArrayList &amp;lt;Integer&amp;gt; max_of_subarrays(int arr[], int n, int k) { // max heap to store array e..." }, { "title": "Largest subarray with 0 sum (geeksforgeeks - SDE Sheet)", "url": "/posts/largest-subarray-with-0-sum/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-08-24 19:45:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.geeksforgeeksSOLUTIONclass GfG { int maxLen(int arr[], int n) { // Create a hashmap to store the sum of elements and their corresponding ind..." }, { "title": "Minimum Platforms (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-platforms/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-08-24 19:09:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required for the railway station so that no train is kept waiting.Consider that all the trains arrive on the same day and leave on the same day. Arrival and depart..." }, { "title": "Count Inversions (geeksforgeeks - SDE Sheet)", "url": "/posts/count-inversions/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-08-24 14:00:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers. Find the Inversion Count in the array. Two array elements arr[i] and arr[j] form an inversion if arr[i] &amp;gt; arr[j] and i &amp;lt; j.Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If th..." }, { "title": "Minimize the Heights II (geeksforgeeks - SDE Sheet)", "url": "/posts/minimize-the-heights-ii/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-08-24 11:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[] denoting heights of N towers and a positive integer K.For each tower, you must perform exactly one of the following operations exactly once. Increase the height of the tower by K Decrease the height of the tower by KFind out the minimum possible differenc..." }, { "title": "Merge Strings Alternately", "url": "/posts/merge-strings-alternately/", "categories": "microsoft30days", "tags": "java, strings, leetcode, microsoft", "date": "2024-08-22 22:01:00 +0530", "snippet": "Problem DescriptionYou are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.Return the merged string.leetcodeSolutionclass Solutio..." }, { "title": "Design Bounded Blocking Queue", "url": "/posts/design-bounded-blocking-queue/", "categories": "design", "tags": "java, design, queue, leetcode", "date": "2024-08-04 22:18:00 +0530", "snippet": "Problem DescriptionImplement a thread-safe bounded blocking queue that has the following methods: BoundedBlockingQueue(int capacity) The constructor initializes the queue with a maximum capacity. void enqueue(int element) Adds an element to the front of the queue. If the queue is full, the call..." }, { "title": "Minimum Number of Keypresses", "url": "/posts/minimum-number-of-keypresses/", "categories": "arrays", "tags": "java, arrays, leetcode, amazon", "date": "2024-06-03 15:05:00 +0530", "snippet": "Problem DescriptionYou have a keypad with 9 buttons, numbered from 1 to 9, each mapped to lowercase English letters. You can choose which characters each button is matched to as long as: All 26 lowercase English letters are mapped to. Each character is mapped to by exactly 1 button. Each butto..." }, { "title": "Minimum Adjacent Swaps to Make a Valid Array", "url": "/posts/minimum-adjacent-swaps-to-make-a-valid-array/", "categories": "arrays", "tags": "java, arrays, leetcode, amazon", "date": "2024-06-03 11:29:00 +0530", "snippet": "Problem DescriptionYou are given a 0-indexed integer array nums.Swaps of adjacent elements are able to be performed on nums.A valid array meets the following conditions: The largest element (any of the largest elements if- there are multiple) is at the rightmost position in the- array. The smal..." }, { "title": "Next Greater Node In Linked List", "url": "/posts/next-greater-node-in-linked-list/", "categories": "linkedlist", "tags": "java, linkedlist, leetcode, microsoft, important", "date": "2024-06-03 10:42:00 +0530", "snippet": "Problem DescriptionYou are given the head of a linked list with n nodes.For each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.Return an integer array answer where answ..." }, { "title": "Minimum Number of Food Buckets to Feed the Hamsters", "url": "/posts/minimum-number-of-food-buckets-to-feed-the-hamsters/", "categories": "greedy", "tags": "java, greedy, leetcode, microsoft, important", "date": "2024-05-28 21:30:00 +0530", "snippet": "Problem DescriptionYou are given a 0-indexed string hamsters where hamsters[i] is either: ‘H’ indicating that there is a hamster at index i, or ’.’ indicating that index i is empty.You will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed ..." }, { "title": "Unique rows in boolean matrix (geeksforgeeks - SDE Sheet)", "url": "/posts/unique-rows-in-boolean-matrix-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, hashmap, sde-sheet", "date": "2024-05-17 17:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary matrix your task is to find all unique rows of the given matrix in the order of their appearance in the matrix.geeksforgeeksSOLUTIONFor each row, we convert it into a string and check if it’s already in our set. If it’s not, we add it to our list of unique rows.c..." }, { "title": "First non-repeating character in a stream (geeksforgeeks - SDE Sheet)", "url": "/posts/first-non-repeating-character-in-a-stream-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, linkedlist, hashmap, sde-sheet, important", "date": "2024-05-16 22:52:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an input stream A of n characters consisting only of lower case alphabets. While reading characters from the stream, you have to tell which character has appeared only once in the stream upto that point. If there are many characters that have appeared only once, you have ..." }, { "title": "Uncommon characters (geeksforgeeks - SDE Sheet)", "url": "/posts/uncommon-characters-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, strings, sde-sheet", "date": "2024-05-15 22:24:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings A and B consisting of lowercase english characters. Find the characters that are not common in the two strings.Return the string in sorted order.geeksforgeeksSOLUTIONclass Solution{ String UncommonChars(String A, String B) { int[] f1 = new int[26]..." }, { "title": "Search in a row-column sorted Matrix (geeksforgeeks - SDE Sheet)", "url": "/posts/search-in-a-row-column-sorted-matrix-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, binary_search, sde-sheet", "date": "2024-05-15 21:19:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a matrix of size n x m, where every row and column is sorted in increasing order, and a number x. Find whether element x is present in the matrix or not.geeksforgeeksSOLUTIONAPPROACH 1Iterate row wise and use binary search in each row to look for element x. We can add a s..." }, { "title": "Sort an array according to the other (geeksforgeeks - SDE Sheet)", "url": "/posts/sort-an-array-according-to-the-other-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-05-15 20:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two integer arrays A1[ ] and A2[ ] of size N and M respectively. Sort the first array A1[ ] such that all the relative positions of the elements in the first array are the same as the elements in the second array A2[ ].See example for better understanding.Note: If element..." }, { "title": "Allocate minimum number of pages (geeksforgeeks - SDE Sheet)", "url": "/posts/allocate-minimum-number-of-pages-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, binary_search, sde-sheet", "date": "2024-05-14 22:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou have N books, each with A[i] number of pages. M students need to be allocated contiguous books, with each student getting at least one book.Out of all the permutations, the goal is to find the permutation where the sum of maximum number of pages in a book allotted to a stud..." }, { "title": "Minimum Swaps to Sort (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-swaps-to-sort-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-05-13 22:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of n distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.geeksforgeeksSOLUTIONGood ExplanationWe create a new array that stores the elements along with their current indices. Then, we sort this array based o..." }, { "title": "Rearrange Array Alternately (geeksforgeeks - SDE Sheet)", "url": "/posts/rearrange-array-alternately-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-05-12 23:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted array of positive integers. Your task is to rearrange the array elements alternatively i.e first element should be max value, second should be min value, third should be second max, fourth should be second min and so on.Note: Modify the original array itself. Do ..." }, { "title": "Zero Sum Subarrays (geeksforgeeks - SDE Sheet)", "url": "/posts/zero-sum-subarrays-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, important", "date": "2024-05-10 23:55:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an array arr[] of size n. Find the total count of sub-arrays having their sum equal to 0.geeksforgeeksSOLUTIONclass Solution{ public static long findSubarray(long[] arr, int n) { // Create a HashMap to store the cumulative sums and their occurrences. ..." }, { "title": "Largest subarray with 0 sum (geeksforgeeks - SDE Sheet)", "url": "/posts/largest-subarray-with-0-sum-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, queue, important", "date": "2024-05-09 20:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.geeksforgeeksSOLUTIONWe will keep calculating the currentSum while iterating from the elements of the array and store it in a HashMap. The key will be..." }, { "title": "Maximum of all subarrays of size k (geeksforgeeks - SDE Sheet)", "url": "/posts/maximum-of-all-subarrays-of-size-k-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, important", "date": "2024-05-08 22:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.geeksforgeeksSOLUTIONAPPROACH 1 - USING MAX HEAP (TLE)We will add the first k elements of the array to a max heap. The max will at the top of the max heap. So, we ..." }, { "title": "Inorder Successor in BST", "url": "/posts/inorder-successor-in-bst/", "categories": "binarytree", "tags": "java, binarytree, binary_search", "date": "2024-04-30 16:34:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary search tree and a node p in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return null.The successor of a node p is the node with the smallest key greater than p.val.leetcodeSOLUTION..." }, { "title": "Reverse words in a given string (geeksforgeeks - SDE Sheet)", "url": "/posts/reverse-words-in-a-given-string-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, strings", "date": "2024-04-16 20:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a String S, reverse the string without reversing its individual words. Words are separated by dots.geeksforgeeksSOLUTIONA simple way to solve this is by using split() method. Remember to escape the special dot character . 🙃Here, we will solve this without using split(). T..." }, { "title": "K-th element of two Arrays (geeksforgeeks - SDE Sheet)", "url": "/posts/k-th-element-of-two-arrays-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays", "date": "2024-04-15 22:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the kth position of the final sorted array.geeksforgeeksSOLUTIONAPPROACH 1 | Time Complexity -&amp;gt; O(n+m)class Solution { public long kth..." }, { "title": "Length Unsorted Subarray", "url": "/posts/length-unsorted-subarray-geeksforgeeks-sde-sheet/", "categories": "geeksforgeeks", "tags": "java, geeksforgeeks, arrays, important", "date": "2024-04-09 23:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an unsorted array Arr of size N. Find the subarray Arr[s...e] such that sorting this subarray makes the whole array sorted.geeksforgeeksSOLUTIONGood Explanationclass Solve { int[] printUnsorted(int[] arr, int n) { // [SORTED][misplaced_UNSORTED_misplaced][SORTED..." }, { "title": "Kth smallest element (geeksforgeeks - SDE Sheet)", "url": "/posts/kth-smallest-element-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-04-08 21:42:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr[] and an integer K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.Note :- l and r denotes the starting and ending index of the array.geeksforgeeksSOLUTIO..." }, { "title": "Minimum number of jumps (geeksforgeeks - SDE Sheet)", "url": "/posts/minimum-number-of-jumps-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-04-07 12:53:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. This means if arr[i] = x, then we can jump any distance y such that y ≤ x.Find the minimum number of jumps to reach the end of the array (..." }, { "title": "Kadane&#39;s Algorithm (geeksforgeeks - SDE Sheet)", "url": "/posts/kadane-s-algorithm-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-04-07 12:32:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.geeksforgeeksSOLUTIONclass Solution{ long maxSubarraySum(int arr[], int n){ long maxSum = Long.MIN_VALUE; long current..." }, { "title": "Find Indexes of a subarray with given sum (geeksforgeeks - SDE Sheet)", "url": "/posts/find-indexes-of-a-subarray-with-given-sum-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet, important", "date": "2024-04-07 12:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an unsorted array A of size N that contains only non negative integers, find a continuous sub-array that adds to a given number S and return the left and right index(1-based indexing) of that subarray.In case of multiple subarrays, return the subarray indexes which come f..." }, { "title": "Minimize the sum of product (geeksforgeeks - SDE Sheet)", "url": "/posts/minimize-the-sum-of-product-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-06 17:32:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given two arrays, A and B, of equal size N. The task is to find the minimum value of A[0] * B[0] + A[1] * B[1] + .... + A[N-1] * B[N-1], where shuffling of elements of arrays A and B is allowed.geeksforgeeksSOLUTIONclass Solution { public long minValue(long a[], long..." }, { "title": "Convert array into Zig-Zag fashion (geeksforgeeks - SDE Sheet)", "url": "/posts/convert-array-into-zig-zag-fashion-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-06 17:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array arr of distinct elements of size N, the task is to rearrange the elements of the array in a zig-zag fashion so that the converted array should be in the below form:arr[0] &amp;lt; arr[1] &amp;gt; arr[2] &amp;lt; arr[3] &amp;gt; arr[4] &amp;lt; . . . . arr[n-2] &..." }, { "title": "Find all pairs with a given sum (geeksforgeeks - SDE Sheet)", "url": "/posts/find-all-pairs-with-a-given-sum-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-06 17:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two unsorted arrays A of size N and B of size M of distinct elements, the task is to find all pairs from both arrays whose sum is equal to X.Note: All pairs should be printed in increasing order of u. For eg. for two pairs (u1,v1) and (u2,v2), if u1 &amp;lt; u2 then(u1,v1..." }, { "title": "Longest Common Prefix in an Array (geeksforgeeks - SDE Sheet)", "url": "/posts/longest-common-prefix-in-an-array-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-06 12:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of N strings, find the longest common prefix among all strings present in the array. Return “-1” if there is no common prefix.geeksforgeeksSOLUTIONclass Solution{ String longestCommonPrefix(String arr[], int n){ // Initialize the longest common prefix w..." }, { "title": "Equilibrium Point (geeksforgeeks - SDE Sheet)", "url": "/posts/equilibrium-point-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-05 23:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A of n non negative numbers. The task is to find the first equilibrium point in an array. Equilibrium point in an array is an index (or position) such that the sum of all elements before that index is same as sum of elements after it.Note: Return equilibrium poin..." }, { "title": "Leaders in an array (geeksforgeeks - SDE Sheet)", "url": "/posts/leaders-in-an-array-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-05 21:01:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A of positive integers. Your task is to find the leaders in the array. An element of array is a leader if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader.geeksforgeeksSOLUTIONAPPROACH 1Using suffix array..." }, { "title": "Missing number in array (geeksforgeeks - SDE Sheet)", "url": "/posts/missing-number-in-array-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-04 23:19:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of size N-1 such that it only contains distinct integers in the range of 1 to N. Find the missing element.geeksforgeeksSOLUTIONclass Solution { int missingNumber(int array[], int n) { // Initialize x as the size of the array (n) int x = n; ..." }, { "title": "Array Subset of another array (geeksforgeeks - SDE Sheet)", "url": "/posts/array-subset-of-another-array-geeksforgeeks-sde-sheet/", "categories": "sde-sheet", "tags": "java, geeksforgeeks, arrays, sde-sheet", "date": "2024-04-04 23:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m, where both arrays may contain duplicate elements. The task is to determine whether array a2 is a subset of array a1. It’s important to note that both arrays can be sorted or unsorted. Additionally, each occurrence..." }, { "title": "Sort an array of 0s, 1s and 2s", "url": "/posts/sort-an-array-of-0s-1s-and-2s/", "categories": "arrays", "tags": "java, geeksforgeeks, arrays, important", "date": "2024-04-03 23:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.geeksforgeeksSOLUTIONThis is a very interesting question and the optimal solution is not easy to come up with. We are supposed to solve this problem in linear time. So we cannot use any o..." }, { "title": "Pascal&#39;s Triangle", "url": "/posts/pascal-s-triangle/", "categories": "dynamic_programming", "tags": "java, dynamic_programming, leetcode", "date": "2024-03-23 23:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer numRows, return the first numRows of Pascal’s triangle.In Pascal’s triangle, each number is the sum of the two numbers directly above it.leetcodeSOLUTIONclass Solution { public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generate(int numRows) { //..." }, { "title": "Max Consecutive Ones III", "url": "/posts/max-consecutive-ones-iii/", "categories": "sliding_window", "tags": "java, leetcode, sliding_window", "date": "2024-03-11 16:52:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary array nums and an integer k, return the maximum number of consecutive 1’s in the array if you can flip at most k 0’s.SOLUTIONclass Solution { public int longestOnes(int[] nums, int k) { int n = nums.length; // Initialize the maximum length of con..." }, { "title": "Validate Binary Search Tree", "url": "/posts/validate-binary-search-tree/", "categories": "neetcode150", "tags": "java, leetcode, binarytree, neetcode150", "date": "2024-03-02 18:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, determine if it is a valid binary search tree (BST).A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node’s key. The right subtree of a node contains only nodes with keys greater than ..." }, { "title": "Vowel and Consonant Substrings! (InterviewBit)", "url": "/posts/vowel-and-consonant-substrings-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-28 21:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string A consisting of lowercase characters.You have to find the number of substrings in A which starts with vowel and end with consonants or vice-versa.Return the count of substring modulo 10^9 + 7.SOLUTIONpublic class Solution { int M = (int) Math.pow(10, 9) + 7; ..." }, { "title": "Remove Consecutive Characters (InterviewBit)", "url": "/posts/remove-consecutive-characters-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-27 21:39:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string A and integer B, remove all consecutive same characters that have length exactly B.NOTE : All the consecutive same characters that have length exactly B will be removed simultaneously.SOLUTIONpublic class Solution { public String solve(String A, int B) { ..." }, { "title": "Implement StrStr (InterviewBit)", "url": "/posts/implement-strstr-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-25 22:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement strStr().strstr - locate a substring ( needle ) in a string ( haystack ).Try not to use standard library string functions for this question.Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.NOTE: String A is hayst..." }, { "title": "Divide Integers (InterviewBit)", "url": "/posts/divide-integers-interviewbit/", "categories": "interviewbit", "tags": "java, bit_manipulation, important", "date": "2024-02-24 20:18:00 +0530", "snippet": "PROBLEM DESCRIPTIONDivide two integers A and B, without using multiplication, division, and mod operator.Return the floor of the result of the division.Also, consider if there can be overflow cases. For overflow cases, return INT_MAX.Note: INT_MAX = 2^31 - 1SOLUTIONOne thing we should be aware he..." }, { "title": "Bulls and Cows (InterviewBit)", "url": "/posts/bulls-and-cows-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-23 23:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are playing the Bulls and Cows game with your friend.You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:The number of “bulls”, which are digits in the guess that are in t..." }, { "title": "Amazing Subarrays (InterviewBit)", "url": "/posts/amazing-subarrays-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-23 19:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a string A, and you have to find all the amazing substrings of A.An amazing Substring is one that starts with a vowel (a, e, i, o, u, A, E, I, O, U).Note: Take the mod of the answer with 10003.SOLUTIONpublic class Solution { int M = 10003; public int solve(S..." }, { "title": "Longest Common Prefix (InterviewBit)", "url": "/posts/longest-common-prefix-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-23 19:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the array of strings A, you need to find the longest string S which is the prefix of ALL the strings in the array.Longest common prefix for a pair of strings S1 and S2 is the longest string S which is the prefix of both S1 and S2.For Example: longest common prefix of “abc..." }, { "title": "Self Permutation (InterviewBit)", "url": "/posts/self-permutation-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-22 20:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given two strings A and B.Check whether there exists any permutation of both A and B such that they are equal.Return a single integer 1 if its exists, 0 otherwise.SOLUTIONAPPROACH 1Sorted form of both string should be same.public class Solution { public int permuteSt..." }, { "title": "String And Its Frequency (InterviewBit)", "url": "/posts/string-and-its-frequency-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-22 20:13:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string A with lowercase english alphabets and you have to return a string in which, with each character its frequency is written in adjacent.SOLUTIONpublic class Solution { public String solve(String A) { int n = A.length(); int[] freq = new int[26]; ..." }, { "title": "Deserialize (InterviewBit)", "url": "/posts/deserialize-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-22 20:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a string A which is a serialized string. You have to restore the original array of strings.The string in the output array should only have lowercase english alphabets.Serialization: Scan each element in a string, calculate its length and append it with a string an..." }, { "title": "Different Bits Sum Pairwise (InterviewBit)", "url": "/posts/different-bits-sum-pairwise-interviewbit/", "categories": "interviewbit", "tags": "java, bit_manipulation, important", "date": "2024-02-21 21:24:00 +0530", "snippet": "PROBLEM DESCRIPTIONWe define f(X, Y) as the number of different corresponding bits in the binary representation of X and Y.For example, f(2, 7) = 2, since the binary representation of 2 and 7 are 010 and 111, respectively. The first and the third bit differ, so f(2, 7) = 2.You are given an array ..." }, { "title": "XOR-ing the Subarrays! (InterviewBit)", "url": "/posts/xor-ing-the-subarrays-interviewbit/", "categories": "interviewbit", "tags": "java, bit_manipulation, important", "date": "2024-02-20 20:25:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N.You need to find the value obtained by XOR-ing the contiguous subarrays, followed by XOR-ing the values thus obtained. Determine and return this value.For example, if A = [3, 4, 5] :Subarray Operation Result3 None 34 ..." }, { "title": "Min XOR value (InterviewBit)", "url": "/posts/min-xor-value-interviewbit/", "categories": "interviewbit", "tags": "java, bit_manipulation, important", "date": "2024-02-19 20:25:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of N integers, find the pair of integers in the array which have minimum XOR value. Report the minimum XOR value.SOLUTIONBy sorting the array, we ensure that adjacent elements are closest to each other in value. This is crucial because XORing two number..." }, { "title": "Length of Last Word (InterviewBit)", "url": "/posts/length-of-last-word-interviewbit/", "categories": "interviewbit", "tags": "java, strings", "date": "2024-02-16 22:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.If the last word does not exist, return 0.Note: A word is defined as a character sequence consists of non-space characters only.Please make sure ..." }, { "title": "Reverse Bits (InterviewBit)", "url": "/posts/reverse-bits-interviewbit/", "categories": "interviewbit", "tags": "java, bit_manipulation", "date": "2024-02-13 20:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONReverse the bits of an 32 bit unsigned integer A.SOLUTIONAPPROACH 1public class Solution { public long reverse(long a) { long res = 0; for(int i=0; i&amp;lt;32; i++){ if( (a&amp;amp;1) != 0){ res = res | (1L&amp;lt;&amp;lt;(32-i-1)); ..." }, { "title": "Trailing Zeroes (InterviewBit)", "url": "/posts/trailing-zeroes-interviewbit/", "categories": "interviewbit", "tags": "java, bit_manipulation", "date": "2024-02-12 19:39:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer A, count and return the number of trailing zeroes.SOLUTIONAPPROACH 1public class Solution { public int solve(int A) { int c = 0; for(int i=0; i&amp;lt;32; i++){ if( (A&amp;amp;1) == 0 ){ c++; A = (A&amp;..." }, { "title": "Number of 1 Bits (InterviewBit)", "url": "/posts/number-of-1-bits-interviewbit/", "categories": "interviewbit", "tags": "java, bit_manipulation", "date": "2024-02-12 19:30:00 +0530", "snippet": "PROBLEM DESCRIPTIONWrite a function that takes an integer and returns the number of 1 bits it has.SOLUTIONThink of each bit in a binary number as a switch that can be either on (1) or off (0). When we subtract 1 from a number, it’s like flipping the rightmost switch from on to off and all the swi..." }, { "title": "Find a peak element (InterviewBit)", "url": "/posts/find-a-peak-element-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-11 17:03:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers A, find and return the peak element in it.An array element is peak if it is NOT smaller than its neighbors.For corner elements, we need to consider only one neighbor.For example, for input array {5, 10, 20, 15}, 20 is the only peak element.Following c..." }, { "title": "WoodCutting Made Easy! (InterviewBit)", "url": "/posts/woodcutting-made-easy-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-11 16:45:00 +0530", "snippet": "PROBLEM DESCRIPTIONThere is given an integer array A of size N denoting the heights of N trees.Lumberjack Ojas needs to chop down B metres of wood. It is an easy job for him since he has a nifty new woodcutting machine that can take down forests like wildfire. However, Ojas is only allowed to cut..." }, { "title": "Matrix Median (InterviewBit)", "url": "/posts/matrix-median-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-11 13:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a matrix of integers A of size N x M in which each row is sorted.Find and return the overall median of matrix A.NOTE: No extra memory is allowed.NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.SOLUTIONGood Explanation - take U forwar..." }, { "title": "Implement Power Function (InterviewBit)", "url": "/posts/implement-power-function-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-10 18:01:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement pow(x, n) % d.In other words, given x, n and d,Find (x^n % d)Note that remainders on division cannot be negative. In other words, make sure the answer you return is non-negative integer.Return the ans % 10000003.SOLUTIONFast Exponentiationpublic class Solution { pu..." }, { "title": "Painter&#39;s Partition Problem (InterviewBit)", "url": "/posts/painter-s-partition-problem-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-10 12:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven 2 integers A and B and an array of integers C of size N. Element C[i] represents the length of ith board.You have to paint all N boards [C0, C1, C2, C3 … CN-1]. There are A painters available and each of them takes B units of time to paint 1 unit of the board.Calculate an..." }, { "title": "Rotated Sorted Array Search (InterviewBit)", "url": "/posts/rotated-sorted-array-search-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-09 22:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers A of size N and an integer B.array A is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).You are given a target value B to search. If found in the array, return its index, otherwise, return -1.You may a..." }, { "title": "Allocate Books (InterviewBit)", "url": "/posts/allocate-books-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-08 22:33:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers A of size N and an integer B.The College library has N books. The ith book has A[i] number of pages.You have to allocate books to B number of students so that the maximum number of pages allocated to a student is minimum. A book will be allocated to ..." }, { "title": "Capacity To Ship Packages Within B Days (InterviewBit)", "url": "/posts/capacity-to-ship-packages-within-b-days-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-08 20:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONA conveyor belt has packages that must be shipped from one port to another within B days.The ith package on the conveyor belt has a weight of A[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than th..." }, { "title": "Square Root of Integer (InterviewBit)", "url": "/posts/square-root-of-integer-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-07 22:49:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer A.Compute and return the square root of A.If A is not a perfect square, return floor(sqrt(A)).DO NOT USE SQRT FUNCTION FROM STANDARD LIBRARY.NOTE: Do not use sort function from standard library. Users are expected to solve this in O(log(A)) time.SOLUTIONWe can ..." }, { "title": "Search in Bitonic Array! (InterviewBit)", "url": "/posts/search-in-bitonic-array-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-07 22:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.NOTE:A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.Problem Constraints 3..." }, { "title": "Search for a Range (InterviewBit)", "url": "/posts/search-for-a-range-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-06 22:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted array of integers A (0 based index) of size N, find the starting and the ending position of a given integer B in array A.Your algorithm’s runtime complexity must be in the order of O(log n).Return an array of size 2, such that the first element = starting positio..." }, { "title": "Matrix Search (InterviewBit)", "url": "/posts/matrix-search-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-02-06 22:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integer B in matrix A.This matrix A has the following properties: Integers in each row are sorted from left to right. The first integer of each row is greater than or e..." }, { "title": "Sorted Insert Position (InterviewBit)", "url": "/posts/sorted-insert-position-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-01-31 22:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted array A and a target value B, return the index if the target is found. If not, return the index where it would be if it were inserted in order.You may assume no duplicates in the array.SOLUTIONWe can use standard binary search to solve this.public class Solution ..." }, { "title": "Smaller or equal elements (InterviewBit)", "url": "/posts/smaller-or-equal-elements-interviewbit/", "categories": "interviewbit", "tags": "java, binary_search", "date": "2024-01-30 20:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an sorted array A of size N. Find number of elements which are less than or equal to B.NOTE: Expected Time Complexity O(log N)SOLUTIONpublic class Solution { public int solve(int[] A, int B) { // Initialize pointers for binary search int l = 0; // left po..." }, { "title": "PRETTYPRINT (InterviewBit)", "url": "/posts/prettyprint-interviewbit/", "categories": "interviewbit", "tags": "java, mathematics", "date": "2024-01-30 20:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONPrint concentric rectangular pattern in a 2d matrix.Let us show you some examples to clarify what we mean.Example 1:Input: A = 4.Output:4 4 4 4 4 4 44 3 3 3 3 3 44 3 2 2 2 3 44 3 2 1 2 3 44 3 2 2 2 3 44 3 3 3 3 3 44 4 4 4 4 4 4SOLUTIONpublic class Solution { public int[][] p..." }, { "title": "Divisible by 60 (InterviewBit)", "url": "/posts/divisible-by-60-interviewbit/", "categories": "interviewbit", "tags": "java, mathematics", "date": "2024-01-29 22:20:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a large number represent in the form of an integer array A, where each element is a digit.You have to find whether there exists any permutation of the array A such that the number becomes divisible by 60.Return 1 if it exists, 0 otherwise.SOLUTIONTo determine if a number ..." }, { "title": "Excel Column Number (InterviewBit)", "url": "/posts/excel-column-number-interviewbit/", "categories": "interviewbit", "tags": "java, mathematics", "date": "2024-01-28 22:39:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a column title A as appears in an Excel sheet, return its corresponding column number.SOLUTIONpublic class Solution { public int titleToNumber(String A) { int res = 0; int n = A.length(); // Iterate through each character in reverse order fo..." }, { "title": "Reverse integer (InterviewBit)", "url": "/posts/reverse-integer-interviewbit/", "categories": "interviewbit", "tags": "java, mathematics", "date": "2024-01-27 23:06:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer N and the task is to reverse the digits of the given integer. Return 0 if the result overflows and does not fit in a 32 bit signed integer.SOLUTIONWe can get the last digit using A%10. We can add it to a long variable res in reverse by using res = res*1..." }, { "title": "Palindrome Integer (InterviewBit)", "url": "/posts/palindrome-integer-interviewbit/", "categories": "interviewbit", "tags": "java, mathematics", "date": "2024-01-26 23:06:00 +0530", "snippet": "PROBLEM DESCRIPTIONDetermine whether an integer is a palindrome. Do this without extra space.A palindrome integer is an integer x for which reverse(x) = x where reverse(x) is x with its digit reversed. Negative numbers are not palindromic.SOLUTIONOne straight forward solution is to conver the int..." }, { "title": "Highest Score (InterviewBit)", "url": "/posts/highest-score-interviewbit/", "categories": "interviewbit", "tags": "java, mathematics", "date": "2024-01-25 21:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a 2D string array A of dimensions N x 2,where each row consists of two strings: first is the name of the student, second is their marks.You have to find the maximum average mark. If it is a floating point, round it down to the nearest integer less than or equal to..." }, { "title": "Prime Sum (InterviewBit)", "url": "/posts/prime-sum-interviewbit/", "categories": "interviewbit", "tags": "java, prime_numbers, important", "date": "2024-01-24 20:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an even number ( greater than 2 ), return two prime numbers whose sum will be equal to the given number.If there is more than one solution possible, return the lexicographically smaller solution i.e.If [a, b] is one solution with a &amp;lt;= b,and [c,d] is another solutio..." }, { "title": "Distribute in Circle! (InterviewBit)", "url": "/posts/distribute-in-circle-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, mathematics", "date": "2024-01-23 22:20:00 +0530", "snippet": "PROBLEM DESCRIPTIONA items are to be delivered in a circle of size B.Find the position where the Ath item will be delivered if we start from a given position C.NOTE: Items are distributed at adjacent positions starting from C.InterviewBitSOLUTIONpublic class Solution { public int solve(int A, ..." }, { "title": "Total Moves For Bishop! (InterviewBit)", "url": "/posts/total-moves-for-bishop-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, mathematics", "date": "2024-01-23 21:59:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the position of a Bishop (A, B) on an 8 x 8 chessboard.Your task is to count the total number of squares that can be visited by the Bishop in one move.The position of the Bishop is denoted using row and column number of the chessboard.InterviewBitSOLUTIONBishop can only m..." }, { "title": "Binary Representation (InterviewBit)", "url": "/posts/binary-representation-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, mathematics", "date": "2024-01-23 21:33:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a number N &amp;gt;= 0, find its representation in binary.Example:if N = 6,binary form = 110InterviewBitSOLUTIONpublic class Solution { public String findDigitsInBinary(int A) { if(A == 0) return &quot;0&quot;; StringBuffer sb = new StringBuffer(); ..." }, { "title": "Verify Prime (InterviewBit)", "url": "/posts/verify-prime-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-22 22:13:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a number N, verify if N is prime or not.Return 1 if N is prime, else return 0.InterviewBitSOLUTIONIf a is a factor of N, then N/a will also be its factor. So, we do not need to check for all numbers from 1 to N to check if it divides N. We can only go till sqrt(N). One th..." }, { "title": "Find Permutation (InterviewBit)", "url": "/posts/find-permutation-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays, important", "date": "2024-01-22 21:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a positive integer n and a string s consisting only of letters D or I, you have to find any permutation of first n positive integer that satisfy the given input string. D means the next number is smaller, while I means the next number is greater.Note: Length of given st..." }, { "title": "Next Permutation (InterviewBit)", "url": "/posts/next-permutation-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays, important", "date": "2024-01-22 20:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement the next permutation, which rearranges numbers into the numerically next greater permutation of numbers for a given array A of size N.If such an arrangement is not possible, it must be rearranged in the lowest possible order i.e., sorted in ascending order.Note: The ..." }, { "title": "Rotate Matrix (InterviewBit)", "url": "/posts/rotate-matrix-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-21 22:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a N x N 2D matrix A representing an image.Rotate the image by 90 degrees (clockwise).You need to do this in place. Update the given matrix A.InterviewBitSOLUTIONThis problem is same as:Rotate ImageThis problem can be solved by taking the transpose of the given mat..." }, { "title": "Largest Number (InterviewBit)", "url": "/posts/largest-number-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-21 21:24:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a list of non-negative integers, arrange them such that they form the largest number.Note: The result may be very large, so you need to return a string instead of an integer.InterviewBitSOLUTIONWe can use a custom Comparator which will help in sorting the values in the ar..." }, { "title": "Sort array with squares! (InterviewBit)", "url": "/posts/sort-array-with-squares-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-21 20:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted array A containing N integers both positive and negative.You need to create another array containing the squares of all the elements in A and return it in non-decreasing order.Try to this in O(N) time.InterviewBitSOLUTIONA straight forward solution is to create u..." }, { "title": "Pigeonhole Sort", "url": "/posts/pigeonhole-sort/", "categories": "sorting", "tags": "java, sorting, arrays", "date": "2024-01-21 15:17:00 +0530", "snippet": "PIGEONHOLE SORT Suitable for sorting integers within a small range when the distribution of values is relatively uniform. The time complexity of Pigeonhole Sort is O(n + Range), where: n is the number of elements to be sorted Range is the difference between the maximum a..." }, { "title": "Maximum Consecutive Gap (InterviewBit)", "url": "/posts/maximum-consecutive-gap-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, bucketing, arrays, important", "date": "2024-01-21 14:09:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an unsorted array, find the maximum difference between the successive elements in its sorted form.Return 0 if the array contains less than 2 elements.-You may assume that all the elements in the array are non-negative integers and fit in the 32-bit signed integer range. ..." }, { "title": "Balance Array (InterviewBit)", "url": "/posts/balance-array-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-21 12:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N. You need to count the number of special elements in the given array.A element is special if removal of that element make the array balanced.Array will be balanced if sum of even index element equal to sum of odd index element.InterviewBitSOLU..." }, { "title": "Find Duplicate in Array (InterviewBit)", "url": "/posts/find-duplicate-in-array-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-20 22:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a read-only array of n + 1 integers between 1 and n, find one number that repeats in linear time using less than O(n) space and traversing the stream sequentially O(1) times.If there are multiple possible answers ( like in the sample case ), output any one, if there is no..." }, { "title": "Triplets with Sum between given range (InterviewBit)", "url": "/posts/triplets-with-sum-between-given-range-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-20 21:47:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of real numbers greater than zero in form of strings. Find if there exists a triplet (a,b,c) such that 1 &amp;lt; a+b+c &amp;lt; 2. Return 1 for true or 0 for false.O(n) solution is expected.Note: You can assume the numbers in strings don’t overflow the primitive..." }, { "title": "Spiral Order Matrix II (InterviewBit)", "url": "/posts/spiral-order-matrix-ii-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-20 15:36:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer A, generate a square matrix filled with elements from 1 to A^2 in spiral order and return the generated square matrix.InterviewBitSOLUTIONMark the startRow, endRow, startColumn and endColumn. Then, start iterated over the perimeter in the order: top row -&amp;g..." }, { "title": "Anti Diagonals (InterviewBit)", "url": "/posts/anti-diagonals-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-20 14:55:00 +0530", "snippet": "PROBLEM DESCRIPTIONGive a N x N square matrix, return an array of its anti-diagonals. Look at the example for more details.Input:1 2 34 5 67 8 9Output:[ [1], [2, 4], [3, 5, 7], [6, 8], [9]]InterviewBitSOLUTIONpublic class Solution { public ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;..." }, { "title": "Pascal Triangle (InterviewBit)", "url": "/posts/pascal-triangle-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-20 14:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer A, equal to numRows, generate the first numRows of Pascal’s triangle.Pascal’s triangle: To generate A[C] in row R, sum up A&#39;[C] and A&#39;[C-1] from the previous row R - 1.InterviewBitSOLUTIONA[row][col] = A[row-1][col-1] + A[row-1][col]This is pretty strai..." }, { "title": "Kth Row of Pascal&#39;s Triangle (InterviewBit)", "url": "/posts/kth-row-of-pascal-s-triangle-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-19 23:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an index k, return the kth row of the Pascal’s triangle.Pascal’s triangle: To generate A[C] in row R, sum up A&#39;[C] and A&#39;[C-1] from previous row R - 1.Example:Input : k = 3Return : [1,3,3,1]Note: k is 0 based. k = 0, corresponds to the row [1].InterviewBitNote: Co..." }, { "title": "Segregate 0s and 1s in an array (InterviewBit)", "url": "/posts/segregate-0s-and-1s-in-an-array-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-19 22:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an array of 0s and 1s in random order. Segregate 0s on left side and 1s on right side of the array [Basically you have to sort the array]. Traverse array only once.InterviewBitSOLUTIONThis is a pretty simple one. First find the count of zeroes. Then, fill the comp..." }, { "title": "Make equal elements Array (InterviewBit)", "url": "/posts/make-equal-elements-array-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-19 21:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of all positive integers and an element x.You need to find out whether all array elements can be made equal or not by performing any of the 3 operations: add x to any element in array subtract x from any element from array do nothing.This operation can be perf..." }, { "title": "Perfect Peak of Array (InterviewBit)", "url": "/posts/perfect-peak-of-array-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-19 20:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N.You need to check that whether there exist a element which is strictly greater than all the elements on left of it and strictly smaller than all the elements on right of it.If it exists return 1 else return 0.NOTE:Do not consider the corner el..." }, { "title": "Array Sum (InterviewBit)", "url": "/posts/array-sum-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-18 23:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given two numbers represented as integer arrays A and B, where each digit is an element.You have to return an array which representing the sum of the two given numbers.The last element denotes the least significant bit, and the first element denotes the most significant..." }, { "title": "Move Zeroes (InterviewBit)", "url": "/posts/move-zeroes-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-18 22:37:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A, move all 0’s to the end of it while maintaining the relative order of the non-zero elements.Note that you must do this in-place without making a copy of the array.InterviewBitSOLUTIONAPPROACH 1 - USING EXTRA SPACECreate another array of size n (arr) an..." }, { "title": "N/3 Repeat Number (InterviewBit)", "url": "/posts/n-3-repeat-number-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-18 21:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou’re given a read-only array of N integers. Find out if any integer occurs more than N/3 times in the array in linear time and constant additional space.If so, return the integer. If not, return -1.If there are multiple solutions, return any one.InterviewBitSOLUTIONAPPROACH 1..." }, { "title": "Repeat and Missing Number Array (InterviewBit)", "url": "/posts/repeat-and-missing-number-array-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-17 21:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a read only array of n integers from 1 to n.Each integer appears exactly once except A which appears twice and B which is missing.Return A and B.Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?Note th..." }, { "title": "First Missing Integer (InterviewBit)", "url": "/posts/first-missing-integer-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-17 20:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an unsorted integer array, find the first missing positive integer.Your algorithm should run in O(n) time and use constant space.InterviewBitSOLUTIONLet’s understand the solution with the help of an example: A = [3 4 -1 1]We need to first for the first positive integer w..." }, { "title": "Maximum Sum Square SubMatrix (InterviewBit)", "url": "/posts/maximum-sum-square-submatrix-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-16 21:37:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a 2D integer matrix A of size N x N find a B x B submatrix where B &amp;lt;= N and B &amp;gt;= 1, such that sum of all the elements in submatrix is maximum.InterviewBitSOLUTIONWe will create a prefix sum for the matrix. We can do this by taking the sum row wise first and ..." }, { "title": "Maximum Unsorted Subarray (InterviewBit)", "url": "/posts/maximum-unsorted-subarray-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-15 22:41:00 +0530", "snippet": "Problem DescriptionGiven an array A of non-negative integers of size N. Find the minimum sub-array Al, Al+1 ,..., Ar such that if we sort(in ascending order) that sub-array, then the whole array should get sorted.If A is already sorted, output -1.InterviewBitSolutionThe idea is actually simple th..." }, { "title": "Max Distance (InterviewBit)", "url": "/posts/max-distance-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-15 21:27:00 +0530", "snippet": "Problem DescriptionGiven an array A of integers, find the maximum of j - i subjected to the constraint of A[i] &amp;lt;= A[j].InterviewBitSolutionIntuition:For any element, if we know the largest index possible on its right side, we have a candidate for the maximum value.For Example: [3 5 4 2]For..." }, { "title": "Hotel Bookings Possible (InterviewBit)", "url": "/posts/hotel-bookings-possible-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-14 23:06:00 +0530", "snippet": "Problem DescriptionA hotel manager has to process N advance bookings of rooms for the next season. His hotel has C rooms. Bookings contain an arrival date and a departure date. He wants to find out whether there are enough rooms in the hotel to satisfy the demand. Write a program that solves this..." }, { "title": "Wave Array (InterviewBit)", "url": "/posts/wave-array-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-14 15:02:00 +0530", "snippet": "Problem DescriptionGiven an array of integers A, sort the array into a wave-like array and return it.In other words, arrange the elements into a sequence such thata1 &amp;gt;= a2 &amp;lt;= a3 &amp;gt;= a4 &amp;lt;= a5.....NOTE: If multiple answers are possible, return the lexicographically smalle..." }, { "title": "Set Intersection (InterviewBit)", "url": "/posts/set-intersection-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, leetcode, greedy, arrays, important", "date": "2024-01-14 14:19:00 +0530", "snippet": "Problem DescriptionAn integer interval [X, Y] (for integers X &amp;lt; Y) is a set of all consecutive integers from X to Y, including X and Y.You are given a 2D array A with dimensions N x 2, where each row denotes an interval.Find the minimum size of a set S such that for every integer interval ..." }, { "title": "Reorder Data in Log Files (InterviewBit)", "url": "/posts/reorder-data-in-log-files-interviewbit/", "categories": "interviewbit", "tags": "java, interviewbit, arrays", "date": "2024-01-13 20:30:00 +0530", "snippet": "Problem DescriptionYou are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.There are two types of logs: Letter-logs: All words (except the identifier) consist of lowercase English letters. Digit-logs: All words (except the identifier..." }, { "title": "Max Min (InterviewBit)", "url": "/posts/max-min-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-10 22:24:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A of size N. You need to find the sum of Maximum and Minimum element in the given array.interviewbitSOLUTIONWe can break the array into two sections and search for the smallest and largest numbers within each part. By performing this process for both halves of th..." }, { "title": "Partitions (InterviewBit)", "url": "/posts/partitions-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-09 20:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a 1D integer array B containing A integers.Count the number of ways to split all the elements of the array into 3 contiguous parts so that the sum of elements in each part is the same.Such that : sum(B[1],..B[i]) = sum(B[i+1],...B[j]) = sum(B[j+1],...B[n])intervie..." }, { "title": "Flip (InterviewBit)", "url": "/posts/flip-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-08 23:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a binary string A(i.e. with characters 0 and 1) consisting of characters A1, A2, …, AN. In a single operation, you can choose two indices L and R such that 1 ≤ L ≤ R ≤ N and flip the characters AL, AL+1, …, AR. By flipping, we mean change character 0 to 1 and vice..." }, { "title": "Maximum Area of Triangle (InterviewBit)", "url": "/posts/maximum-area-of-triangle-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-07 23:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a character matrix of size N x M in the form of a string array A of size N where A[i] denotes ith row.Each character in the matrix consists any one of the following three characters {‘r’, ‘g’, ‘b’} where ‘r’ denotes red color similarly ‘g’ denotes green color and ‘b’ deno..." }, { "title": "Maximum Absolute Difference (InterviewBit)", "url": "/posts/maximum-absolute-difference-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-06 23:46:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an array of N integers, A1, A2 ,..., AN. Return maximum value of f(i, j) for all 1 ≤ i, j ≤ N. f(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.interviewbitSOLUTIONWe can expand the expression |A[i] - A[j]| + |i - j| in the foll..." }, { "title": "Maximum Sum Triplet (InterviewBit)", "url": "/posts/maximum-sum-triplet-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, greedy, interviewbit, important", "date": "2024-01-06 13:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A containing N integers.You need to find the maximum sum of triplet ( Ai + Aj + Ak ) such that 0 &amp;lt;= i &amp;lt; j &amp;lt; k &amp;lt; N and Ai &amp;lt; Aj &amp;lt; Ak.If no such triplet exist return 0.interviewbitSOLUTIONThis problem is quite tricky. Let us..." }, { "title": "Minimum Lights to Activate (InterviewBit)", "url": "/posts/minimum-lights-to-activate-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, greedy, interviewbit", "date": "2024-01-04 22:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONThere is a corridor in a Jail which is N units long. Given an array A of size N. The ith index of this array is 0 if the light at ith position is faulty otherwise it is 1.All the lights are of specific power B which if is placed at position X, it can light the corridor from [ X..." }, { "title": "Min Steps in Infinite Grid (Interviewbit)", "url": "/posts/min-steps-in-infinite-grid-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-03 22:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are in an infinite 2D grid where you can move in any of the 8 directions (we can move diagonally as well)You are given a sequence of points and the order in which you need to cover the points.Give the minimum number of steps in which you can achieve it. You start from the f..." }, { "title": "Pick from both sides (Interviewbit)", "url": "/posts/pick-from-both-sides-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-03 21:42:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N.You have to pick exactly B elements from either left or right end of the array A to get the maximum sum.Find and return this maximum possible sum.interviewbitSOLUTIONAPPROACH 1 (Dynamics Programming | Out of Memory) Note that this solution wa..." }, { "title": "Occurence of Each Number (InterviewBit)", "url": "/posts/occurence-of-each-number-interviewbit/", "categories": "interviewbit", "tags": "java, arrays, interviewbit", "date": "2024-01-02 23:06:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer array A.You have to find the number of occurences of each number.Return an array containing only the occurences with the smallest value’s occurence first.interviewbitSOLUTIONAPPRAOCH 1 (HashMap)import java.util.*;public class Solution { public int[] ..." }, { "title": "Getting Started With Spring", "url": "/posts/getting-started-with-spring/", "categories": "", "tags": "", "date": "2023-12-23 00:00:00 +0530", "snippet": "🌱 Spring Framework - 101 🌱If you are looking for a comprehensive and easy-to-follow guide to learn the Spring Framework, you have come to the right place. This blog page covers a wide range of topics, from the basics of bean management and dependency injection, to the advanced features of aspect-..." }, { "title": "Binary Tree Longest Consecutive Sequence", "url": "/posts/binary-tree-longest-consecutive-sequence/", "categories": "binarytree", "tags": "java, binarytree, leetcode, leetcodealgo100, important", "date": "2023-10-25 21:23:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, return the length of the longest consecutive sequence path.A consecutive sequence path is a path where the values increase by one along the path.Note that the path can start at any node in the tree, and you cannot go from a node to its parent in..." }, { "title": "Find the Celebrity", "url": "/posts/find-the-celebrity/", "categories": "graphs", "tags": "java, graphs, leetcode, leetcodealgo100", "date": "2023-10-18 20:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONSuppose you are at a party with n people labeled from 0 to n - 1 and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know the celebrity, but the celebrity does not know any of them.Now you want to find out who the cele..." }, { "title": "Find Permutation", "url": "/posts/find-permutation/", "categories": "stack", "tags": "java, stack, arrays, leetcode, leetcodealgo100", "date": "2023-10-17 20:00:00 +0530", "snippet": "PROBLEM DESCRIPTIONA permutation perm of n integers of all the integers in the range [1, n] can be represented as a string s of length n - 1 where: s[i] == &#39;I&#39; if perm[i] &amp;lt; perm[i + 1], and s[i] == &#39;D&#39; if perm[i] &amp;gt; perm[i + 1.Given a string s, reconstruct the lexic..." }, { "title": "Missing Number In Arithmetic Progression", "url": "/posts/missing-number-in-arithmetic-progression/", "categories": "binary_search", "tags": "java, binary_search, arrays, leetcode, leetcodealgo100", "date": "2023-10-13 20:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONIn some array arr, the values were in arithmetic progression: the values arr[i + 1] - arr[i] are all equal for every 0 &amp;lt;= i &amp;lt; arr.length - 1.A value from arr was removed that was not the first or last value in the array.Given arr, return the removed value.leetcode..." }, { "title": "First Unique Number", "url": "/posts/first-unique-number/", "categories": "queue", "tags": "java, queue, leetcode, leetcodealgo100", "date": "2023-10-12 21:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou have a queue of integers, you need to retrieve the first unique integer in the queue.Implement the FirstUnique class: FirstUnique(int[] nums) Initializes the object with the numbers in the queue. int showFirstUnique() returns the value of the first unique integer of the q..." }, { "title": "Delete N Nodes After M Nodes of a Linked List", "url": "/posts/delete-n-nodes-after-m-nodes-of-a-linked-list/", "categories": "linkedlist", "tags": "java, linkedlist, leetcode, leetcodealgo100", "date": "2023-10-11 20:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given the head of a linked list and two integers m and n.Traverse the linked list and remove some nodes in the following way: Start with the head as the current node. Keep the first m nodes starting with the current node. Remove the next n nodes Keep repeating steps..." }, { "title": "Remove Interval", "url": "/posts/remove-interval/", "categories": "intervals", "tags": "java, intervals, leetcode, leetcodealgo100", "date": "2023-10-10 20:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONA set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form [a, b). A real number x is in the set if one of its intervals [a, b) contains x (i.e. a &amp;lt;= x &amp;lt; b).You are given a sorted list of disjoint interv..." }, { "title": "Add Bold Tag in String", "url": "/posts/add-bold-tag-in-string/", "categories": "strings", "tags": "java, intervals, strings, leetcode, leetcodealgo100", "date": "2023-10-09 20:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a string s and an array of strings words.You should add a closed pair of bold tag &amp;lt;b&amp;gt; and &amp;lt;/b&amp;gt; to wrap the substrings in s that exist in words. If two such substrings overlap, you should wrap them together with only one pair of closed ..." }, { "title": "Missing Ranges", "url": "/posts/missing-ranges/", "categories": "matrix", "tags": "java, matrix, leetcode, leetcodealgo100", "date": "2023-10-04 19:39:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an inclusive range [lower, upper] and a sorted unique integer array nums, where all elements are within the inclusive range.A number x is considered missing if x is in the range [lower, upper] and x is not in nums.Return the shortest sorted list of ranges that exa..." }, { "title": "Candy Crush", "url": "/posts/candy-crush/", "categories": "matrix", "tags": "java, matrix, leetcode, leetcodealgo100", "date": "2023-10-03 20:47:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an m x n integer array board representing the grid of candy where board[i][j] represents the type of candy. A value of board[i][j] == 0 represents that the cell is empty.The given board represents the state of the game following the player’s move. Now, you need to restore..." }, { "title": "Sparse Matrix Multiplication", "url": "/posts/sparse-matrix-multiplication/", "categories": "matrix", "tags": "java, matrix, leetcode, leetcodealgo100", "date": "2023-10-02 19:33:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two sparse matrices mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.leetcodeSOLUTIONclass Solution { public int[][] multiply(int[][] mat1, int[][] mat2) { int n1 = mat1.length; ..." }, { "title": "Group Shifted Strings", "url": "/posts/group-shifted-strings/", "categories": "hashing", "tags": "java, hashing, leetcode, leetcodealgo100", "date": "2023-10-01 14:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s and an integer k, return the number of substrings in s of length k with no repeated characters.leetcodeSOLUTION We find how many shifts it would take if we had to change the first character to ‘a’ We shift all the other character with the same amount We use ..." }, { "title": "Find K-Length Substrings With No Repeated Characters", "url": "/posts/find-k-length-substrings-with-no-repeated-characters/", "categories": "sliding_window", "tags": "java, sliding_window, leetcode, leetcodealgo100", "date": "2023-09-27 23:33:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s and an integer k, return the number of substrings in s of length k with no repeated characters.leetcodeSOLUTIONclass Solution { public int numKLenSubstrNoRepeats(String s, int k) { int n = s.length(); // If k is greater than the length of the s..." }, { "title": "Max Consecutive Ones II", "url": "/posts/max-consecutive-ones-ii/", "categories": "sliding_window", "tags": "java, sliding_window, leetcode, leetcodealgo100", "date": "2023-09-27 20:01:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary array nums, return the maximum number of consecutive 1’s in the array if you can flip at most one 0.leetcodeSOLUTIONclass Solution { public int findMaxConsecutiveOnes(int[] nums) { int n = nums.length; int i = 0; // left pointer i to t..." }, { "title": "Longest Substring with At Most Two Distinct Characters", "url": "/posts/longest-substring-with-at-most-two-distinct-characters/", "categories": "sliding_window", "tags": "java, sliding_window, leetcode, leetcodealgo100", "date": "2023-09-26 19:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s, return the length of the longest substring that contains at most two distinct characters.leetcodeSOLUTIONclass Solution { public int lengthOfLongestSubstringTwoDistinct(String s) { // Get the length of the input string int n = s.length(); ..." }, { "title": "Shortest Way to Form String", "url": "/posts/shortest-way-to-form-string/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcodealgo100", "date": "2023-09-25 19:54:00 +0530", "snippet": "PROBLEM DESCRIPTIONA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., “ace” is a subsequence of “abcde” while “aec” is not).Given two strin..." }, { "title": "Longest Arithmetic Subsequence of Given Difference", "url": "/posts/longest-arithmetic-subsequence-of-given-difference/", "categories": "dynamic_programming", "tags": "java, leetcode, leetcodealgo100, dynamic_programming", "date": "2023-09-24 15:15:00 +0530", "snippet": "Problem DescriptionGiven an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.A subsequence is a sequence that can be derived from..." }, { "title": "Reverse Words in a String II", "url": "/posts/reverse-words-in-a-string-ii/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcodealgo100", "date": "2023-09-24 12:40:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a character array s, reverse the order of the words.A word is defined as a sequence of non-space characters. The words in s will be separated by a single space.Your code must solve the problem in-place, i.e. without allocating extra space.leetcodeSOLUTIONclass Solution { ..." }, { "title": "One Edit Distance", "url": "/posts/one-edit-distance/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcodealgo100", "date": "2023-09-23 22:34:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings s and t, return true if they are both one edit distance apart, otherwise return false.A string s is said to be one distance apart from a string t if you can: Insert exactly one character into s to get t. Delete exactly one character from s to get t. Replace..." }, { "title": "Confusing Number", "url": "/posts/confusing-number/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcodealgo100", "date": "2023-09-21 20:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONA confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.We can rotate digits of a number by 180 degrees to form new digits. When 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6 respectively. When 2..." }, { "title": "Wiggle Sort", "url": "/posts/wiggle-sort/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcodealgo100", "date": "2023-09-20 21:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array nums, reorder it such that nums[0] &amp;lt;= nums[1] &amp;gt;= nums[2] &amp;lt;= nums[3]….You may assume the input array always has a valid answer.leetcodeSOLUTIONAPPROACH 1Original sorted array: [a, b, c, d, e]First, we swap ‘b’ and ‘c’: a &amp;lt;= c (..." }, { "title": "Maximum Distance in Arrays", "url": "/posts/maximum-distance-in-arrays/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcodealgo100", "date": "2023-09-19 21:45:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given m arrays, where each array is sorted in ascending order.You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|.Return the..." }, { "title": "Best Time to Buy and Sell Stock IV", "url": "/posts/best-time-to-buy-and-sell-stock-iv/", "categories": "dynamic_programming", "tags": "java, leetcode, leetcode150, recursion, dynamic_programming", "date": "2023-09-16 19:49:00 +0530", "snippet": "Problem DescriptionYou are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.Note: You may not eng..." }, { "title": "Best Time to Buy and Sell Stock III", "url": "/posts/best-time-to-buy-and-sell-stock-iii/", "categories": "dynamic_programming", "tags": "java, leetcode, leetcode150, recursion, dynamic_programming, important", "date": "2023-09-16 19:28:00 +0530", "snippet": "Problem DescriptionYou are given an array prices where prices[i] is the price of a given stock on the ith day.Find the maximum profit you can achieve. You may complete at most two transactions.Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before y..." }, { "title": "Word Search II", "url": "/posts/word-search-ii/", "categories": "backtracking", "tags": "java, leetcode, leetcode150, recursion, backtracking", "date": "2023-09-16 00:11:00 +0530", "snippet": "Problem DescriptionGiven an m x n board of characters and a list of strings words, return all words on the board.Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more th..." }, { "title": "Text Justification", "url": "/posts/text-justification/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150", "date": "2023-09-15 21:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spac..." }, { "title": "IPO", "url": "/posts/ipo/", "categories": "heap", "tags": "java, heap, leetcode, leetcode150", "date": "2023-09-11 21:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONSuppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before t..." }, { "title": "Max Points on a Line", "url": "/posts/max-points-on-a-line/", "categories": "mathematics", "tags": "java, mathematics, leetcode, leetcode150", "date": "2023-09-11 20:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.leetcodeSOLUTIONNeetcode YouTubeimport java.util.HashMap;import java.util.Map;class Solution { public int maxPoints..." }, { "title": "Construct Quad Tree", "url": "/posts/construct-quad-tree/", "categories": "divide_and_conquer", "tags": "java, divide_and_conquer, leetcode, leetcode150", "date": "2023-09-10 11:11:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a n * n matrix grid of 0’s and 1’s only. We want to represent grid with a Quad-Tree.Return the root of the Quad-Tree representing grid.A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: val..." }, { "title": "Maximal Square", "url": "/posts/maximal-square/", "categories": "dynamic_programming", "tags": "java, dynamic_programming, leetcode, leetcode150, important", "date": "2023-09-07 22:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an m x n binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.leetcodeSOLUTIONNeetcode YouTubeclass Solution { public int maximalSquare(char[][] matrix) { // Create a map to store the results of subproblems ..." }, { "title": "Minimum Path Sum", "url": "/posts/minimum-path-sum/", "categories": "dynamic_programming", "tags": "java, dynamic_programming, leetcode, leetcode150", "date": "2023-09-03 12:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.Note: You can only move either down or right at any point in time.leetcodeSOLUTIONclass Solution { public int minPathSum(int[..." }, { "title": "Furthest Point From Origin", "url": "/posts/furthest-point-from-origin/", "categories": "contest_question", "tags": "java, leetcode, contest_question", "date": "2023-08-31 22:14:00 +0530", "snippet": "Problem DescriptionYou are given a string moves of length n consisting only of characters ‘L’, ‘R’, and ‘_’. The string represents your movement on a number line starting from the origin 0.In the ith move, you can choose one of the following directions: move to the left if moves[i] = ‘L’ or move..." }, { "title": "Maximum Sum Circular Subarray", "url": "/posts/maximum-sum-circular-subarray/", "categories": "arrays", "tags": "java, arrays, kadane, leetcode, leetcode150, important", "date": "2023-08-26 21:45:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous eleme..." }, { "title": "Find K Pairs with Smallest Sums", "url": "/posts/find-k-pairs-with-smallest-sums/", "categories": "heap", "tags": "java, heap, leetcode, leetcode150, important", "date": "2023-08-26 11:47:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.Define a pair (u, v) which consists of one element from the first array and one element from the second array.Return the k pairs (u1, v1), (u2, v2), …, (uk, vk) with the smallest su..." }, { "title": "Sort List", "url": "/posts/sort-list/", "categories": "binarytree", "tags": "java, divide_and_conquer, binarytree, leetcode, leetcode150", "date": "2023-08-24 20:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.leetcodeSOLUTIONFirst we get the center of the list. We break it into two linked lists by setting the next pointer of the middle element to null. Bef..." }, { "title": "Convert Sorted Array to Binary Search Tree", "url": "/posts/convert-sorted-array-to-binary-search-tree/", "categories": "binarytree", "tags": "java, divide_and_conquer, binarytree, leetcode, leetcode150", "date": "2023-08-24 19:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.leetcodeSOLUTIONWe can solve this recursively: First get the middle element from range [start, end]. Let’s say it’s idx. Create a node using the va..." }, { "title": "N-Queens II", "url": "/posts/n-queens-ii/", "categories": "backtracking", "tags": "java, leetcode, leetcode150, recursion, backtracking", "date": "2023-08-23 22:32:00 +0530", "snippet": "Problem DescriptionThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.Given an integer n, return the number of distinct solutions to the n-queens puzzle.leetcodeSolutionFirst part of the question:N-Queens ISimilar to N-Queens I,..." }, { "title": "Combinations", "url": "/posts/combinations/", "categories": "backtracking", "tags": "java, leetcode, leetcode150, recursion, backtracking", "date": "2023-08-19 20:57:00 +0530", "snippet": "Problem DescriptionGiven two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].You may return the answer in any order.Example:Input: n = 4, k = 2Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]Explanation: There are 4 choose 2 = 6 total combinations.Note th..." }, { "title": "Find First and Last Position of Element in Sorted Array", "url": "/posts/find-first-and-last-position-of-element-in-sorted-array/", "categories": "binary_search", "tags": "java, binary_search, leetcode, leetcode150", "date": "2023-08-18 22:49:00 +0530", "snippet": "Problem DescriptionGiven an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.If target is not found in the array, return [-1, -1].You must write an algorithm with O(log n) runtime complexity.leetcodeSolutionUse binary search to f..." }, { "title": "Find Peak Element", "url": "/posts/find-peak-element/", "categories": "binary_search", "tags": "java, binary_search, leetcode, leetcode150, important", "date": "2023-08-18 18:03:00 +0530", "snippet": "Problem DescriptionA peak element is an element that is strictly greater than its neighbors.Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.You may imagine that nums[-1] = nums[n] = -∞. In ..." }, { "title": "Minimum Genetic Mutation", "url": "/posts/minimum-genetic-mutation/", "categories": "graphs", "tags": "java, graphs, leetcode, leetcode150, important", "date": "2023-08-17 21:53:00 +0530", "snippet": "PROBLEM DESCRIPTIONA gene string can be represented by an 8-character long string, with choices from ‘A’, ‘C’, ‘G’, and ‘T’.Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene str..." }, { "title": "Snakes and Ladders", "url": "/posts/snakes-and-ladders/", "categories": "graphs", "tags": "java, graphs, leetcode, leetcode150, important", "date": "2023-08-17 19:37:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.You start on square 1 of the board. In each move, starting from squ..." }, { "title": "Evaluate Division", "url": "/posts/evaluate-division/", "categories": "graphs", "tags": "java, graphs, leetcode, leetcode150", "date": "2023-08-15 22:24:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.You are also given some queries, where que..." }, { "title": "Search Insert Position", "url": "/posts/search-insert-position/", "categories": "BST", "tags": "java, BST, leetcode, leetcode150", "date": "2023-08-15 17:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity.leetcodeSOLUTIONWe can use binary search ..." }, { "title": "Minimum Absolute Difference in BST", "url": "/posts/minimum-absolute-difference-in-bst/", "categories": "BST", "tags": "java, BST, leetcode, leetcode150", "date": "2023-08-13 17:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.leetcodeSOLUTIONWe should be aware that the inorder traversal of a BST will be sorted. The minimum absolute value will be a difference ..." }, { "title": "Lowest Common Ancestor of a Binary Tree", "url": "/posts/lowest-common-ancestor-of-a-binary-tree/", "categories": "BST", "tags": "java, BST, leetcode, leetcode150", "date": "2023-08-12 22:32:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we all..." }, { "title": "Binary Search Tree Iterator", "url": "/posts/binary-search-tree-iterator/", "categories": "BST", "tags": "java, BST, leetcode, leetcode150", "date": "2023-08-12 21:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):-BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initi..." }, { "title": "Count Complete Tree Nodes", "url": "/posts/count-complete-tree-nodes/", "categories": "binarytree", "tags": "java, binarytree, leetcode, leetcode150, important", "date": "2023-08-12 19:04:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a complete binary tree, return the number of the nodes in the tree.According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1..." }, { "title": "Sum Root to Leaf Numbers", "url": "/posts/sum-root-to-leaf-numbers/", "categories": "binarytree", "tags": "java, binarytree, leetcode, leetcode150", "date": "2023-08-12 14:20:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given the root of a binary tree containing digits from 0 to 9 only.Each root-to-leaf path in the tree represents a number.Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.leetcodeSOLUTIONclass Sol..." }, { "title": "Flatten Binary Tree to Linked List", "url": "/posts/flatten-binary-tree-to-linked-list/", "categories": "binarytree", "tags": "java, binarytree, leetcode, leetcode150, important", "date": "2023-08-11 22:23:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, flatten the tree into a “linked list”: The “linked list” should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The “linked list” should be in the same or..." }, { "title": "Populating Next Right Pointers in Each Node II", "url": "/posts/populating-next-right-pointers-in-each-node-ii/", "categories": "binarytree", "tags": "java, binarytree, leetcode, leetcode150, important", "date": "2023-08-11 20:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary treestruct Node { int val; Node *left; Node *right; Node *next;}Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.Initially, all next pointers are set to NULL.leetcodeSOLUTIONAPP..." }, { "title": "Partition List", "url": "/posts/partition-list/", "categories": "linkedlist", "tags": "java, linkedlist, leetcode, leetcode150", "date": "2023-08-09 19:37:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.You should preserve the original relative order of the nodes in each of the two partitions.leetcodeSOLUTION/** * Definition for singly-linked..." }, { "title": "Add Binary", "url": "/posts/add-binary/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, leetcode, leetcode150", "date": "2023-08-08 22:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two binary strings a and b, return their sum as a binary string.leetcodeSOLUTIONclass Solution { public String addBinary(String a, String b) { // Initialize indices to traverse the input strings from right to left int i = a.length() - 1; int j ..." }, { "title": "Remove Duplicates from Sorted List II", "url": "/posts/remove-duplicates-from-sorted-list-ii/", "categories": "linkedlist", "tags": "java, linkedlist, leetcode, leetcode150", "date": "2023-08-08 19:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.leetcodeSOLUTIONAPPROACH 1class Solution { public ListNode deleteDuplicates(ListNode head) { ..." }, { "title": "Reverse Linked List II", "url": "/posts/reverse-linked-list-ii/", "categories": "linkedlist", "tags": "java, linkedlist, leetcode, leetcode150, important", "date": "2023-08-07 22:24:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a singly linked list and two integers left and right where left &amp;lt;= right, reverse the nodes of the list from position left to position right, and return the reversed list.leetcodeSOLUTIONThis problem is best understood if you try it out by hand. So just..." }, { "title": "Basic Calculator", "url": "/posts/basic-calculator/", "categories": "stack", "tags": "java, stack, leetcode, leetcode150, important", "date": "2023-08-05 12:30:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().leetcodeSOLUTIONleet..." }, { "title": "Simplify Path", "url": "/posts/simplify-path/", "categories": "stack", "tags": "java, stack, leetcode, leetcode150", "date": "2023-08-04 22:04:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string path, which is an absolute path (starting with a slash ‘/’) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.In a Unix-style file system, a period ‘.’ refers to the current directory, a double period ‘..’ refers to t..." }, { "title": "Valid Parentheses", "url": "/posts/valid-parentheses/", "categories": "stack", "tags": "java, stack, leetcode, leetcode150", "date": "2023-08-04 20:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[’ and ‘]’, determine if the input string is valid.An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close brac..." }, { "title": "Minimum Number of Arrows to Burst Balloons", "url": "/posts/minimum-number-of-arrows-to-burst-balloons/", "categories": "intervals", "tags": "java, intervals, leetcode, leetcode150", "date": "2023-08-03 23:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONThere are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the e..." }, { "title": "Summary Ranges", "url": "/posts/summary-ranges/", "categories": "intervals", "tags": "java, intervals, leetcode, leetcode150", "date": "2023-08-03 20:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a sorted unique integer array nums.A range [a,b] is the set of all integers from a to b (inclusive).Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, an..." }, { "title": "Game of Life", "url": "/posts/game-of-life/", "categories": "matrix", "tags": "java, matrix, leetcode, leetcode150", "date": "2023-08-03 20:03:00 +0530", "snippet": "PROBLEM DESCRIPTIONAccording to Wikipedia’s article: “The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.”The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a ..." }, { "title": "Contains Duplicate II", "url": "/posts/contains-duplicate-ii/", "categories": "hashmap", "tags": "java, hashmap, leetcode, leetcode150", "date": "2023-08-02 19:48:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) &amp;lt;= k.leetcodeSOLUTIONAPPROACH 1This is the most intuitive one in which we maintain a HashMap of &amp;lt;Integer, L..." }, { "title": "Word Pattern", "url": "/posts/word-pattern/", "categories": "hashmap", "tags": "java, hashmap, leetcode, leetcode150", "date": "2023-08-01 20:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a pattern and a string s, find if s follows the same pattern.Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.leetcodeSOLUTIONThis problem is similar to Isomorphic Stringsclass Solution { public bo..." }, { "title": "Isomorphic Strings", "url": "/posts/isomorphic-strings/", "categories": "hashmap", "tags": "java, hashmap, leetcode, leetcode150, important", "date": "2023-08-01 20:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings s and t, determine if they are isomorphic.Two strings s and t are isomorphic if the characters in s can be replaced to get t.All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may ..." }, { "title": "Substring with Concatenation of All Words", "url": "/posts/substring-with-concatenation-of-all-words/", "categories": "arrays", "tags": "java, sliding_window, arrays, leetcode, leetcode150, important", "date": "2023-07-31 21:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a string s and an array of strings words. All the strings of words are of the same length.A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.For example, if words = [“ab”,”cd”,”ef”], then “abcdef”, “..." }, { "title": "Minimum Size Subarray Sum", "url": "/posts/minimum-size-subarray-sum/", "categories": "arrays", "tags": "java, sliding_window, arrays, leetcode, leetcode150, important", "date": "2023-07-29 17:19:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.leetcodeSOLUTIONUSING PREFIX SUM (TLE)Using two for-loops,calculate the s..." }, { "title": "Insert Delete GetRandom O(1)", "url": "/posts/insert-delete-getrandom-o-1/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150", "date": "2023-07-29 02:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONImplement the RandomizedSet class: RandomizedSet() Initializes the RandomizedSet object. bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise. bool remove(int val) Removes an item val from the set if ..." }, { "title": "ZigZag Conversion", "url": "/posts/zigzag-conversion/", "categories": "arrays", "tags": "java, arrays, neetcode, leetcode, leetcode150, important", "date": "2023-07-28 00:18:00 +0530", "snippet": "PROBLEM DESCRIPTIONThe string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)P A H NA P L S I I GY I RAnd then read line by line: “PAHNAPLSIIGYIR”Write the code that will ta..." }, { "title": "Reverse Words in a String", "url": "/posts/reverse-words-in-a-string/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150", "date": "2023-07-27 20:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an input string s, reverse the order of the words.A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.Return a string of the words in reverse order concatenated by a single space.Note that s may contain leading o..." }, { "title": "Length of Last Word", "url": "/posts/length-of-last-word/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150", "date": "2023-07-25 14:49:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s consisting of words and spaces, return the length of the last word in the string.A word is a maximal substring consisting of non-space characters only.leetcodeSOLUTIONTWO LOOPSThis is an easy question specially if you use inbuilt function to trim/split the stri..." }, { "title": "Integer to Roman", "url": "/posts/integer-to-roman/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150", "date": "2023-07-25 14:34:00 +0530", "snippet": "PROBLEM DESCRIPTIONRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.Symbol ValueI 1V 5X 10L 50C 100D 500M 1000For example, 2 is written as II in Roman numeral, just two one’s..." }, { "title": "Roman to Integer", "url": "/posts/roman-to-integer/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150", "date": "2023-07-24 12:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a roman numeral, convert it to an integer.leetcodeSOLUTIONAPPROACH 1If there are two characters left in the string s AND the integer value of first roman character is lesser than the second character: - Add (value of char 2 - value of char 1) to the totalElse: - Add..." }, { "title": "H-Index", "url": "/posts/h-index/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150, important", "date": "2023-07-21 23:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher’s h-index.According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the give..." }, { "title": "Best Time to Buy and Sell Stock II", "url": "/posts/best-time-to-buy-and-sell-stock-ii/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150, important", "date": "2023-07-19 22:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer array prices where prices[i] is the price of a given stock on the ith day.On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the sam..." }, { "title": "Design Patterns: Index", "url": "/posts/design-patterns-index/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-17 22:27:00 +0530", "snippet": "DESIGN PATTERNSCreational Design Patterns:diamond_shape_with_a_dot_inside: Singleton: A pattern that ensures a class has only one instance.:building_construction: Builder: A pattern to construct complex objects step by step.:clipboard: Prototype: A pattern to create new objects by cloning existin..." }, { "title": "Design Pattern: Observer", "url": "/posts/design-pattern-observer/", "categories": "design_patterns", "tags": "java, behavioral_design_patterns, design_patterns", "date": "2023-07-17 22:04:00 +0530", "snippet": "OBSERVERThe Observer design pattern is a behavioral design pattern that establishes a one-to-many dependency between objects, so that when one object changes its state, all the dependent objects are automatically notified and updated. This is similar to a pub/sub model. The Subject is the one whi..." }, { "title": "Remove Duplicates from Sorted Array II", "url": "/posts/remove-duplicates-from-sorted-array-ii/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150, important", "date": "2023-07-17 20:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.Since it is impossible to change the length of the array in some languages..." }, { "title": "Design Pattern: Strategy", "url": "/posts/design-pattern-strategy/", "categories": "design_patterns", "tags": "java, design_patterns, behavioral_design_patterns", "date": "2023-07-16 22:52:00 +0530", "snippet": "STRATEGYThe Strategy design is a behavioral design pattern that allows us to define different strategies (or ways) to solve a problem and switch between them easily. It helps us encapsulate each strategy into its own class and use them interchangeably. This way, we can change the strategy at runt..." }, { "title": "Merge Sorted Array", "url": "/posts/merge-sorted-array/", "categories": "arrays", "tags": "java, arrays, leetcode, leetcode150, important", "date": "2023-07-16 21:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.Merge nums1 and nums2 into a single array sorted in non-decreasing order.The final sorted array should..." }, { "title": "Design Pattern: Flyweight", "url": "/posts/design-pattern-flyweight/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-16 18:39:00 +0530", "snippet": "FLYWEIGHTThe Flyweight pattern is a design pattern that helps optimize memory usage by sharing common data between multiple objects. It is particularly useful when dealing with objects that have both intrinsic (shared) and extrinsic (unique) attributes.In this example, let’s consider the Ball cla..." }, { "title": "Design Pattern: Facade", "url": "/posts/design-pattern-facade/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-16 13:47:00 +0530", "snippet": "FACADEThe Facade design pattern is a structural design pattern that provides a simplified interface to a complex system, making it easier to use. It encapsulates the complexity of the system behind a single class, known as the facade, that exposes a simple and unified interface to the client.Let’..." }, { "title": "Design Pattern: Decorator", "url": "/posts/design-pattern-decorator/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-16 01:27:00 +0530", "snippet": "DECORATORDecorator design pattern is a structural design pattern that allows us to add extra features or behaviors to an object without changing its original structure.In this example, we have a Pizza class which represents the core functionality of a pizza. It has a getDescription() method that ..." }, { "title": "Design Pattern: Adapter", "url": "/posts/design-pattern-adapter/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-16 00:46:00 +0530", "snippet": "ADAPTERThe Adapter design pattern is a structural design pattern that allows objects with incompatible interfaces to work together. It acts as a bridge between two incompatible interfaces, converting the interface of one class into another interface that clients expect. This pattern is useful whe..." }, { "title": "Java Multithreading - Interrupting Threads", "url": "/posts/java-multithreading-interrupting-threads/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-15 21:57:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingUNDERSTANDING INTERRUPT USING CODEThe main thread pauses for 500 milliseconds (0.5 seconds) using Thread.sleep(500). This allows the t1 thread to run for a short time before the main thread interrupts it. After the pause, the mai..." }, { "title": "Java Multithreading - Callable and Future", "url": "/posts/java-multithreading-callable-and-future/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-15 21:32:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingCALLABLE AND FUTURECallable is an interface that represents a task or computation that can be executed in a separate thread. It is similar to the Runnable interface, but with a key difference: a Callable can return a result and t..." }, { "title": "Java Multithreading - Semaphores", "url": "/posts/java-multithreading-semaphores/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-15 19:36:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingSEMAPHORES A counting semaphore. Conceptually, a semaphore maintains a set of permits. Each acquire() blocks if necessary until a permit is available, and then takes it. Each release() adds a permit, potentially releasing a bloc..." }, { "title": "Java Multithreading - Deadlock", "url": "/posts/java-multithreading-deadlock/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-14 00:19:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingDEADLOCK Process 1 Process 2+-----------------+ +-----------------+| Resource A | | Resource B |+-----------------+ +-----------------+| Request B | | Request A || (waiting) | | (wa..." }, { "title": "Design Pattern: Factory", "url": "/posts/design-pattern-factory/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-13 22:24:00 +0530", "snippet": "FACTORYThis pattern involves creating two key components: a “product” and a “factory.”In this example, the “product” is the Database interface. It defines the common methods that all types of databases should have, such as connect() and disconnect(). It also includes an additional method, createD..." }, { "title": "Java Multithreading - Re-entrant Locks", "url": "/posts/java-multithreading-re-entrant-locks/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-13 20:22:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingUSING REENTRANT LOCK: THE WRONG WAYApp.javaWe create two threads which will run the firstThread() and secondThread() methods of the Runner class. They will call the increment method to increase the value of count 1000 times. So, ..." }, { "title": "Java Multithreading - Producer/Consumer (Using Low-Level Synchronization)", "url": "/posts/java-multithreading-producer-consumer-using-low-level-synchronization/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-12 23:42:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingIn the updated version of the application, the main app remains unchanged. It creates two threads: one for the producer and another for the consumer. However, instead of using a high-level data structure like a BlockingQueue, we ..." }, { "title": "Java Multithreading - Wait and Notify", "url": "/posts/java-multithreading-wait-and-notify/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-12 21:03:00 +0530", "snippet": "This following post is based on the Udemy Course:Java Multithreadingwait()The wait() method is a part of java.lang.Object class. When wait() method is called, the calling thread stops its execution until notify() or notifyAll() method is invoked by some other Thread. The wait() method has 3 varia..." }, { "title": "Java Multithreading - Producer/Consumer", "url": "/posts/java-multithreading-producer-consumer/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-11 22:49:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingBlocking Queue (thread-safe queue implementation)A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when stori..." }, { "title": "Design Pattern: Prototype", "url": "/posts/design-pattern-prototype/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-10 21:24:00 +0530", "snippet": "PROTOTYPEIDEAImagine a situation where creating an object is a costly task. This can happen when we need certain information from a database or external service before we can create the object. If we have to create this object multiple times in our application, it can slow down the overall perfor..." }, { "title": "Java Multithreading - Countdown Latches", "url": "/posts/java-multithreading-countdown-latches/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-10 20:59:00 +0530", "snippet": "This following post is based on the Udemy Course:Java Multithreading A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.A CountDownLatch is initialized with a given count.The await methods block until the current cou..." }, { "title": "Design Pattern: Builder", "url": "/posts/design-pattern-builder/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-06 22:18:00 +0530", "snippet": "BUILDERThought Process: We need to create an object of a class which has numerous attributes and they need some kind of validation before we create the object Although we can directly use a constructor for this, the code will not be very readable or maintainable We could potentially use multip..." }, { "title": "Java Multithreading - Thread Pools", "url": "/posts/java-multithreading-thread-pools/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-06 21:19:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingWe will use the ExecutorService class to create a thread pool. Think of it as have multiple threads which will act as workers in a factory. We will submit/assign them certain tasks and they are supposed to complete them. If the t..." }, { "title": "Design Pattern: Singleton", "url": "/posts/design-pattern-singleton/", "categories": "design_patterns", "tags": "java, design_patterns", "date": "2023-07-05 23:17:00 +0530", "snippet": "SINGLETONThe objective is to ensure that a single object of a particular class can exist for an app.Thought Process: We will have to make the constructor of that class private so that other classes cannot create objects using it. We will need to use a method in that class itself to return an ob..." }, { "title": "Java Multithreading - Multiple Locks; Using Synchronized Code Blocks", "url": "/posts/java-multithreading-multiple-locks-using-synchronized-code-blocks/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-05 20:56:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingBasic App without threadspackage demo;public class App { public static void main(String[] args) { //create a new Worker object and call its main method new Worker().main(); }}package demo;import java.util.ArrayList;import j..." }, { "title": "Java Multithreading - The Synchronized Keyword", "url": "/posts/java-multithreading-the-synchronized-keyword/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-04 20:35:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingIn the following code, the result of sysout(count) will be 0. This is because, even though we have started the two threads t1 and t2, we are printing the value of “count” before these threads can update the count variable.package..." }, { "title": "Java Multithreading - Basic Thread Synchronization", "url": "/posts/java-multithreading-basic-thread-synchronization/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-03 20:39:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingWhen data is shared between multiple threads, a common issue arises with data caching. In the following example, there is a thread called “Processor” that contains a boolean variable named “running,” initially set to true. The ma..." }, { "title": "Java Multithreading - Starting Java Threads", "url": "/posts/java-multithreading-starting-java-threads/", "categories": "multithreading", "tags": "java, multithreading, theory", "date": "2023-07-02 23:51:00 +0530", "snippet": "This following post is based on the Udemy Course:Java MultithreadingWe can create threads either by extending the Thread class or by implementing the Runnable interface. Here is an example of how it would look like.Extending Thread Classpackage com.learn;class Runner extends Thread{ public void r..." }, { "title": "Delete one", "url": "/posts/delete-one/", "categories": "gcd", "tags": "java, modulo, gcd, geeksforgeeks", "date": "2023-05-07 16:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N. You have to delete one element such that the GCD(Greatest common divisor) of the remaining array is maximum.Find the maximum value of GCD.geeksforgeeksSOLUTIONGCD Theorypublic class Solution { public int solve(int[] A) { int n =..." }, { "title": "Find Greatest Common Divisor of Array", "url": "/posts/find-greatest-common-divisor-of-array/", "categories": "gcd", "tags": "java, modulo, gcd, leetcode", "date": "2023-05-07 16:29:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.leetcodeSOLUTIONGCD Theoryclass Solution { public..." }, { "title": "GCD and Inverse Modulo (Theory)", "url": "/posts/gcd-and-inverse-modulo-theory/", "categories": "gcd", "tags": "java, modulo, gcd, theory", "date": "2023-05-07 13:20:00 +0530", "snippet": "Inverse ModuloGCD" }, { "title": "Count pairs in array divisible by K", "url": "/posts/count-pairs-in-array-divisible-by-k/", "categories": "modulo", "tags": "java, modulo, geeksforgeeks, important", "date": "2023-05-06 23:42:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a number N. Find the total number of setbits in the numbers from 1 to N.geeksforgeeksSOLUTIONclass Solution{ public static long countKdivPairs(int nums[], int n, int k) { //to store the count of numbers for remainder [0,k-1] Map&amp;lt;Long, Lo..." }, { "title": "Count Total Set Bits Till N", "url": "/posts/count-total-set-bits-till-n/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, geeksforgeeks, important", "date": "2023-05-06 20:52:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a number N. Find the total number of setbits in the numbers from 1 to N.geeksforgeeksSOLUTIONclass Solution{ static int countBits(int A){ //base case if(A == 0) return 0; //highest power of 2, which is less than or equal to A long x ..." }, { "title": "Minimum Swaps required to group all 1s together", "url": "/posts/minimum-swaps-required-to-group-all-1s-together/", "categories": "arrays", "tags": "java, arrays, geeksforgeeks", "date": "2023-05-05 23:59:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of 0s and 1s, we need to write a program to find the minimum number of swaps required to group all 1s present in the array together.geeksforgeeksSOLUTIONclass Complete { public static int minSwaps(int arr[], int n) { //window size will be equal ..." }, { "title": "All Sub-Matrices Sum", "url": "/posts/all-sub-matrices-sum/", "categories": "arrays", "tags": "java, arrays, geeksforgeeks, matrix", "date": "2023-05-05 22:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a NxM 2-D matrix, the task to find the sum of all the submatrices.geeksforgeeksSOLUTIONimport java.io.*;class GFG { public static int matrixSum(int[][] matrix){ int n = matrix.length; int m = matrix[0].length; int totalSum = 0; for(int i=0; ..." }, { "title": "Find All Good Indices", "url": "/posts/find-all-good-indices/", "categories": "arrays", "tags": "java, arrays, leetcode", "date": "2023-05-04 23:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a 0-indexed integer array nums of size n and a positive integer k.We call an index i in the range k &amp;lt;= i &amp;lt; n - k good if the following conditions are satisfied: The k elements that are just before the index i are in non-increasing order. The k elem..." }, { "title": "First Missing Positive", "url": "/posts/first-missing-positive/", "categories": "arrays", "tags": "java, arrays, leetcode", "date": "2023-05-02 23:33:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an unsorted integer array nums, return the smallest missing positive integer.You must implement an algorithm that runs in O(n) time and uses constant extra space.leetcodeSOLUTIONclass Solution { public int firstMissingPositive(int[] nums) { int n = nums.length; ..." }, { "title": "Gray Code", "url": "/posts/gray-code/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, leetcode, important", "date": "2023-04-30 18:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONAn n-bit gray code sequence is a sequence of 2n integers where: Every integer is in the inclusive range [0, 2n - 1], The first integer is 0, An integer appears no more than once in the sequence, The binary representation of every pair of adjacent integers differs by exactly..." }, { "title": "Sum of Bitwise-OR of all Sub-Arrays", "url": "/posts/sum-of-bitwise-or-of-all-sub-arrays/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, geeksforgeeks, important", "date": "2023-04-30 14:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an array of integers A of size N.The value of a subarray is defined as BITWISE OR of all elements in it.Return the sum of value of all subarrays of A % 109 + 7.geeksforgeeksSOLUTIONpublic class Solution { long M = 1000000007; public int solve(int[] A) { ..." }, { "title": "Diffk II", "url": "/posts/diffk-ii/", "categories": "hashmap", "tags": "java, hashmap, interviewbit", "date": "2023-04-29 16:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A of integers and another non negative integer B .Find if there exists 2 indices i and j such that A[i] - A[j] = B and i != j.interviewbitSOLUTIONpublic class Solution { public int diffPossible(final int[] A, int B) { int n = A.length; Set&am..." }, { "title": "Largest Continuous Sequence Zero Sum", "url": "/posts/largest-continuous-sequence-zero-sum/", "categories": "hashmap", "tags": "java, hashmap, interviewbit, important", "date": "2023-04-29 12:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A of N integers.Find the largest continuous sequence in a array which sums to zero.interviewbitSOLUTIONRelated Post: Sub-Array with 0 Sumpublic class Solution { public int[] lszero(int[] A) { int n = A.length; int[] pf = new int[n]; pf..." }, { "title": "First Repeating element", "url": "/posts/first-repeating-element/", "categories": "hashmap", "tags": "java, arrays, hashmap, interviewbit", "date": "2023-04-29 10:15:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N, find the first repeating element in it.We need to find the element that occurs more than once and whose index of first occurrence is smallest.If there is no repeating element, return -1.SOLUTIONpublic class Solution { public int solve(int[..." }, { "title": "tolower()", "url": "/posts/tolower/", "categories": "arrays", "tags": "java, arrays, strings", "date": "2023-04-28 23:23:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a function to_lower() which takes a character array A as an argument.Convert each character of A into lowercase characters if it exists. If the lowercase of a character does not exist, it remains unmodified.The uppercase letters from A to Z are converted to lowerc..." }, { "title": "Josephus Problem", "url": "/posts/josephus-problem/", "categories": "arrays", "tags": "java, arrays, geeksforgeeks", "date": "2023-04-26 23:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the total number of persons n and a number k which indicates that k-1 persons are skipped and kth person is killed in circle in a fixed direction.After each operation, the count will start from k+1th person. The task is to choose the safe place in the circle so that when ..." }, { "title": "Majority Element", "url": "/posts/majority-element/", "categories": "arrays", "tags": "java, arrays, leetcode, important", "date": "2023-04-25 23:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array nums of size n, return the majority element.The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.leetcodeSOLUTIONBoyer-Moore Majority Voting AlgorithmThe basic idea is that i..." }, { "title": "Help From Sam", "url": "/posts/help-from-sam/", "categories": "bit_manipulation", "tags": "java, bit_manipulation", "date": "2023-04-25 22:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONAlex and Sam are good friends. Alex is doing a lot of programming these days. He has set a target score of A for himself.Initially, Alex’s score was zero. Alex can double his score by doing a question, or Alex can seek help from Sam for doing questions that will contribute 1 to..." }, { "title": "Length of longest consecutive ones", "url": "/posts/length-of-longest-consecutive-ones/", "categories": "arrays", "tags": "java, arrays", "date": "2023-04-23 17:34:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved.SOLUTIONpublic class Solution { public int solve(String s) { int n = s.length(); //convert stri..." }, { "title": "Transpose of a Matrix", "url": "/posts/transpose-of-a-matrix/", "categories": "arrays", "tags": "java, arrays, matrix", "date": "2023-04-23 14:52:00 +0530", "snippet": "PROBLEM DESCRIPTIONWrite a program to find the transpose of a square matrix of size N*N. Transpose of a matrix is obtained by changing rows to columns and columns to rows.geeksforgeeksSOLUTIONThe main observation is that, if we can every element A[i][j] with A[j][i], we get the transpose of the m..." }, { "title": "Even Subarrays", "url": "/posts/even-subarrays/", "categories": "arrays", "tags": "java, arrays", "date": "2023-04-22 22:24:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer array A.Decide whether it is possible to divide the array into one or more subarrays of even length such that the first and last element of all subarrays will be even.Return “YES” if it is possible; otherwise, return “NO” (without quotes).SOLUTIONpublic..." }, { "title": "Closest MinMax", "url": "/posts/closest-minmax/", "categories": "arrays", "tags": "java, arrays, interviewbit", "date": "2023-04-22 14:19:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array A of size N. The task is to find the length of smallest subarray which contains both maximum and minimum values.geeksforgeeksSOLUTIONAPPROACH 1First we get the min and max values. Then, iterate through the array from left to right. If we get min, look for the nea..." }, { "title": "Pick from both sides!", "url": "/posts/pick-from-both-sides/", "categories": "arrays", "tags": "java, arrays, interviewbit", "date": "2023-04-21 21:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N.You have to pick exactly B elements from either left or right end of the array A to get the maximum sum.Find and return this maximum possible sum.NOTE: Suppose B = 4 and array A contains 10 elements then You can pick the first four elements..." }, { "title": "Balance Array (Special Index)", "url": "/posts/balance-array-special-index/", "categories": "arrays", "tags": "java, arrays, important, interviewbit", "date": "2023-04-21 21:03:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array A of size N. You need to count the number of special elements in the given array.A element is special if removal of that element make the array balanced.Array will be balanced if sum of even index element equal to sum of odd index element.interviewbitSOLU..." }, { "title": "Serialize and Deserialize Binary Tree", "url": "/posts/serialize-and-deserialize-binary-tree/", "categories": "neetcode150", "tags": "java, binarytree, neetcode150, important", "date": "2023-03-16 19:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONSerialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.Design an alg..." }, { "title": "Sliding Window Maximum", "url": "/posts/sliding-window-maximum/", "categories": "neetcode150", "tags": "java, leetcode, sliding_window, neetcode150, important", "date": "2023-03-09 21:41:00 +0530", "snippet": "Problem DescriptionYou are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.Return the max sliding window.l..." }, { "title": "Minimum Window Substring", "url": "/posts/minimum-window-substring/", "categories": "neetcode150", "tags": "java, leetcode, sliding_window, neetcode150", "date": "2023-03-08 23:55:00 +0530", "snippet": "Problem DescriptionGiven two strings s and t of lengths m and n respectively, return the minimum windowsubstringof s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string “”.The testcases will be generated such that..." }, { "title": "LRU Cache", "url": "/posts/lru-cache/", "categories": "neetcode150", "tags": "java, leetcode, linkedlist, neetcode150", "date": "2023-03-07 22:05:00 +0530", "snippet": "Problem DescriptionDesign a data structure that follows the constraints of a Least Recently Used (LRU) cache.Implement the LRUCache class: LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise retur..." }, { "title": "Alien Dictionary", "url": "/posts/alien-dictionary/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150, important", "date": "2023-03-05 21:30:00 +0530", "snippet": "Problem DescriptionThere is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.You are given a list of strings words from the alien language’s dictionary, where the strings in words aresorted lexicographicallyby the rules of this new langua..." }, { "title": "Swim in Rising Water", "url": "/posts/swim-in-rising-water/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2023-03-05 15:20:00 +0530", "snippet": "Problem DescriptionYou are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if ..." }, { "title": "Reconstruct Itinerary", "url": "/posts/reconstruct-itinerary/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150, important", "date": "2023-03-05 14:26:00 +0530", "snippet": "Problem DescriptionYou are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.All of the tickets belong to a man who departs from “JFK”, thus, the itinerary must begin wit..." }, { "title": "Cheapest Flights Within K Stops", "url": "/posts/cheapest-flights-within-k-stops/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150, important", "date": "2023-03-04 20:00:00 +0530", "snippet": "Problem DescriptionThere are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.You are also given three integers src, dst, and k, return the cheapest pr..." }, { "title": "Network Delay Time", "url": "/posts/network-delay-time/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2023-03-04 14:21:00 +0530", "snippet": "Problem DescriptionYou are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.We w..." }, { "title": "Min Cost to Connect All Points", "url": "/posts/min-cost-to-connect-all-points/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2023-03-03 23:58:00 +0530", "snippet": "Problem DescriptionYou are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi]. The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: xi - xj + yi - yj , where ..." }, { "title": "Word Ladder", "url": "/posts/word-ladder/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2023-03-02 21:57:00 +0530", "snippet": "Problem DescriptionA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&amp;gt; s1 -&amp;gt; s2 -&amp;gt; … -&amp;gt; sk such that: Every adjacent pair of words differs by a single letter. Every si for 1 &amp;lt;= i &amp;lt..." }, { "title": "Walls and Gates", "url": "/posts/walls-and-gates/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2023-02-28 21:53:00 +0530", "snippet": "Problem DescriptionYou are given an m x n grid rooms initialized with these three possible values. -1 A wall or an obstacle. 0 A gate. INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647...." }, { "title": "Pacific Atlantic Water Flow", "url": "/posts/pacific-atlantic-water-flow/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2023-02-27 20:36:00 +0530", "snippet": "Problem DescriptionThere is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island’s left and top edges, and the Atlantic Ocean touches the island’s right and bottom edges.The island is partitioned into a grid of square cells. You ..." }, { "title": "Distance from the Source (Bellman-Ford Algorithm)", "url": "/posts/distance-from-the-source-bellman-ford-algorithm/", "categories": "graphs", "tags": "java, geeksforgeeks, graphs, important", "date": "2023-02-26 18:40:00 +0530", "snippet": "Problem DescriptionGiven a weighted, directed and connected graph of V vertices and E edges, Find the shortest distance of all the vertex’s from the source vertex S.Note: If the Graph contains a negative cycle then return an array consisting of only -1.Your task is to complete the function bellma..." }, { "title": "Floyd Warshall", "url": "/posts/floyd-warshall/", "categories": "graphs", "tags": "java, geeksforgeeks, graphs, important", "date": "2023-02-26 17:44:00 +0530", "snippet": "Problem DescriptionThe problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. The graph is represented as an adjacency matrix of size n*n. Matrix[i][j] denotes the weight of the edge from i to j. If Matrix[i][j]=-1, it means there is no e..." }, { "title": "Minimal Spanning Tree", "url": "/posts/minimal-spanning-tree/", "categories": "graphs", "tags": "java, geeksforgeeks, graphs, important", "date": "2023-02-25 22:05:00 +0530", "snippet": "Problem DescriptionGiven a weighted, undirected and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.geeksforgeeksSolutionHere we have used Kruskal’s algorithm.class Solution{ static int spanningTree(int V, int E, int ..." }, { "title": "Dijkstra Algorithm", "url": "/posts/dijkstra-algorithm/", "categories": "graphs", "tags": "java, geeksforgeeks, graphs, important", "date": "2023-02-23 23:20:00 +0530", "snippet": "Problem DescriptionGiven a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that edg..." }, { "title": "Number of Provinces", "url": "/posts/number-of-provinces/", "categories": "neetcode150", "tags": "java, geeksforgeeks, graphs, neetcode150", "date": "2023-02-22 23:26:00 +0530", "snippet": "Problem DescriptionGiven an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.Note: A province is a group of directly or indirectly connected cities and no other cities o..." }, { "title": "Graphs 101 - Part 2", "url": "/posts/graphs-101-part-2/", "categories": "graphs", "tags": "java, graphs, theory", "date": "2023-02-21 23:55:00 +0530", "snippet": "Graphs 101: Part 1" }, { "title": "Graphs 101 - Part 1", "url": "/posts/graphs-101-part-1/", "categories": "graphs", "tags": "java, graphs, theory", "date": "2023-02-21 23:55:00 +0530", "snippet": "Graphs 101: Part 2" }, { "title": "Detect Squares", "url": "/posts/detect-squares/", "categories": "neetcode150", "tags": "java, neetcode150, mathematics", "date": "2023-02-20 20:28:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are given a stream of points on the X-Y plane. Design an algorithm that: Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points. Given a query point, counts ..." }, { "title": "Multiply Strings", "url": "/posts/multiply-strings/", "categories": "neetcode150", "tags": "java, neetcode150, mathematics", "date": "2023-02-19 21:41:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.l..." }, { "title": "Plus One", "url": "/posts/plus-one/", "categories": "neetcode150", "tags": "java, neetcode150, mathematics", "date": "2023-02-18 17:52:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer do..." }, { "title": "Happy Number", "url": "/posts/happy-number/", "categories": "neetcode150", "tags": "java, neetcode150, mathematics", "date": "2023-02-18 17:25:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionWrite an algorithm to determine if a number n is happy.A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process u..." }, { "title": "Set Matrix Zeroes (InterviewBit)", "url": "/posts/set-matrix-zeroes/", "categories": "neetcode150", "tags": "java, neetcode150, interviewbit, mathematics, geometry, important", "date": "2023-02-12 23:53:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0’s.You must do it in place.leetcodeSolutionAPPROACH 1Space Complexity: O(n+m)class Solution { public void setZeroes(int[][] matrix) { ..." }, { "title": "Spiral Matrix", "url": "/posts/spiral-matrix/", "categories": "neetcode150", "tags": "java, neetcode150, mathematics, geometry, important", "date": "2023-02-12 20:25:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an m x n matrix, return all elements of the matrix in spiral order.leetcodeSolutionSpiral Traversalclass Solution { public List&amp;lt;Integer&amp;gt; spiralOrder(int[][] matrix) { int n = matrix.length; int m =..." }, { "title": "Rotate Image", "url": "/posts/rotate-image/", "categories": "neetcode150", "tags": "java, neetcode150, mathematics, geometry, important", "date": "2023-02-12 16:34:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix a..." }, { "title": "Reverse Integer", "url": "/posts/reverse-integer/", "categories": "neetcode150", "tags": "java, neetcode150, bit_manipulation, important", "date": "2023-02-11 20:05:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.Assume the environment does not allow you to store 64-bit..." }, { "title": "Sum of Two Integers (Bit Manipulation)", "url": "/posts/sum-of-two-integers-bit-manipulation/", "categories": "neetcode150", "tags": "java, neetcode150, bit_manipulation, important", "date": "2023-02-11 16:24:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven two integers a and b, return the sum of the two integers without using the operators + and -.leetcodeSolutionNeetCode YouTubeclass Solution { public int getSum(int a, int b) { while(b != 0){ int temp = a..." }, { "title": "Minimum Interval to Include Each Query", "url": "/posts/minimum-interval-to-include-each-query/", "categories": "neetcode150", "tags": "java, leetcode, intervals, neetcode150, important", "date": "2023-02-09 22:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.leetcodeSOLUTIONBRUTE FORCE (TLE)class Solution { public int[] minInterval(int[][] intervals, int[] queries) { in..." }, { "title": "Meeting Rooms II", "url": "/posts/meeting-rooms-ii/", "categories": "neetcode150", "tags": "java, leetcode, intervals, neetcode150, important", "date": "2023-02-08 23:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.leetcodeSOLUTIONAPPROACH 1class Solution { public int minMeetingRooms(int[][] intervals) { //sort by start time of the me..." }, { "title": "Meeting Rooms", "url": "/posts/meeting-rooms/", "categories": "neetcode150", "tags": "java, leetcode, intervals, neetcode150", "date": "2023-02-08 00:00:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of meeting time intervals where intervals[i] = [starti, endi], determine if a person could attend all meetings.leetcodeSOLUTIONclass Solution { public boolean canAttendMeetings(int[][] intervals) { //no meeting if(intervals.length == 0) return tr..." }, { "title": "Non-overlapping Intervals", "url": "/posts/non-overlapping-intervals/", "categories": "neetcode150", "tags": "java, leetcode, intervals, greedy, neetcode150, important", "date": "2023-02-07 23:40:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.leetcodeSOLUTIONNeetCode YouTubeThis problem is actually quick tricky. We need to use a greedy ..." }, { "title": "Insert Interval", "url": "/posts/insert-interval/", "categories": "neetcode150", "tags": "java, leetcode, intervals, neetcode150, important", "date": "2023-02-07 21:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents ..." }, { "title": "Merge Intervals", "url": "/posts/merge-intervals/", "categories": "neetcode150", "tags": "java, leetcode, intervals, neetcode150", "date": "2023-02-07 21:01:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.leetcodeSOLUTIONclass Solution { public int[][] merge(int[][] intervals) { ..." }, { "title": "Valid Parenthesis String", "url": "/posts/valid-parenthesis-string/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150, important", "date": "2023-01-30 21:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s containing only three types of characters: ‘(‘, ‘)’ and ‘*’, return true if s is valid.The following rules define a valid string: Any left parenthesis ‘(‘ must have a corresponding right parenthesis ‘)’. Any right parenthesis ‘)’ must have a corresponding lef..." }, { "title": "Partition Labels", "url": "/posts/partition-labels/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150", "date": "2023-01-29 17:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.Return a list of integer..." }, { "title": "Merge Triplets to Form Target Triplet", "url": "/posts/merge-triplets-to-form-target-triplet/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150", "date": "2023-01-29 13:55:00 +0530", "snippet": "PROBLEM DESCRIPTIONA triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.To obtain target, you may apply t..." }, { "title": "Hand of Straights", "url": "/posts/hand-of-straights/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150", "date": "2023-01-29 12:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONAlice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return t..." }, { "title": "Gas Station", "url": "/posts/gas-station/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150, important", "date": "2023-01-29 00:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONThere are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at ..." }, { "title": "Jump Game II", "url": "/posts/jump-game-ii/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150", "date": "2023-01-26 23:51:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where: 0 &amp;lt;= ..." }, { "title": "Jump Game", "url": "/posts/jump-game/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150", "date": "2023-01-25 23:55:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer array nums. You are initially positioned at the array’s first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.leetcodeSOLUTIONclass Solution { ..." }, { "title": "Maximum Subarray", "url": "/posts/maximum-subarray/", "categories": "neetcode150", "tags": "java, leetcode, greedy, neetcode150", "date": "2023-01-25 23:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an integer array nums, find the subarray with the largest sum, and return its sum.leetcodeSOLUTIONclass Solution { public int maxSubArray(int[] nums) { int maxSum = nums[0]; int currentSum = nums[0]; for(int i=1; i&amp;lt;nums.length; i++){ ..." }, { "title": "Burst Balloons", "url": "/posts/burst-balloons/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2023-01-22 21:34:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.If you burst the ith balloon, you will get nums[i - 1] nums[i] nums[i + 1] coins. If i - 1 or i + 1 goes out of b..." }, { "title": "Regular Expression Matching", "url": "/posts/regular-expression-matching/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2023-01-22 20:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an input string s and a pattern p, implement regular expression matching with support for ‘.’ and ‘*’ where: ’.’ Matches any single character.​​​​ ‘*’ Matches zero or more of the preceding element.The matching should cover the entire input string (not partial).leetcodeS..." }, { "title": "Distinct Subsequences", "url": "/posts/distinct-subsequences/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2023-01-22 17:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two strings s and t, return the number of distinctsubsequences of s which equals t.leetcodeSOLUTIONclass Solution { public int numDistinct(String s, String t) { return distinctSequenceHelper(s, t, 0, 0, new HashMap&amp;lt;String, Integer&amp;gt;()); } publ..." }, { "title": "Longest Increasing Path in a Matrix", "url": "/posts/longest-increasing-path-in-a-matrix/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2023-01-22 01:46:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an m x n integers matrix, return the length of the longest increasing path in matrix.From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).leetcodeSOLUT..." }, { "title": "Interleaving String", "url": "/posts/interleaving-string/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2023-01-22 01:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.An interleaving of two strings s and t is a configuration where s and t are divided into n and msubstringsrespectively, such that: s = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n -..." }, { "title": "Target Sum", "url": "/posts/target-sum/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2023-01-20 23:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer array nums and an integer target.You want to build an expression out of nums by adding one of the symbols ‘+’ and ‘-‘ before each integer in nums and then concatenate all the integers. For example, if nums = [2, 1], you can add a ‘+’ before 2 and a ‘-‘..." }, { "title": "Coin Change II", "url": "/posts/coin-change-ii/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2023-01-19 23:13:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, r..." }, { "title": "Best Time to Buy and Sell Stock with Cooldown", "url": "/posts/best-time-to-buy-and-sell-stock-with-cooldown/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150, important", "date": "2023-01-18 23:28:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given an array prices where prices[i] is the price of a given stock on the ith day.Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: ..." }, { "title": "Word Break", "url": "/posts/word-break/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150, important", "date": "2023-01-16 20:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.Note that the same word in the dictionary may be reused multiple times in the segmentation.leetcodeSOLUTIONBRUTE-FORCE (RECUR..." }, { "title": "Palindrome Partitioning", "url": "/posts/palindrome-partitioning/", "categories": "neetcode150", "tags": "java, recursion, backtracking, neetcode150", "date": "2023-01-07 11:15:00 +0530", "snippet": "Problem DescriptionGiven a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.leetcodeSolutionStart forming substrings starting from index 0 to say index i. If that is a palindome, then recursively check for substring..." }, { "title": "Letter Combinations of a Phone Number", "url": "/posts/letter-combinations-of-a-phone-number/", "categories": "neetcode150", "tags": "java, recursion, backtracking, neetcode150", "date": "2023-01-07 00:14:00 +0530", "snippet": "Problem DescriptionGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any lette..." }, { "title": "Word Search", "url": "/posts/word-search/", "categories": "neetcode150", "tags": "java, recursion, backtracking, neetcode150, important", "date": "2023-01-06 22:58:00 +0530", "snippet": "Problem DescriptionGiven an m x n grid of characters board and a string word, return true if word exists in the grid.The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more ..." }, { "title": "Binary Tree Paths", "url": "/posts/binary-tree-paths/", "categories": "backtracking", "tags": "java, binarytree, leetcode, backtracking", "date": "2023-01-06 16:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, return all root-to-leaf paths in any order.A leaf is a node with no children.LeetcodeSOLUTIONclass Solution { public List&amp;lt;String&amp;gt; binaryTreePaths(TreeNode root) { pathHelper(root, new ArrayList&amp;lt;String&amp;gt;()..." }, { "title": "Binary Tree Maximum Path Sum 2", "url": "/posts/binary-tree-maximum-path-sum-2/", "categories": "neetcode150", "tags": "java, binarytree, important, leetcode, neetcode150", "date": "2022-12-28 23:05:00 +0530", "snippet": "PROBLEM DESCRIPTIONA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.The path sum of a path is the sum of the ..." }, { "title": "Count Good Nodes in Binary Tree", "url": "/posts/count-good-nodes-in-binary-tree/", "categories": "neetcode150", "tags": "java, binarytree, leetcode, neetcode150", "date": "2022-12-28 18:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.Return the number of good nodes in the binary tree.LeetcodeSOLUTIONclass Solution { public int goodNodes(TreeNode root) { //ro..." }, { "title": "Subtree of Another Tree", "url": "/posts/subtree-of-another-tree/", "categories": "neetcode150", "tags": "java, binarytree, leetcode, neetcode150", "date": "2022-12-27 23:53:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node’s descendants. T..." }, { "title": "Balanced Binary Tree", "url": "/posts/balanced-binary-tree/", "categories": "neetcode150", "tags": "java, binarytree, leetcode, neetcode150", "date": "2022-12-27 23:47:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, determine if it is height-balanced. A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.LeetcodeSOLUTIONclass Solution { public boolean isBalanced(TreeNode root) { if(r..." }, { "title": "Same Tree", "url": "/posts/same-tree/", "categories": "neetcode150", "tags": "java, binarytree, leetcode, neetcode150", "date": "2022-12-24 01:49:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the roots of two binary trees p and q, write a function to check if they are the same or not.Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.LeetcodeSOLUTIONclass Solution { public boolean isSameTree(TreeNo..." }, { "title": "Find the Duplicate Number", "url": "/posts/find-the-duplicate-number/", "categories": "neetcode150", "tags": "java, leetcode, linkedlist, neetcode150", "date": "2022-12-20 18:47:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.There is only one repeated number in nums, return this repeated number.You must solve the problem without modifying the array nums and uses only constant extra space.le..." }, { "title": "Remove Duplicates from Sorted List", "url": "/posts/remove-duplicates-from-sorted-list/", "categories": "linkedlist", "tags": "java, leetcode, linkedlist", "date": "2022-12-19 22:50:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.leetcodeSOLUTIONclass Solution { public ListNode deleteDuplicates(ListNode head) { ListNode temp = head; //while list h..." }, { "title": "Rotate List", "url": "/posts/rotate-list/", "categories": "linkedlist", "tags": "java, leetcode, linkedlist", "date": "2022-12-19 22:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a linked list, rotate the list to the right by k places.leetcodeSOLUTIONAPPROACH 1class Solution { public ListNode rotateRight(ListNode head, int k) { //get size of linked list int size = getSize(head); //if size of list is 0, return he..." }, { "title": "Swap Nodes in Pairs", "url": "/posts/swap-nodes-in-pairs/", "categories": "linkedlist", "tags": "java, leetcode, linkedlist", "date": "2022-12-19 21:28:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list’s nodes (i.e., only nodes themselves may be changed.)leetcodeSOLUTIONAPPROACH 1class Solution { public ListNode swapPairs(ListNode head..." }, { "title": "Remove Nth Node From End of List", "url": "/posts/remove-nth-node-from-end-of-list/", "categories": "neetcode150", "tags": "java, leetcode, linkedlist, neetcode150", "date": "2022-12-19 17:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a linked list, remove the nth node from the end of the list and return its head.leetcodeSOLUTIONclass Solution { public int getListSize(ListNode node){ int size = 0; while(node!=null){ size++; node=node.next; } ..." }, { "title": "Reorder List", "url": "/posts/reorder-list/", "categories": "neetcode150", "tags": "java, leetcode, linkedlist, neetcode150", "date": "2022-12-14 23:11:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given the head of a singly linked-list. The list can be represented as: L0 → L1 → … → Ln - 1 → LnReorder the list to be on the following form: L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …You may not modify the values in the list’s nodes. Only nodes themselves may be change..." }, { "title": "Design Twitter", "url": "/posts/design-twitter/", "categories": "neetcode150", "tags": "java, heap, leetcode, neetcode150", "date": "2022-12-09 23:30:00 +0530", "snippet": "Problem DescriptionDesign a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user’s news feed.Implement the Twitter class: Twitter() Initializes your twitter object. void postTweet(int userId, int tweetI..." }, { "title": "Task Scheduler", "url": "/posts/task-scheduler/", "categories": "neetcode150", "tags": "java, miscelleneous, heap, leetcode, neetcode150", "date": "2022-12-08 21:19:00 +0530", "snippet": "Problem DescriptionGiven a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.Howeve..." }, { "title": "K Closest Points to Origin", "url": "/posts/k-closest-points-to-origin/", "categories": "neetcode150", "tags": "java, heap, leetcode, neetcode150", "date": "2022-12-06 23:46:00 +0530", "snippet": "Problem DescriptionGiven an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).You may return ..." }, { "title": "Median of Two Sorted Arrays", "url": "/posts/median-of-two-sorted-arrays/", "categories": "neetcode150", "tags": "java, binary_search, search, neetcode150, important", "date": "2022-12-06 23:08:00 +0530", "snippet": "Problem DescriptionGiven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.The overall run time complexity should be O(log (m+n)).leetcodeSolutionNeetCode Youtubeclass Solution { public double findMedianSortedArrays(int[] nums1, int[] nu..." }, { "title": "Min Cost Matrix Chain Multiplication", "url": "/posts/min-cost-matrix-chain-multiplication/", "categories": "dynamic_programming", "tags": "java, geeksforgeeks, dynamic_programming, matrix_chain_multiplication", "date": "2022-12-05 00:22:00 +0530", "snippet": "Problem DescriptionGiven a sequence of matrices, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.The dimensions of the matrices are given in an array arr[] of size N (such that N = number of matrices +..." }, { "title": "Matrix Chain Multiplication", "url": "/posts/matrix-chain-multiplication/", "categories": "dynamic_programming", "tags": "java, dynamic_programming, matrix_chain_multiplication, theory", "date": "2022-12-04 23:33:00 +0530", "snippet": "Introduction to Matrix Chain Multiplication" }, { "title": "Time Based Key-Value Store", "url": "/posts/time-based-key-value-store/", "categories": "neetcode150", "tags": "java, binary_search, search, neetcode150", "date": "2022-12-04 15:01:00 +0530", "snippet": "Problem DescriptionDesign a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key’s value at a certain timestamp.Implement the TimeMap class: TimeMap() Initializes the object of the data structure. void set(String key, ..." }, { "title": "Find Minimum in Rotated Sorted Array", "url": "/posts/find-minimum-in-rotated-sorted-array/", "categories": "neetcode150", "tags": "java, binary_search, search, neetcode150", "date": "2022-12-04 13:39:00 +0530", "snippet": "PROBLEM DESCRIPTIONSuppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become: [4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times.Given the sorted rotated array nums of uni..." }, { "title": "Largest Rectangle in Histogram", "url": "/posts/largest-rectangle-in-histogram/", "categories": "neetcode150", "tags": "java, stack, important, neetcode150", "date": "2022-12-03 15:45:00 +0530", "snippet": "Problem DescriptionGiven an array of integers heights representing the histogram’s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.leetcodeSolutionclass Solution { public int largestRectangleArea(int[] heights) { int n = heights..." }, { "title": "Car Fleet", "url": "/posts/car-fleet/", "categories": "neetcode150", "tags": "java, stack, important, neetcode150", "date": "2022-12-03 13:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONThere are n cars going to the same destination along a one-lane road. The destination is target miles away.You are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles p..." }, { "title": "Daily Temperatures", "url": "/posts/daily-temperatures/", "categories": "neetcode150", "tags": "java, stack, important, neetcode150", "date": "2022-12-03 00:57:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 ..." }, { "title": "Generate Parentheses", "url": "/posts/generate-parentheses/", "categories": "neetcode150", "tags": "java, recursion, stack, neetcode150, backtracking", "date": "2022-12-02 22:17:00 +0530", "snippet": "Problem DescriptionGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.leetcodeSolutionNeetCode Youtubeclass Solution { public List&amp;lt;String&amp;gt; generateParenthesis(int n) { generateParenthesisHelper(n, 0, 0, &quot;&quot;); ..." }, { "title": "Determine if Two Strings Are Close", "url": "/posts/determine-if-two-strings-are-close/", "categories": "hashmap", "tags": "java, leetcode, hashmap", "date": "2022-12-02 21:31:00 +0530", "snippet": "Problem DescriptionTwo strings are considered close if you can attain one from the other using the following operations: Operation 1: Swap any two existing characters. For example, abcde -&amp;gt; aecdb Operation 2: Transform every occurrence of one existing character into another existing..." }, { "title": "Evaluate Reverse Polish Notation", "url": "/posts/evaluate-reverse-polish-notation/", "categories": "neetcode150", "tags": "java, leetcode, neetcode150, stack", "date": "2022-12-01 22:32:00 +0530", "snippet": "Problem DescriptionEvaluate the value of an arithmetic expression in Reverse Polish Notation.Valid operators are +, -, *, and /. Each operand may be an integer or another expression.Note that division between two integers should truncate toward zero.It is guaranteed that the given RPN expression ..." }, { "title": "Graph Valid Tree", "url": "/posts/graph-valid-tree/", "categories": "graphs", "tags": "java, leetcode, graphs", "date": "2022-11-30 22:35:00 +0530", "snippet": "Problem DescriptionYou have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.Return true if the edges of the given graph make up a valid tree, and fa..." }, { "title": "Clone Graph", "url": "/posts/clone-graph/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2022-11-29 22:56:00 +0530", "snippet": "Problem DescriptionGiven a reference of a node in a connected undirected graph.Return a deep copy (clone) of the graph.Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.class Node { public int val; public List&amp;lt;Node&amp;gt; neighbors;}leetcodeSolut..." }, { "title": "Find Players With Zero or One Losses", "url": "/posts/find-players-with-zero-or-one-losses/", "categories": "arrays", "tags": "java, arrays, leetcode", "date": "2022-11-28 23:04:00 +0530", "snippet": "Problem DescriptionYou are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.Return a list answer of size 2 where: answer[0] is a list of all players that have not lost any matches. answer[1] is a list of all ..." }, { "title": "Redundant Connection", "url": "/posts/redundant-connection/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2022-11-27 20:56:00 +0530", "snippet": "Problem DescriptionIn this problem, a tree is an undirected graph that is connected and has no cycles.You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge th..." }, { "title": "Course Schedule II", "url": "/posts/course-schedule-ii/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2022-11-27 14:51:00 +0530", "snippet": "Problem DescriptionThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicate..." }, { "title": "Course Schedule", "url": "/posts/course-schedule/", "categories": "neetcode150", "tags": "java, leetcode, graphs, important, neetcode150", "date": "2022-11-27 14:22:00 +0530", "snippet": "Problem DescriptionThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicate..." }, { "title": "Surrounded Regions", "url": "/posts/surrounded-regions/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2022-11-26 21:47:00 +0530", "snippet": "Problem DescriptionGiven an m x n matrix board containing ‘X’ and ‘O’, capture all regions that are 4-directionally surrounded by ‘X’.A region is captured by flipping all ‘O’s into ‘X’s in that surrounded region.leetcodeSolutionThe key observation in this problem is that if there is any ‘O’ in th..." }, { "title": "Max Area of Island", "url": "/posts/max-area-of-island/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2022-11-26 21:09:00 +0530", "snippet": "Problem DescriptionYou are given an m x n binary matrix grid. An island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.The area of an island is the number of cells with a value 1 in the is..." }, { "title": "Rotten Oranges", "url": "/posts/rotten-oranges/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2022-11-26 16:06:00 +0530", "snippet": "Problem DescriptionYou are given an m x n grid where each cell can have one of three values: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange.Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.Return t..." }, { "title": "Number of Islands", "url": "/posts/number-of-islands/", "categories": "neetcode150", "tags": "java, leetcode, graphs, neetcode150", "date": "2022-11-26 01:01:00 +0530", "snippet": "Problem DescriptionGiven an m x n 2D binary grid grid which represents a map of ‘1’s (land) and ‘0’s (water), return the number of islands.An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surr..." }, { "title": "Number of Connected Components in an Undirected Graph", "url": "/posts/number-of-connected-components-in-an-undirected-graph/", "categories": "neetcode150", "tags": "java, geeksforgeeks, graphs, neetcode150", "date": "2022-11-26 00:21:00 +0530", "snippet": "Problem DescriptionYou have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.Return the number of connected components in the graph.geeksforgeeksSolutionThe idea is that if we apply DFS/BFS t..." }, { "title": "Depth First Search", "url": "/posts/depth-first-search/", "categories": "graphs", "tags": "java, geeksforgeeks, graphs", "date": "2022-11-25 23:46:00 +0530", "snippet": "Problem DescriptionYou are given a connected undirected graph. Perform a Depth First Traversal of the graph.Note: Use a recursive approach to find the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph.geeksforgeeksclass Solution { // Function to ..." }, { "title": "Breadth First Search", "url": "/posts/breadth-first-search/", "categories": "graphs", "tags": "java, geeksforgeeks, graphs", "date": "2022-11-25 00:01:00 +0530", "snippet": "Problem DescriptionGiven a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.geeksforgeeksSolutionclass Solution { // Function to return Breadth First Traversal of given graph. public ArrayList&amp;lt;Integer&amp;gt; bfsOfGraph(int V, ArrayList&amp;..." }, { "title": "Coin Change", "url": "/posts/coin-change/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150, important", "date": "2022-11-22 23:37:00 +0530", "snippet": "Problem DescriptionYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of ..." }, { "title": "Palindromic Substrings", "url": "/posts/palindromic-substrings/", "categories": "neetcode150", "tags": "java, neetcode150, leetcode, dynamic_programming", "date": "2022-11-21 20:27:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven a string s, return the longest palindromic substring in s.leetcodeSolutionThis question is similar to: Longest Palindrome SubStringclass Solution { public int countSubstrings(String s) { int n = s.length();..." }, { "title": "Longest Palindromic Substring", "url": "/posts/longest-palindromic-substring/", "categories": "neetcode150", "tags": "java, neetcode150, leetcode, dynamic_programming", "date": "2022-11-20 22:43:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven a string s, return the longest palindromic substring in s.leetcodeSolutionclass Solution { //Time complexity: O(n^2) public String longestPalindrome(String s) { String ans = &quot;&quot;; //At every index, ch..." }, { "title": "House Robber I", "url": "/posts/house-robber-i/", "categories": "neetcode150", "tags": "java, neetcode150, leetcode, dynamic_programming", "date": "2022-11-20 20:25:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected ..." }, { "title": "House Robber II", "url": "/posts/house-robber-ii/", "categories": "neetcode150", "tags": "java, neetcode150, leetcode, dynamic_programming", "date": "2022-11-20 20:23:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Mean..." }, { "title": "Min Cost Climbing Stairs", "url": "/posts/min-cost-climbing-stairs/", "categories": "neetcode150", "tags": "java, leetcode, neetcode150, dynamic_programming", "date": "2022-11-20 18:56:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer array nums, return the length of the longest strictly increasYou are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.You c..." }, { "title": "Flip Array", "url": "/posts/flip-array/", "categories": "dynamic_programming", "tags": "java, interviewbit, dynamic_programming, important", "date": "2022-11-20 15:32:00 +0530", "snippet": "Problem DescriptionGiven an array of positive elements, you have to flip the sign of some of its elements such that the resultant sum of the elements of array should be minimum non-negative(as close to zero as possible). Return the minimum no. of elements whose sign needs to be flipped such that..." }, { "title": "Partition Equal Subset Sum", "url": "/posts/partition-equal-subset-sum/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2022-11-20 14:18:00 +0530", "snippet": "Problem DescriptionGiven a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.leetcodeSolutionNeetCode Youtube Get total sum of all the elements in the nums array If the total sum i..." }, { "title": "Unbounded Knapsack", "url": "/posts/unbounded-knapsack/", "categories": "dynamic_programming", "tags": "java, geeksforgeeks, dynamic_programming, important", "date": "2022-11-19 22:59:00 +0530", "snippet": "Problem DescriptionGiven weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively. Also giv..." }, { "title": "Knapsack Problem (0/1)", "url": "/posts/knapsack-problem-0-1/", "categories": "dynamic_programming", "tags": "java, geeksforgeeks, dynamic_programming, important", "date": "2022-11-19 21:14:00 +0530", "snippet": "Problem DescriptionGiven weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively. Also giv..." }, { "title": "Regular Expression Match", "url": "/posts/regular-expression-match/", "categories": "dynamic_programming", "tags": "java, interviewbit, dynamic_programming", "date": "2022-11-19 18:10:00 +0530", "snippet": "Problem DescriptionImplement wildcard pattern matching with support for ‘?’ and ‘*’ for strings A and B. ’?’ : Matches any single character. ‘*’ : Matches any sequence of characters (including the empty sequence).The matching should cover the entire input string (not partial).interviewbitSoluti..." }, { "title": "Min Sum Path in Matrix", "url": "/posts/min-sum-path-in-matrix/", "categories": "dynamic_programming", "tags": "java, dynamic_programming", "date": "2022-11-18 23:26:00 +0530", "snippet": "Problem DescriptionGiven a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.Return the minimum sum of the path.NOTE: You can only move either down or right at any point in time.Solutionpublic class Solution { public i..." }, { "title": "Min Triangle Sum", "url": "/posts/min-triangle-sum/", "categories": "dynamic_programming", "tags": "java, leetcode, dynamic_programming", "date": "2022-11-16 00:05:00 +0530", "snippet": "Problem DescriptionGiven a triangle array, return the minimum path sum from top to bottom.For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.leetcodeSolutionWe c..." }, { "title": "N digit numbers with digit sum S", "url": "/posts/n-digit-numbers-with-digit-sum-s/", "categories": "dynamic_programming", "tags": "java, interviewbit, dynamic_programming", "date": "2022-11-13 19:19:00 +0530", "snippet": "Problem DescriptionFind out the number of N digit numbers, whose digits on being added equals to a given number S. Note that a valid number starts from digits 1-9 except the number 0 itself. i.e. leading zeroes are not allowed.Since the answer can be large, output answer modulo 1000000007N = 2, S..." }, { "title": "Edit Distance", "url": "/posts/edit-distance/", "categories": "neetcode150", "tags": "java, leetcode, strings, dynamic_programming, neetcode150", "date": "2022-11-13 18:29:00 +0530", "snippet": "Problem DescriptionGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.You have the following three operations permitted on a word: Insert a character Delete a character Replace a characterleetcodeSolutionclass Solution { public ..." }, { "title": "Longest Common Subsequence", "url": "/posts/longest-common-subsequence/", "categories": "dynamic_programming", "tags": "java, leetcode, strings, dynamic_programming", "date": "2022-11-12 21:29:00 +0530", "snippet": "Problem DescriptionGiven two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the rel..." }, { "title": "Dungeon Game", "url": "/posts/dungeon-game/", "categories": "dynamic_programming", "tags": "java, leetcode, dynamic_programming, important", "date": "2022-11-12 20:54:00 +0530", "snippet": "Problem DescriptionThe demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the prin..." }, { "title": "Longest Increasing Subsequence", "url": "/posts/longest-increasing-subsequence/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2022-11-12 14:27:00 +0530", "snippet": "Problem DescriptionGiven an integer array nums, return the length of the longest strictly increasing subsequenceleetcodeSolutionclass Solution { public int lengthOfLIS(int[] nums) { int n = nums.length; int[] dp = new int[n]; //The subsequence can be a single eleme..." }, { "title": "Maximum sum such that no two elements are adjacent", "url": "/posts/maximum-sum-such-that-no-two-elements-are-adjacent/", "categories": "dynamic_programming", "tags": "java, geeksforgeeks, dynamic_programming", "date": "2022-11-12 13:30:00 +0530", "snippet": "Problem DescriptionGiven an array arr[] of positive numbers, The task is to find the maximum sum of a subsequence such that no 2 numbers in the sequence should be adjacent in the array.geeksforgeeksSolutionclass Solution{ public int FindMaxSum(int arr[], int n) { //Edge cases..." }, { "title": "Perfect Squares", "url": "/posts/perfect-squares/", "categories": "dynamic_programming", "tags": "java, leetcode, dynamic_programming", "date": "2022-11-12 12:54:00 +0530", "snippet": "Problem DescriptionGiven an integer n, return the least number of perfect square numbers that sum to n.A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 ar..." }, { "title": "Unique Paths II", "url": "/posts/unique-paths-ii/", "categories": "dynamic_programming", "tags": "java, leetcode, dynamic_programming", "date": "2022-11-11 00:22:00 +0530", "snippet": "Problem DescriptionYou are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.An obstacle ..." }, { "title": "Paint House", "url": "/posts/paint-house/", "categories": "dynamic_programming", "tags": "java, leetcode, dynamic_programming", "date": "2022-11-07 23:45:00 +0530", "snippet": "Problem DescriptionThere is a row of n houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.The cost of painting ea..." }, { "title": "Unique Paths", "url": "/posts/unique-paths/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150", "date": "2022-11-07 23:21:00 +0530", "snippet": "Problem DescriptionThere is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.Given the two integers m..." }, { "title": "Ways to Decode", "url": "/posts/ways-to-decode/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150, important", "date": "2022-11-06 23:28:00 +0530", "snippet": "Problem DescriptionA message containing letters from A-Z can be encoded into numbers using the following mapping:&#39;A&#39; -&amp;gt; &quot;1&quot;&#39;B&#39; -&amp;gt; &quot;2&quot;...&#39;Z&#39; -&amp;gt; &quot;26&quot;To decode an encoded message, all the digits must be grouped then mapped ba..." }, { "title": "Maximum Sum Value - A[i]*B + A[j]*C + A[k]*D", "url": "/posts/maximum-sum-value-a-i-b-a-j-c-a-k-d/", "categories": "dynamic_programming", "tags": "java, dynamic_programming", "date": "2022-11-06 18:32:00 +0530", "snippet": "Problem DescriptionYou are given an array A of N integers and three integers B, C, and D.You have to find the maximum value of A[i]*B + A[j]*C + A[k]*D, where 1 &amp;lt;= i &amp;lt;= j &amp;lt;= k &amp;lt;= N.SolutionIf B,C,D were all positive, we could have simply taken the maximum value in the ..." }, { "title": "Search in Rotated Sorted Array", "url": "/posts/search-in-rotated-sorted-array/", "categories": "neetcode150", "tags": "java, binary_search, neetcode150", "date": "2022-11-04 22:39:00 +0530", "snippet": "Problem DescriptionThere is an integer array nums sorted in ascending order (with distinct values).Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 &amp;lt;= k &amp;lt; nums.length) such that the resulting array is [nums[k], nums[k+1], …, nums[n-1], ..." }, { "title": "Koko Eating Bananas", "url": "/posts/koko-eating-bananas/", "categories": "neetcode150", "tags": "java, binary_search, neetcode150", "date": "2022-11-04 22:03:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionKoko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of..." }, { "title": "Valid Sudoku", "url": "/posts/valid-sudoku/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-11-04 19:18:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionDetermine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repeti..." }, { "title": "Max Product Subarray", "url": "/posts/max-product-subarray/", "categories": "neetcode150", "tags": "java, leetcode, dynamic_programming, neetcode150, important", "date": "2022-11-04 18:26:00 +0530", "snippet": "Problem DescriptionGiven an integer array nums, find a subarray that has the largest product, and return the product.The test cases are generated so that the answer will fit in a 32-bit integer.leetcodeSolutionSince the array can contain negative numbers also, we need to main currentMax as well a..." }, { "title": "Max Sum Without Adjacent Elements", "url": "/posts/max-sum-without-adjacent-elements/", "categories": "dynamic_programming", "tags": "java, leetcode, dynamic_programming", "date": "2022-11-04 13:49:00 +0530", "snippet": "Problem DescriptionYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police..." }, { "title": "Friends Pairing Problem", "url": "/posts/friends-pairing-problem/", "categories": "dynamic_programming", "tags": "java, geeksforgeeks, dynamic_programming", "date": "2022-11-04 01:00:00 +0530", "snippet": "Problem DescriptionGiven N friends, each one can remain single or can be paired up with some other friend. Each friend can be paired only once. Find out the total number of ways in which friends can remain single or can be paired up.Note: Since answer can be very large, return your answer mod 10^..." }, { "title": "Minimum Number of Squares", "url": "/posts/minimum-number-of-squares/", "categories": "dynamic_programming", "tags": "java, dynamic_programming", "date": "2022-11-04 00:19:00 +0530", "snippet": "Problem DescriptionGiven an integer A. Return minimum count of numbers, sum of whose squares is equal to A.Solutionpublic class Solution { public int countMinSquares(int A) { int[] dp = new int[A+1]; dp[1] = 1; //Loop through each number and save its answer in dp array ..." }, { "title": "Fibonacci Number", "url": "/posts/fibonacci-number/", "categories": "dynamic_programming", "tags": "java, dynamic_programming", "date": "2022-11-02 01:03:00 +0530", "snippet": "Problem DescriptionGiven a positive integer A, write a program to find the Ath Fibonacci number.In a Fibonacci series, each term is the sum of the previous two terms and the first two terms of the series are 0 and 1. i.e. f(0) = 0 and f(1) = 1. Hence, f(2) = 1, f(3) = 2, f(4) = 3 and so on.NOTE: ..." }, { "title": "Stairs", "url": "/posts/stairs/", "categories": "dynamic_programming", "tags": "java, dynamic_programming", "date": "2022-11-01 23:32:00 +0530", "snippet": "Problem DescriptionYou are climbing a staircase and it takes A steps to reach the top.Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?Return the number of distinct ways modulo 1000000007Solutionpublic class Solution { int M = 1000000007; publi..." }, { "title": "Combination Sum II", "url": "/posts/combination-sum-ii/", "categories": "backtracking", "tags": "java, recursion, backtracking", "date": "2022-10-31 22:54:00 +0530", "snippet": "Problem DescriptionGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.Each number in candidates may only be used once in the combination.Note: The solution set must not contain dup..." }, { "title": "Subsets II", "url": "/posts/subsets-ii/", "categories": "backtracking", "tags": "java, recursion, backtracking", "date": "2022-10-31 22:30:00 +0530", "snippet": "Problem DescriptionGiven an integer array nums that may contain duplicates, return all possible subsets (the power set).The solution set must not contain duplicate subsets. Return the solution in any order.leetcodeSolutionThe solution is based on Subset I, with a change that the input can contain..." }, { "title": "Subsets", "url": "/posts/subsets/", "categories": "backtracking", "tags": "java, recursion, backtracking", "date": "2022-10-31 21:18:00 +0530", "snippet": "Problem DescriptionGiven an integer array nums of unique elements, return all possible subsets (the power set).The solution set must not contain duplicate subsets. Return the solution in any order.leetcodeSolutionclass Solution { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ans = new Ar..." }, { "title": "Combination Sum", "url": "/posts/combination-sum/", "categories": "backtracking", "tags": "java, recursion, backtracking", "date": "2022-10-31 20:36:00 +0530", "snippet": "Problem DescriptionGiven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.The same number may be chosen from candidates an unlimited num..." }, { "title": "Permutations", "url": "/posts/permutations/", "categories": "backtracking", "tags": "java, recursion, backtracking", "date": "2022-10-30 21:32:00 +0530", "snippet": "Problem DescriptionGiven an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.leetcodeSolutionclass Solution { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ans = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;(); public..." }, { "title": "N-Queens", "url": "/posts/n-queens/", "categories": "backtracking", "tags": "java, recursion, backtracking", "date": "2022-10-30 21:11:00 +0530", "snippet": "Problem DescriptionThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.Each solution contains a distinct board confi..." }, { "title": "Next Greater Element IV", "url": "/posts/next-greater-element-iv/", "categories": "stack", "tags": "java, stack, important", "date": "2022-10-30 17:33:00 +0530", "snippet": "Problem DescriptionYou are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.The second greater integer of nums[i] is nums[j] such that: j &amp;gt; i nums[j] &amp;gt; nums[i] There exists exactly one index k suc..." }, { "title": "Next Greater Element III", "url": "/posts/next-greater-element-iii/", "categories": "permutation", "tags": "java, permutation", "date": "2022-10-30 00:33:00 +0530", "snippet": "Problem DescriptionGiven a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.Note that the returned integer should fit in 32-bit integer, if there is a valid answe..." }, { "title": "Next Greater Element II", "url": "/posts/next-greater-element-ii/", "categories": "stack", "tags": "java, stack", "date": "2022-10-29 23:42:00 +0530", "snippet": "Problem DescriptionGiven a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.The next greater number of a number x is the first greater number to its traversing-order next in the array, which means yo..." }, { "title": "Next Greater Element I", "url": "/posts/next-greater-element-i/", "categories": "stack", "tags": "java, stack", "date": "2022-10-29 23:28:00 +0530", "snippet": "Problem DescriptionThe next greater element of some element x in an array is the first greater element that is to the right of x in the same array.You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.For each 0 &amp;lt;= i &amp;lt; nums1.length, fi..." }, { "title": "Search a 2D Matrix II", "url": "/posts/search-a-2d-matrix-ii/", "categories": "search", "tags": "java, binary_search, search", "date": "2022-10-29 22:54:00 +0530", "snippet": "Problem DescriptionWrite an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties: Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom.leetc..." }, { "title": "Search a 2D Matrix", "url": "/posts/search-a-2d-matrix/", "categories": "search", "tags": "java, binary_search, search", "date": "2022-10-28 23:18:00 +0530", "snippet": "Problem DescriptionWrite an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties: Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row.le..." }, { "title": "Permutation in String", "url": "/posts/permutation-in-string/", "categories": "neetcode150", "tags": "java, sliding_window, neetcode150, important", "date": "2022-10-27 00:21:00 +0530", "snippet": "This question is part of NeetCode150 series.PROBLEM DESCRIPTIONGiven two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.In other words, return true if one of s1’s permutations is the substring of s2.s1 and s2 consist of lowercase English letters.leetcodeSOLU..." }, { "title": "Longest Repeating Character Replacement", "url": "/posts/longest-repeating-character-replacement/", "categories": "neetcode150", "tags": "java, neetcode150, important", "date": "2022-10-26 23:51:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.Return the length of the longest substring co..." }, { "title": "All Subsets", "url": "/posts/all-subsets-i/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-25 22:02:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer array nums of unique elements, return all possible subsets (the power set).The solution set must not contain duplicate subsets. Return the solution in any order.leetcodeSolutionFor each element, we can two choices - e..." }, { "title": "All Subsets II", "url": "/posts/all-subsets-ii/", "categories": "backtracking", "tags": "java, recursion, backtracking", "date": "2022-10-25 21:50:00 +0530", "snippet": "Problem DescriptionGiven a set of distinct integers A, return all possible subsets.NOTE: Elements in a subset must be in non-descending order. The solution set must not contain duplicate subsets. Also, the subsets should be sorted in ascending ( lexicographic ) order. The list is not necessar..." }, { "title": "Longest Substring Without Repeating Characters", "url": "/posts/longest-substring-without-repeating-characters/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-24 14:17:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven a string s, find the length of the longest substring without repeating characters.leetcodeSolutionThis can be solved using sliding window technique. The idea is to main a HashSet to keep a track of elements which have been “visi..." }, { "title": "Best Time to Buy and Sell Stock", "url": "/posts/best-time-to-buy-and-sell-stock/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-24 00:04:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are given an array prices where prices[i] is the price of a given stock on the ith day.You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.Return..." }, { "title": "Noble Integer", "url": "/posts/noble-integer/", "categories": "interviewbit", "tags": "java, interviewbit, arrays, important", "date": "2022-10-23 10:49:00 +0530", "snippet": "Problem DescriptionGiven an integer array A, find if an integer p exists in the array such that the number of integers greater than p in the array equals to p.SolutionLet’s say we sort the array in ascending order and iterate from the right.Important Observations: If A[i] == A[i+1], the number o..." }, { "title": "Container With Most Water", "url": "/posts/container-with-most-water/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-22 21:43:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionYou are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).Find two lines that together with the x-axis form a container, such that the..." }, { "title": "Two Sum II - Input Array Is Sorted", "url": "/posts/two-sum-ii-input-array-is-sorted/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-22 21:33:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 &amp;..." }, { "title": "Valid Palindrome", "url": "/posts/valid-palindrome/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-22 21:14:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.Given..." }, { "title": "Sort K-Sorted Array", "url": "/posts/sort-k-sorted-array/", "categories": "heap", "tags": "java, heap, geeksforgeeks, important", "date": "2022-10-22 01:04:00 +0530", "snippet": "Problem DescriptionGiven an array of n elements, where each element is at most k away from its target position, you need to sort the array optimally.geeksforgeeksSolutionThe problem mentions that the array is k-sorted, which means that any element is at most K positions away from it’s correct pos..." }, { "title": "Maximum Profit When Buying a Car", "url": "/posts/maximum-profit-when-buying-car/", "categories": "greedy", "tags": "java, heap, greedy, important", "date": "2022-10-20 23:22:00 +0530", "snippet": "Problem DescriptionGiven two arrays, A and B of size N. A[i] represents the time by which you can buy the ith car without paying any money.B[i] represents the profit you can earn by buying the ith car. It takes 1 minute to buy a car, so you can only buy the ith car when the current time &amp;lt;=..." }, { "title": "Distribute Candy", "url": "/posts/distribute-candy/", "categories": "greedy", "tags": "java, greedy, leetcode, important", "date": "2022-10-20 22:51:00 +0530", "snippet": "Problem DescriptionThere are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.You are giving candies to these children subjected to the following requirements: Each child must have at least one candy. Children with a higher rating get more ..." }, { "title": "Finish Maximum Jobs", "url": "/posts/finish-maximum-jobs/", "categories": "greedy", "tags": "java, greedy, important", "date": "2022-10-20 19:05:00 +0530", "snippet": "Problem DescriptionThere are N jobs to be done, but you can do only one job at a time.Given an array A denoting the start time of the jobs and an array B denoting the finish time of the jobs.Your aim is to select jobs in such a way so that you can finish the maximum number of jobs.Return the maxi..." }, { "title": "Kth Largest Element in a Stream", "url": "/posts/kth-largest-element-in-a-stream/", "categories": "heap", "tags": "java, heap, leetcode, important", "date": "2022-10-19 20:06:00 +0530", "snippet": "Problem DescriptionDesign a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.Implement KthLargest class: KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers ..." }, { "title": "Find Median from Data Stream", "url": "/posts/find-median-from-data-stream/", "categories": "heap", "tags": "java, heap, leetcode, important", "date": "2022-10-18 23:33:00 +0530", "snippet": "Problem DescriptionThe median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values. For example, for arr = [2,3,4], the median is 3. For example, for arr = [2,3], the median is (2 + 3) / 2 =..." }, { "title": "Last Stone Weight", "url": "/posts/last-stone-weight/", "categories": "heap", "tags": "java, heap, leetcode", "date": "2022-10-17 00:54:00 +0530", "snippet": "Problem DescriptionYou are given an array of integers stones where stones[i] is the weight of the ith stone.We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x &amp;lt;= y. The ..." }, { "title": "Kth Largest Element in an Array", "url": "/posts/kth-largest-element-in-an-array/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-15 23:39:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer array nums and an integer k, return the kth largest element in the array.Note that it is the kth largest element in the sorted order, not the kth distinct element.You must solve it in O(n) time complexity.leetcodeSolu..." }, { "title": "Reverse Bits", "url": "/posts/reverse-bits/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-15 12:34:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionReverse bits of a given 32 bits unsigned integer.leetcodeSolutionAPPROACH 1public class Solution { public int reverseBits(int n) { int ans = 0; for(int i=0; i&amp;lt;=31; i++){ if(isSet(n, i..." }, { "title": "Zigzag Traversal", "url": "/posts/zigzag-traversal/", "categories": "arrays", "tags": "java, arrays", "date": "2022-10-15 02:21:00 +0530", "snippet": "Problem DescriptionGiven an m x n matrix mat, return an array of all the elements of the array in a zigzag/diagonal order.Input: mat = [[1,2,3],[4,5,6],[7,8,9]]Output: [1,2,4,7,5,3,6,8,9]leetcodeSolutionimport java.util.*;class Program { public static List&amp;lt;Integer&amp;gt; zigzagTraverse(L..." }, { "title": "Maximum AND Value", "url": "/posts/maximum-and-value/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, geeksforgeeks, important", "date": "2022-10-14 22:24:00 +0530", "snippet": "Problem DescriptionGiven an array arr[] of N positive elements. The task is to find the Maximum AND Value generated by any pair(arri, arrj) from the array such that i != j.Note: AND is bitwise ‘&amp;amp;’ operator.geeksforgeeksSolutionclass Solution{ // Function for finding maximum AND valu..." }, { "title": "Missing Number", "url": "/posts/missing-number/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-14 12:41:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.leetcodeSolutionclass Solution { public int missingNumber(int[] nums) { int an..." }, { "title": "Sum of XOR of all pairs", "url": "/posts/sum-of-xor-of-all-pairs/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, geeksforgeeks, important", "date": "2022-10-14 00:48:00 +0530", "snippet": "Problem DescriptionGiven an array of N integers, find the sum of xor of all pairs of numbers in the array.geeksforgeeksSolutionclass Solution{ // Function for finding maximum and value pair public long sumXOR (int arr[], int n) { long sum = 0; for(int i=0; i..." }, { "title": "Single Number II", "url": "/posts/single-number-ii/", "categories": "interviewbit", "tags": "java, bit_manipulation, interviewbit, important", "date": "2022-10-12 23:26:00 +0530", "snippet": "Problem DescriptionGiven an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.You must implement a solution with a linear runtime complexity and use only constant extra space.leetcodeSolutionclass Solution ..." }, { "title": "Single Number I", "url": "/posts/single-number-i/", "categories": "interviewbit", "tags": "java, bit_manipulation, interviewbit", "date": "2022-10-12 22:40:00 +0530", "snippet": "Problem DescriptionGiven an array of integers A, every element appears twice except for one. Find that integer that occurs once.Solutionpublic int singleNumber(final List&amp;lt;Integer&amp;gt; A) { int ans = 0; for(int i=0; i&amp;lt;A.size(); i++) ans^= A.get(i); return ans;}" }, { "title": "Single Number III", "url": "/posts/single-number-iii/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, important", "date": "2022-10-12 00:11:00 +0530", "snippet": "Problem DescriptionGiven an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.You must write an algorithm that runs in linear runtime complexity an..." }, { "title": "Introduction to Bit Manipulation - Part 4", "url": "/posts/introduction-to-bit-manipulation-part-4/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, theory", "date": "2022-10-11 21:39:00 +0530", "snippet": "" }, { "title": "Introduction to Bit Manipulation - Part 3", "url": "/posts/introduction-to-bit-manipulation-part-3/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, theory", "date": "2022-10-11 21:39:00 +0530", "snippet": "" }, { "title": "Introduction to Bit Manipulation - Part 2", "url": "/posts/introduction-to-bit-manipulation-part-2/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, theory", "date": "2022-10-11 21:39:00 +0530", "snippet": "" }, { "title": "Introduction to Bit Manipulation - Part 1", "url": "/posts/introduction-to-bit-manipulation-part-1/", "categories": "bit_manipulation", "tags": "java, bit_manipulation, theory", "date": "2022-10-11 21:37:00 +0530", "snippet": "" }, { "title": "Counting Bits", "url": "/posts/counting-bits/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-11 14:19:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer n, return an array ans of length n + 1 such that for each i (0 &amp;lt;= i &amp;lt;= n), ans[i] is the number of 1’s in the binary representation of i.leetcodeSolutionAPPROACH 1For each number [0,N], we can make use o..." }, { "title": "Number of 1 Bits", "url": "/posts/number-of-1-bits/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-11 13:46:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionWrite a function that takes an unsigned integer and returns the number of ‘1’ bits it has (also known as the Hamming weight).Note:Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input wi..." }, { "title": "Longest Consecutive Sequence", "url": "/posts/longest-consecutive-sequence/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-11 00:39:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.You must write an algorithm that runs in O(n) time.leetcodeSolutionAPPROACH 1The brute force solution for this problem can be so ..." }, { "title": "Encode and Decode Strings", "url": "/posts/encode-and-decode-strings/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-10 21:18:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionDesign an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.Implement the encode and decode methods.You are not allowed to solve the..." }, { "title": "Product of Array Except Self", "url": "/posts/product-of-array-except-self/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-09 22:56:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.You must w..." }, { "title": "Design Add and Search Words Data Structure", "url": "/posts/design-add-and-search-words-data-structure/", "categories": "neetcode150", "tags": "java, trie, neetcode150", "date": "2022-10-09 19:47:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionDesign a data structure that supports adding new words and finding if a string matches any previously added string.Implement the WordDictionary class: WordDictionary() Initializes the object. void addWord(word) Adds word to the data..." }, { "title": "Implement Trie (Prefix Tree)", "url": "/posts/implement-trie-prefix-tree/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-09 16:20:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionA trie (pronounced as “try”) or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.Imp..." }, { "title": "Top K Frequent Elements", "url": "/posts/top-k-frequent-elements/", "categories": "neetcode150", "tags": "java, neetcode150, important", "date": "2022-10-09 15:23:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.leetcodeSolutionAPPROACH 1class Solution { public int[] topKFrequent(int[] nums, int k) { Map&amp;lt;I..." }, { "title": "Group Anagrams", "url": "/posts/group-anagrams/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-09 14:27:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an array of strings strs, group the anagrams together. You can return the answer in any order.An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original lette..." }, { "title": "Two Sum", "url": "/posts/two-sum/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-09 14:05:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.You may assume that each input would have exactly one solution, and you may not use the same element twice.You ca..." }, { "title": "Valid Anagram", "url": "/posts/valid-anagram/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-09 14:04:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven two strings s and t, return true if t is an anagram of s, and false otherwise.An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once...." }, { "title": "Contains Duplicate", "url": "/posts/contains-duplicate/", "categories": "neetcode150", "tags": "java, neetcode150", "date": "2022-10-09 13:53:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.leetcodeSolutionclass Solution { public boolean containsDuplicate(int[] nums) { ..." }, { "title": "Min Stack", "url": "/posts/min-stack/", "categories": "neetcode150", "tags": "java, stack, neetcode150", "date": "2022-10-07 21:56:00 +0530", "snippet": "This question is part of NeetCode150 series.PROBLEM DESCRIPTIONDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.Implement the MinStack class: MinStack() initializes the stack object. void push(int val) pushes the element val onto the stack. void ..." }, { "title": "3 sum", "url": "/posts/3-sum/", "categories": "neetcode150", "tags": "java, arrays, geeksforgeeks, neetcode150", "date": "2022-10-06 23:32:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.Solution set must not contain duplicate triplets.leetcodeSolutionFor the main ..." }, { "title": "Right Smaller Than", "url": "/posts/right-smaller-than/", "categories": "BST", "tags": "java, BST, important", "date": "2022-10-06 23:00:00 +0530", "snippet": "PROBLEM DESCRIPTIONWrite a function that takes in an array of integers and returns an array of the same length where each element in the output array corresponds to the number of integers in the input array that are to the right of the relevant index and that are strictly smaller than the integer..." }, { "title": "Multi String Search (Trie)", "url": "/posts/multi-string-search-trie/", "categories": "binarytree", "tags": "java, binarytree", "date": "2022-10-05 19:54:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a Big String and an array of small strings.You need to check whether each small string is present in the big string. Do not use any in-built method.SOLUTIONWe can make use of Trie to solve this problem. We loop through the bigstring and keep adding the subarrays [..." }, { "title": "Trie - Introduction - Part 2", "url": "/posts/trie-introduction-part-2/", "categories": "trie", "tags": "java, trie, theory", "date": "2022-10-05 17:38:00 +0530", "snippet": "INTRODUCTION TO TRIE - PART 2Trie Introduction: Part 1Implementationleetcodepublic class Trie { Node root; class Node{ boolean isEnd; Map&amp;lt;Character, Node&amp;gt; hm; Node(Map&amp;lt;Character, Node&amp;gt; hm){ this.hm = hm; } } ..." }, { "title": "Trie - Introduction - Part 1", "url": "/posts/trie-introduction/", "categories": "trie", "tags": "java, trie, theory", "date": "2022-10-05 17:15:00 +0530", "snippet": "INTRODUCTION TO TRIE - PART 1" }, { "title": "Populating Next Right Pointers in Each Node - Perfect Binary Tree", "url": "/posts/populating-next-right-pointers-in-each-node-perfect-binary-tree/", "categories": "binarytree", "tags": "java, binarytree", "date": "2022-10-05 00:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a perfect binary tree where all leaves are on the same level, and every parent has two children. Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.Initially, all next pointers are set..." }, { "title": "Binary Tree Maximum Path Sum", "url": "/posts/binary-tree-maximum-path-sum/", "categories": "binarytree", "tags": "java, binarytree, important", "date": "2022-10-04 23:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.The path sum of a path is the sum of the ..." }, { "title": "Validate Three Nodes in BST", "url": "/posts/validate-three-nodes-in-bst/", "categories": "BST", "tags": "java, BST", "date": "2022-10-03 19:55:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given three Nodes of a BST - NodeOne, NodeTwo and NodeThree. Write a function that returns true if one of NodeOne and NodeThree is an ancestor of NodeTwo. The other Node must be decendent of NodeTwo. If this is not the case, return false.SOLUTION public boolean validat..." }, { "title": "Lowest Common Ancestor - Using In-time and Out-time", "url": "/posts/lowest-common-ancestor-using-intime-and-outtime/", "categories": "binarytree", "tags": "java, binarytree, important", "date": "2022-10-03 01:35:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we all..." }, { "title": "Lowest Common Ancestor of a Binary Search Tree", "url": "/posts/lowest-common-ancestor-of-a-binary-search-tree/", "categories": "BST", "tags": "java, BST, interviewbit, leetcode", "date": "2022-10-03 00:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descenda..." }, { "title": "Morris Traversal", "url": "/posts/morris-traversal/", "categories": "binarytree", "tags": "java, binarytree, important, geeksforgeeks", "date": "2022-10-02 22:43:00 +0530", "snippet": "PROBLEM DESCRIPTIONBinary Tree traversal using Morris Algorithm. Iterative approach, no stack required - O(1) space complexity.geeksforgeeksSOLUTIONUsing Morris Traversal, we can traverse the tree without using stack and recursion. The idea of Morris Traversal is based on Threaded Binary Tree. In..." }, { "title": "Construct Binary Tree from Inorder and Postorder Traversal", "url": "/posts/construct-binary-tree-from-inorder-and-postorder-traversal/", "categories": "binarytree", "tags": "java, binarytree, important, leetcode", "date": "2022-10-02 21:22:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.LeetcodeSOLUTIONclass Solution { public TreeNode buildTree(int[] inorder..." }, { "title": "Binary Tree Right Side View", "url": "/posts/right-view-of-binary-tree/", "categories": "binarytree", "tags": "java, binarytree, important, leetcode", "date": "2022-10-02 20:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.LeetcodeSOLUTIONAPPROACH 1 - USING LEVEL ORDER TRAVERSALThe idea is to get the last/right-most element for each level in Lev..." }, { "title": "Kth Smallest Element in a BST", "url": "/posts/kth-smallest-element-in-bst/", "categories": "neetcode150", "tags": "java, binarytree, neetcode150", "date": "2022-10-02 13:40:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.LeetcodeSOLUTIONAPPROACH 1Store the inorder traversal in a list and return (k-1)th element from the list.class Solution { public int..." }, { "title": "Equal Tree Partition - Binary Tree", "url": "/posts/equal-tree-partition-binary-tree/", "categories": "binarytree", "tags": "java, binarytree, important, leetcode", "date": "2022-10-01 23:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, return true if you can partition the tree into two trees with equal sums of values after removing exactly one edge on the original tree.leetcodeSOLUTIONThe main idea is that sub of the two subtrees after breaking the edge should have half the su..." }, { "title": "Recover Binary Search Tree", "url": "/posts/recover-binary-search-tree/", "categories": "BST", "tags": "java, BST, interviewbit, important", "date": "2022-10-01 01:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONTwo elements of a binary search tree (BST), represented by root A are swapped by mistake. Tell us the 2 values swapping which the tree will be restored.interviewbitSOLUTIONclass Pair{ int x; int y; Pair(int x, int y){ this.x = x; this.y = y; }} public ..." }, { "title": "Least Common Ancestor - Binary Tree", "url": "/posts/least-common-ancestor-binary-tree/", "categories": "binarytree", "tags": "java, binarytree, important, leetcode", "date": "2022-10-01 00:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONFind the lowest common ancestor in an unordered binary tree A, given two values, B and C, in the tree.LeetcodeSOLUTION Get root to node path: YouTube In the previous step, there is a chance that one of the Node is not present, return null in that case Compare the paths store..." }, { "title": "Valid Binary Search Tree", "url": "/posts/valid-binary-search-tree/", "categories": "BST", "tags": "java, BST, important", "date": "2022-09-27 00:11:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, determine if it is a valid binary search tree (BST).leetcodeSOLUTIONpublic class Solution { public int isValidBST(TreeNode A) { return isValidBSTHelper(A, Integer.MIN_VALUE, Integer.MAX_VALUE)?1:0; } public boolean isValidBSTHelp..." }, { "title": "Delete a Node in Binary Search Tree", "url": "/posts/delete-a-node-in-binary-search-tree/", "categories": "BST", "tags": "java, BST, important", "date": "2022-09-26 23:04:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.leetcodeSOLUTIONclass Solution { public TreeNode deleteNode(TreeNode root, int key) { if(root == nul..." }, { "title": "Construct Binary Tree from Preorder and Inorder Traversal", "url": "/posts/construct-binary-tree-from-preorder-and-inorder-traversal/", "categories": "binarytree", "tags": "java, binarytree, important", "date": "2022-09-25 00:56:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree. (preorder and inorder consist of unique values.)LeetcodeSOLUTIONclass Solution { ..." }, { "title": "Vertical Order Traversal - Binary Tree", "url": "/posts/vertical-order-traversal-binary-tree/", "categories": "binarytree", "tags": "java, binarytree, important", "date": "2022-09-24 23:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, return a 2-D array with vertical order traversal of it.SOLUTIONpublic class Solution { public ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; verticalOrderTraversal(TreeNode A) { TreeNode root = A; if(root == null) return new ..." }, { "title": "Binary Tree - Level Order Traversal II", "url": "/posts/bst-level-order-traversal-ii/", "categories": "binarytree", "tags": "java, binarytree, important, leetcode", "date": "2022-09-23 23:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the root of a binary tree, return the level order traversal of its nodes’ values. (i.e., from left to right, level by level).LeetcodeSOLUTIONFor the main explaination, see:BST Level Order TraversalThis query needs some tweaking, because we need to return the levels as a L..." }, { "title": "Size of a Binary Search Tree", "url": "/posts/size-of-a-binary-search-tree/", "categories": "binarytree", "tags": "java, binarytree", "date": "2022-09-23 00:13:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, find its size (Total number of Nodes in the tree).SOLUTIONclass Tree{ public static int getSize(Node root) { if(root == null) return 0; int s1 = getSize(root.left); int s2 = getSize(root.right); return 1 + s1 + s2; ..." }, { "title": "Height of a Binary Search Tree", "url": "/posts/height-of-a-binary-search-tree/", "categories": "binarytree", "tags": "java, binarytree", "date": "2022-09-23 00:03:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, find its height.SOLUTIONHere we are considering the height of leaf node to be 0. To handle the edge case, it is important to return -1 when the node is null. if(node == null) return -1;class Solution { //Function to find the height of a binary tree. ..." }, { "title": "Count Days Spent Together", "url": "/posts/count-days-spent-together/", "categories": "", "tags": "java, contest_question", "date": "2022-09-18 00:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONAlice and Bob are traveling to Rome for separate business meetings.You are given 4 strings arriveAlice, leaveAlice, arriveBob, and leaveBob. Alice will be in the city from the dates arriveAlice to leaveAlice (inclusive), while Bob will be in the city from the dates arriveBob to..." }, { "title": " Evaluate Expression", "url": "/posts/evaluate-expression/", "categories": "", "tags": "java, stack", "date": "2022-09-16 23:38:00 +0530", "snippet": "PROBLEM DESCRIPTIONAn arithmetic expression is given by a character array A of size N. Evaluate the value of an arithmetic expression in Reverse Polish Notation.Valid operators are +, -, *, /. Each character may be an integer or an operator.SOLUTIONpublic class Solution { public int evalRPN(Ar..." }, { "title": "Double Character Trouble", "url": "/posts/double-character-trouble/", "categories": "", "tags": "java, stack", "date": "2022-09-16 21:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given a string A.An operation on the string is defined as follows:Remove the first occurrence of the same consecutive characters. eg for a string “abbcd”, the first occurrence of same consecutive characters is “bb”.Therefore the string after this operation will be “acd”..." }, { "title": "Balanced Parenthesis", "url": "/posts/balanced-parenthesis/", "categories": "", "tags": "java, stack", "date": "2022-09-16 21:16:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an expression string A, examine whether the pairs and the orders of “{“,”}”, ”(“,”)”, ”[“,”]” are correct in A.SOLUTIONpublic class Solution { Map&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); public int solve(String A) { map.put(&quot;(&..." }, { "title": "Nearest Smaller Element", "url": "/posts/nearest-smaller-element/", "categories": "", "tags": "java, stack, interviewbit, important", "date": "2022-09-14 21:14:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven an array, find the nearest smaller element G[i] for every element A[i] in the array such that the element has an index smaller than i.More formally,G[i] for an element A[i] = an element A[j] such that j is maximum possible AND j &amp;lt; i ANDA[j] &amp;lt; A[i]Elements fo..." }, { "title": "Clone Linked List with Random Pointer - Constant Space Complexity", "url": "/posts/clone-linked-list-with-random-pointer-constant-space-complexity/", "categories": "", "tags": "java, linkedlist, leetcode, important", "date": "2022-09-11 23:54:00 +0530", "snippet": "PROBLEM DESCRIPTIONA linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. Construct a deep copy of the list.class Node { int val; Node next; Node random; public Node(int val) { this.val =..." }, { "title": "Clone Linked List with Random Pointer", "url": "/posts/clone-linked-list-with-random-pointer/", "categories": "", "tags": "java, linkedlist, leetcode, important", "date": "2022-09-11 00:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONA linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. Construct a deep copy of the list.class Node { int val; Node next; Node random; public Node(int val) { this.val =..." }, { "title": "Merge K Sorted Linked Lists", "url": "/posts/merge-k-sorted-linked-lists/", "categories": "", "tags": "java, linkedlist, important", "date": "2022-09-10 23:53:00 +0530", "snippet": "PROBLEM DESCRIPTIONYou are given the head of K sorted Linked Lists. Every Node is defined as:class Node{ int data; Node right; Node down; Node(int x){ data=x; right=null; right=null; }}The head node’s down pointer, points to the head of next Linked List.Return ..." }, { "title": "Merge Sort Linked List", "url": "/posts/merge-sort-linked-list/", "categories": "", "tags": "java, linkedlist, important", "date": "2022-09-09 00:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONMerge Sort a given Linked List.SOLUTIONpublic static Node mergeSort(Node h1){ if(h1 == null || h1.next == null) return h1; Node c1 = getCenter(h1); Node h2 = c1.next; c1.next = null; h1 = mergeSort(h1); h2 = mergeSort(h2); return mergeSortedLinkedList(h1, h..." }, { "title": "Merge Two Sorted Linked List - 2", "url": "/posts/merge-two-sorted-linked-list/", "categories": "linkedlist", "tags": "java, leetcode, linkedlist", "date": "2022-09-08 23:10:00 +0530", "snippet": "PROBLEM DESCRIPTIONMerge two sorted Linked List.leetcodeSOLUTIONpublic static Node mergeSortedLinkedList(Node h1, Node h2){ //If any of the list is empty, return the other sorted list if(h1 == null) return h2; if(h2 == null) return h1; Node t=null, h3=null; //Initialize if(h1.va..." }, { "title": "Reverse a Linked List in K Groups", "url": "/posts/reverse-a-linked-list-in-k-groups/", "categories": "", "tags": "java, linkedlist, important", "date": "2022-09-08 00:02:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a singly linked list and an integer k, reverse the nodes of the list k at a time and return the modified linked list. If there are less than k size, reverse them in the output list.SOLUTIONpublic static Node reverseListKWindowSize(Node head, int k){ if(head == null || ..." }, { "title": "Reverse a Linked List", "url": "/posts/reverse-a-linked-list/", "categories": "", "tags": "java, linkedlist", "date": "2022-09-07 23:31:00 +0530", "snippet": "PROBLEM DESCRIPTIONReverse the LinkedList.SOLUTIONpublic static Node reverseLinkedList(Node head){ Node h1=head; Node t=head; Node h2=null; while(h1 != null){ h1 = h1.next; t.next = h2; h2 = t; t = h1; } return h2;}" }, { "title": "Reverse First K Nodes - LinkedList", "url": "/posts/reverse-first-k-nodes-linkedlist/", "categories": "", "tags": "java, linkedlist", "date": "2022-09-07 23:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONReverse the first K Nodes of the LinkedList.SOLUTIONpublic static Node reverseFirstKNodes(Node head, int k){ Node h1=head; Node t=head; Node h2=null; Node h3 = head; //We will use this at the last step to connect the K reversed Nodes with rest of the LinkedList w..." }, { "title": "Rabin Karp", "url": "/posts/rabin-karp/", "categories": "strings", "tags": "java, arrays, hashing, strings, geeksforgeeks", "date": "2022-09-03 02:38:00 +0530", "snippet": "Problem DescriptionCheck if pattern p exists in string s.Rabin KarpSolutionpackage com.gauk;public class RabinKarp { private static final int M = 1000000007; private static final int prime = 23; public static void main(String[] args) { String str = &quot;abcbagdda&quot;; St..." }, { "title": "Pattern Matcher", "url": "/posts/pattern-matcher/", "categories": "strings", "tags": "java, arrays, hashing, strings, geeksforgeeks", "date": "2022-08-31 10:01:00 +0530", "snippet": "Problem DescriptionCheck if pattern p exists in string s.Solutionpublic boolean checkForPattern(String s, String p){ String str = p + &quot;$&quot; + s; int[] lps = LPS.getLPS(str); for(int i=0; i&amp;lt;lps.length; i++){ if(lps[i] == p.length()){ return true; } ..." }, { "title": "Longest Prefix Suffix", "url": "/posts/longest-prefix-suffix/", "categories": "strings", "tags": "java, arrays, hashing, strings, geeksforgeeks", "date": "2022-08-31 02:08:00 +0530", "snippet": "Problem DescriptionGiven a string of characters, find the length of the longest proper prefix which is also a proper suffix.NOTE: Prefix and suffix can be overlapping but they should not be equal to the entire string.geeksforgeeks Example:Input: s = “abab”Output: 2Explanation: “ab” is the longes..." }, { "title": "Common Elements in Two Arrays", "url": "/posts/common-elements-in-two-arrays/", "categories": "hashing", "tags": "java, arrays, hashing", "date": "2022-08-26 00:10:00 +0530", "snippet": "Problem DescriptionGiven two integer arrays, A and B of size N and M, respectively. Your task is to find all the common elements in both the array.Each element in the result should appear as many times as it appears in both arrays.SolutionThe elements can repeat and we need to compare the frequen..." }, { "title": "Count Rectangles", "url": "/posts/count-rectangles/", "categories": "hashing", "tags": "java, arrays, hashing, important", "date": "2022-08-25 23:37:00 +0530", "snippet": "Problem DescriptionGiven two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 &amp;lt;= i &amp;lt; N represents a unique point (x, y) in a 2-D Cartesian plane.Find and return the number of unordered quadruplet (i, j, k, l) such that (A[i], B[i]), (A[j], B[j]), (A[k], ..." }, { "title": "Count Right Triangles", "url": "/posts/count-right-triangles/", "categories": "hashing", "tags": "java, arrays, hashing, important", "date": "2022-08-25 00:56:00 +0530", "snippet": "Problem DescriptionGiven two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 &amp;lt;= i &amp;lt; N represents a unique point (x, y) in 2D Cartesian plane.Find and return the number of unordered triplets (i, j, k) such that (A[i], B[i]), (A[j], B[j]) and (A[k], B[k])..." }, { "title": "Minimum Area Rectangle", "url": "/posts/minimum-area-rectangle/", "categories": "arrays", "tags": "java, arrays, important", "date": "2022-08-23 22:29:00 +0530", "snippet": "Problem DescriptionWe are given an array of [x,y] co-ordinates. Write a function which returns the minimum area of any rectangle that can be formed using any 4 points in this array. The sides of the rectangle must be parallel to the X and Y axis. If no rectangle can be formed, return 0.Solutionim..." }, { "title": "Count of Pairs with k Sum in Sorted Array", "url": "/posts/count-of-pairs-with-k-sum-in-sorted-array/", "categories": "two_pointers", "tags": "java, arrays, two_pointers", "date": "2022-08-22 23:40:00 +0530", "snippet": "Problem DescriptionGiven a sorted array of distinct integers A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B.Solutionpublic class Solution { public int solve(int[] A, int B) { int count=0; int i=0; int j=A.l..." }, { "title": "Sub-Array with Given Sum (Two Pointers)", "url": "/posts/sub-array-with-given-sum-two-pointers/", "categories": "two_pointers", "tags": "java, arrays, two_pointers, important", "date": "2022-08-21 23:49:00 +0530", "snippet": "Problem DescriptionGiven an array of positive integers A and an integer B, find and return first continuous subarray which adds to B. (First sub-array means the sub-array for which starting index in minimum). Return -1 if such a sub-array does not exist.SolutionWe can use 2 pointer technique to s..." }, { "title": "Maximum Water between Two Walls", "url": "/posts/maximum-water-between-two-walls/", "categories": "two_pointers", "tags": "java, arrays, two_pointers", "date": "2022-08-21 16:14:00 +0530", "snippet": "Problem DescriptionGiven an array of size N, where A[i] represents the height of the ith wall, pick any two walls such that maximum water can be stored between them.SolutionWe start from the first and last wall so that we have the largest distance between the walls. If height of water depends on ..." }, { "title": "2 Pair Difference (Two Pointers)", "url": "/posts/2-pair-difference-two-pointers/", "categories": "two_pointers", "tags": "java, arrays, two_pointers", "date": "2022-08-21 15:57:00 +0530", "snippet": "Problem DescriptionGiven N distinct sorted elements, check if there exists a pair (i,j) such that A[i] - A[j] = k and k&amp;gt;0. (i!=j)SolutionTwo important thing in question is to figure out where to initilize the two pointers.If we keep i=0, j=n-1:diff = A[j] - A[i]. Let’s say that the diff is..." }, { "title": "2 Pair Sum (Two Pointers)", "url": "/posts/2-pair-sum-two-pointers/", "categories": "two_pointers", "tags": "java, arrays, two_pointers", "date": "2022-08-21 15:31:00 +0530", "snippet": "Problem DescriptionGiven N distinct sorted elements, check if there exists a pair (i,j) such that A[i] + A[j] = k, i!=j.SolutionThe brute force approch is to check all pairs - O(N^2)A better way is to use hashmap. Keep adding numbers in the HashMap and while iterating also check if (k-A[i]) is pr..." }, { "title": "Kth Element (Without Sorting)", "url": "/posts/kth-element-without-sorting/", "categories": "search", "tags": "java, search, important", "date": "2022-08-19 00:05:00 +0530", "snippet": "Problem DescriptionGiven unsorted array of N distinct elements, find kth index position of its sorted form. (k will start from 0)Note: We cannot modify the array and we cannot use extra space. Example:arr[5] = {2 8 3 11 14}k=2Answer: 8Solutionpackage com.gauk;public class KthElement { public ..." }, { "title": "Special Integer - Maximum Sum with Max Length k", "url": "/posts/special-integer-maximum-sum-with-max-length-k/", "categories": "search", "tags": "java, search, important", "date": "2022-08-12 02:16:00 +0530", "snippet": "Problem DescriptionGiven an array of +ve integers, find maximum k such that:{max subarray sum of length k &amp;lt;= B}, where B is a given input +ve integer.SolutionWe have given a number B and an array. There can be many subarrays with sum &amp;lt;= B. We need to return the length of subarray wh..." }, { "title": "Ath Magical Number", "url": "/posts/ath-magical-number/", "categories": "search", "tags": "java, search, important", "date": "2022-08-10 00:59:00 +0530", "snippet": "Problem DescriptionGiven A, B and C, find Ath magical number.Note: A number is said to be magical, if it’s divisible by B or C.Solutionpackage com.gauk;public class MagicNumberModded { public static void main(String[] args) { System.out.println(AthMagicNumber(5, 6, 3)); //10 } //G..." }, { "title": "Radix Sort", "url": "/posts/radix-sort/", "categories": "sorting", "tags": "java, sorting", "date": "2022-08-09 00:55:00 +0530", "snippet": "Problem DescriptionImplement Radix Sort.Solution Find the number of digits of the max element in the given array Initialize an Array “bucket” of ArrayList with size 10. This will be used for storing the numbers after comparing them using value at any index. If the max element has 5 digits, for..." }, { "title": "Aggressive Cows", "url": "/posts/aggressive-cows/", "categories": "search", "tags": "java, arrays, search, important", "date": "2022-08-07 01:45:00 +0530", "snippet": "Problem DescriptionGiven an array of length N, where each element denotes the position of a stall. Now you have N stalls and an integer K which denotes the number of cows that are aggressive. To prevent the cows from hurting each other, you need to assign the cows to the stalls, such that the min..." }, { "title": "Find Square Root (Binary Search Approach)", "url": "/posts/find-square-root-binary-search-approach/", "categories": "search", "tags": "java, arrays, search, important", "date": "2022-08-06 02:27:00 +0530", "snippet": "Problem DescriptionGiven a non-negative integer x, compute and return the square root of x.Leetcode: Sqrt(x)Constraints: 0 &amp;lt;= x &amp;lt;= 2^31 - 1SolutionThe important part in this code is to realize that m*m can lead to overflow. To handle this, we can do: m == x/mclass Solution { ..." }, { "title": "Shifted Binary Search", "url": "/posts/shifted-binary-search/", "categories": "search", "tags": "java, arrays, search, important", "date": "2022-08-05 00:58:00 +0530", "snippet": "Problem DescriptionGiven a sorted array of integers A of size N and an integer B. Array A is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).You are given a target value B to search. If found in the array, return its index otherwise, return -1.You..." }, { "title": "Count Inversion", "url": "/posts/count-inversion/", "categories": "sorting", "tags": "java, arrays, sorting, important", "date": "2022-08-02 01:17:00 +0530", "snippet": "Problem DescriptionInversion Count for an array indicates – how far (or close) the array is from being sorted. If the array is already sorted, then the inversion count is 0, but if the array is sorted in the reverse order, the inversion count is the maximum.Formally speaking, two elements a[i] an..." }, { "title": "Two Arrays, Find Pairs A[i] &gt; B[j]", "url": "/posts/two-arrays-find-pairs-a-i-a-j/", "categories": "arrays", "tags": "java, arrays, important", "date": "2022-08-01 23:50:00 +0530", "snippet": "Problem DescriptionGiven two Arrays, find the count of all pairs such that A[i] &amp;gt; B[j]SolutionThe brute force is to find all pairs such that A[i] &amp;gt; B[j] in the two arrays. To optimize this, we can use sorting. First we sort both the arrays in ascending order. Now we use pointers fro..." }, { "title": "Duplicate Zeroes", "url": "/posts/duplicate-zeroes/", "categories": "arrays", "tags": "java, arrays, leetcode, important", "date": "2022-07-31 23:31:00 +0530", "snippet": "Problem DescriptionGiven a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.Duplicate ZerosNote that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not r..." }, { "title": "Merge Sort", "url": "/posts/merge-sort/", "categories": "sorting", "tags": "java, sorting", "date": "2022-07-29 17:59:00 +0530", "snippet": "Problem DescriptionImplement Merge Sort.SolutionWe will make use of a problem we solved earlier: Sort a sub-array given s,m,e. If we carefully think about any given array, we can divide it into two parts -&amp;gt; Sort them separately -&amp;gt; Then merge both sorted array. For the first half of ..." }, { "title": "Sort Sub-Array in Array Given s,m,e", "url": "/posts/sort-sub-array-in-array-given-s-m-e/", "categories": "sorting", "tags": "java, sorting", "date": "2022-07-29 15:35:00 +0530", "snippet": "Problem DescriptionGive an array of N elements and three indices s, m and e in which [s,m] sub-array is sorted and [m+1,e] is also sorted. You need to sort the complete sub-array from [s,e].SolutionWe can consider the two sub-arrays [s,m] and [m+1,e] as two different arrays which are sorted and t..." }, { "title": "Find Kth Smallest Element", "url": "/posts/find-kth-smallest-element/", "categories": "sorting", "tags": "java, sorting", "date": "2022-07-28 20:13:00 +0530", "snippet": "Problem DescriptionGiven N array elements, find Kth smallest element. Problem Constraints 1 &amp;lt;= |A| &amp;lt;= 1000001 &amp;lt;= B &amp;lt;= min(|A|, 500)1 &amp;lt;= A[i] &amp;lt;= 109SolutionSince B can be at max 500, we can use any algorithm to solve the problem.public class Solution { ..." }, { "title": "Find Number of Divisors", "url": "/posts/find-number-of-divisors/", "categories": "prime_numbers", "tags": "java, prime_numbers, important", "date": "2022-07-21 21:50:00 +0530", "snippet": "Problem DescriptionGiven a number N, find the number of divisors of that numberSolutionTo solve this problem optimally, we will make use of Smallest Prime Factor algorithm covered previously. First we get the Smallest Prime Factor map that we created before. This contains the smallest factor for..." }, { "title": "Smallest Prime Factor", "url": "/posts/smallest-prime-factor/", "categories": "prime_numbers", "tags": "java, prime_numbers, important", "date": "2022-07-21 20:44:00 +0530", "snippet": "Problem DescriptionGiven N, find the smallest prime factor for all numbers from [2-N]SolutionThe solution to this problem is similar to how we found out all prime numbers till N using Sieve of Eratosthenes algorithm. We maintain an array of integers of size N+1. We initialize all the elements as ..." }, { "title": "Find Prime Numbers", "url": "/posts/find-prime-numbers/", "categories": "prime_numbers", "tags": "java, prime_numbers, important", "date": "2022-07-21 20:32:00 +0530", "snippet": "Problem DescriptionGiven a number N, return a list of all prime numbers till N.SolutionThis can be optimally solved using Sieve of Eratosthenes algorithm. First we creat an boolean array of N+1 size and mark of them as prime (true) We know that 0,1 are not primes, so initialize them first Now ..." }, { "title": "Check Prime", "url": "/posts/check-prime/", "categories": "prime_numbers", "tags": "java, prime_numbers", "date": "2022-07-21 20:29:00 +0530", "snippet": "Problem DescriptionGiven a number N check if it’s a prime number.SolutionThe main this to remember here is that we need to check only till square root of N, because if i is a factor of N, N/i will also be a factor of N. If we get any 1 factor, return false.static boolean isPrime(int n){ for(in..." }, { "title": "A%M == B%M", "url": "/posts/a-m-b-m/", "categories": "arrays", "tags": "java, arrays, modulo", "date": "2022-07-11 00:49:00 +0530", "snippet": "Problem DescriptionGiven two integers A and B, find the greatest possible positive integer M, such that A % M = B % M.SolutionThis problem needs some derivation: A%M = B%M=&amp;gt; A%M - B%M = 0=&amp;gt; A%M - B%M + M = M //add M on both sides=&amp;gt; (A%M - B%M + M)%M = M%M //take mod on both ..." }, { "title": "Change Array[i] to Array[Array[i]]", "url": "/posts/change-array-i-to-array-array-i/", "categories": "arrays", "tags": "java, arrays, modulo, important", "date": "2022-07-11 00:26:00 +0530", "snippet": "Problem DescriptionGiven a list of elements (an array) and a postive integer m, replace all elments such that Array[i] = Array[Array[i]].All elements in the array are in the range [0, N-1].SolutionOne of the obvious way to do this is by using extra space. We can simple create a new list and loop ..." }, { "title": "Merge Two Sorted LinkedList", "url": "/posts/merge-two-sorted-linkedlist/", "categories": "linkedlist", "tags": "java, linkedlist, important", "date": "2022-07-04 23:44:00 +0530", "snippet": "PROBLEM DESCRIPTIONMerge two LinkedList which are sorted such that the final LinkedList is also sorted. (Without creating a new LinkedList)SOLUTIONThis problem is also part of AlgoExpert: https://www.algoexpert.io/questions/merge-linked-listsThe idea is to first decide which linkedlist we are goi..." }, { "title": "Maximum Sum Sub-Matrix", "url": "/posts/maximum-sum-sub-matrix/", "categories": "arrays", "tags": "java, arrays, important", "date": "2022-07-04 22:05:00 +0530", "snippet": "Problem DescriptionGiven a 2D matrix, find the maximum possible sum of sub-matrices in that matrix.SolutionThe brute force approach is to get all sub-matrices, calculate the sum and update the max-sum as we go on. Obviously the time complexity will be very high: O(N^2M^2).We can optimize it to O(..." }, { "title": "Largest Range in the Array", "url": "/posts/largest-range-in-the-array/", "categories": "arrays", "tags": "java, arrays", "date": "2022-07-03 16:21:00 +0530", "snippet": "Problem DescriptionGiven an array of integers, return the start and end element (not index) which represents the maximum continuous range of numbers present in the array.Example: 1 11 3 0 15 5 2 4 10 7 12 6In this, the longest range is [0,7] since all numbers between 0 to 7 are present in the giv..." }, { "title": "Sort based on Three Numbers", "url": "/posts/sort-based-on-three-numbers/", "categories": "arrays", "tags": "java, arrays", "date": "2022-07-03 02:18:00 +0530", "snippet": "Problem DescriptionYou are given an array of 3 integers and another array which contains only the numbers present in the first array. The 3 numbers in the “order” array need not be sorted. You need to return the in-place sorted array according to the first input array. For example: If the order a..." }, { "title": "Find the Smallest Sub-Array to Sort", "url": "/posts/find-the-smallest-sub-array-to-sort/", "categories": "arrays", "tags": "java, arrays", "date": "2022-07-02 20:21:00 +0530", "snippet": "Problem DescriptionYou are given an array which could be unsorted. Return the start and end index of the smallest sub-array which if-sorted will make the complete array sorted.SolutionThink about how you can tell if any element is at its correct position. Since we know that the final array is sor..." }, { "title": "Trapping Rain Water", "url": "/posts/trapping-rain-water/", "categories": "neetcode150", "tags": "java, arrays, arrays, neetcode150", "date": "2022-07-02 00:35:00 +0530", "snippet": "This question is part of NeetCode150 series.Problem DescriptionGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.Trapping Rain WaterSolutionWe would need to think of how we can calculate the water which c..." }, { "title": "Sum of all Sub-Arrays", "url": "/posts/sum-of-all-sub-arrays/", "categories": "arrays", "tags": "java, arrays, important", "date": "2022-06-30 22:47:00 +0530", "snippet": "Problem DescriptionReturn the total sum of all sub-arrays of the given array.SolutionBRUTE-FORCEThe brute force method is to check all sub-array, calculate its sum and add that to the total sum.public static int totalSumSubArrayBruteForce(ArrayList&amp;lt;Integer&amp;gt; A) { int totalSum ..." }, { "title": "Sum of Linked Lists", "url": "/posts/sum-of-linked-lists/", "categories": "linkedlist", "tags": "java, leetcode, linkedlist", "date": "2022-06-29 15:04:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven two numbers as LinkedList in reverseOrder (most significant digit as the right most digit), return a LinkedList (reversed) as the sum. Example: LinkedListOne: 2 -&amp;gt; 4 -&amp;gt; 7 -&amp;gt; 1LinkedListTwo: 9 -&amp;gt; 4 -&amp;gt; 5 Output:1 -&amp;gt; 9 -&amp;gt; 2..." }, { "title": "Kadane&#39;s Algorithm", "url": "/posts/kadane-s-algorithm/", "categories": "arrays", "tags": "java, arrays, important", "date": "2022-06-28 00:38:00 +0530", "snippet": "Problem DescriptionGiven an array of numbers, find the maximum sum possible for any subarray.SolutionWe can use Kadane’s Algorithm to solve this. &amp;lt;—–positive numbers—–&amp;gt;&amp;lt;—-negative numbers—-&amp;gt;&amp;lt;——positive numbers——-&amp;gt; The important thing to un..." }, { "title": "Sort Stack (In Place)", "url": "/posts/sort-stack-in-place/", "categories": "stack", "tags": "java, stack, important", "date": "2022-06-27 16:41:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a stack, sort the elements in-place. (smallest element at the bottom of the stack)SOLUTIONThink about: If we are given an already sorted stack and we need to add an element such that the complete stack is sorted. If the value is greater than the element at the top, then w..." }, { "title": "Max Path Sum in Binary Tree", "url": "/posts/max-path-sum-in-binary-tree/", "categories": "binarytree", "tags": "java, binarytree", "date": "2022-06-27 13:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a binary tree, return its max path sum.SOLUTIONThe apprach to this problem is similar to Binary Tree Diameter. We keep a track of two things, the sum in LST and the sum in RST, and return the max between them when calling the function recursively.import java.util.*;class ..." }, { "title": "Height Balanced Binary Tree", "url": "/posts/height-balanced-binary-tree/", "categories": "binarytree", "tags": "java, binarytree", "date": "2022-06-27 01:58:00 +0530", "snippet": "PROBLEM DESCRIPTIONA binary tree is balanced if for each node in the tree, the difference between the height of its LST and RST is at most 1.SOLUTION public int heightBalancedBinaryTreeX(BinaryTree tree) { if(tree == null) return 0; int left = heightBalancedBinaryTreeX(tree.left); i..." }, { "title": "Find Successor in Binary Tree", "url": "/posts/find-successor-in-binary-tree/", "categories": "binarytree", "tags": "java, binarytree, important", "date": "2022-06-27 01:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONWe are given a tree in which every Node has another attribute called parent which points to its immediate ancestor. We are also given another Node as input, which is present in that binary tree. We need to return the next Node which will be visited as per inorder traversal, aft..." }, { "title": "Binary Tree Diameter", "url": "/posts/binary-tree-diameter/", "categories": "algoexpert", "tags": "java, binarytree, important", "date": "2022-06-26 23:12:00 +0530", "snippet": "PROBLEM DESCRIPTIONReturn the diameter of a given binary tree. Diameter is defined as the length of its longest path, even if that path doesn’t pass through the node of the tree.SOLUTIONThis is an interesting question because we need to maintain two information while traversing the binary tree. T..." }, { "title": "Bubble Sort", "url": "/posts/bubble-sort/", "categories": "sorting", "tags": "java, arrays, sorting", "date": "2022-06-26 14:10:00 +0530", "snippet": "Problem DescriptionImplement Bubble Sort (in-place)SolutionWe can loop through the array and swap the elements if the right one is lesser than the one towards it’s left. We can further optimize it by tracking if we have performed any swaps during a certain iteration. If we did not perform any swa..." }, { "title": "Power Set", "url": "/posts/power-set/", "categories": "algoexpert", "tags": "java, recursion", "date": "2022-06-23 01:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONFor a given list of numbers, return the list of its power set.SOLUTIONAPPROACH 1This can be solved recursively. We call the function twice, once assuming that the current element i will be included in the Power Set and the second time when it will not be included in the Power S..." }, { "title": "Invert Binary Tree", "url": "/posts/invert-binary-tree/", "categories": "algoexpert", "tags": "java, binarytree", "date": "2022-06-21 23:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONInvert the binary tree by swapping every every left node in the tree with its right node.SOLUTIONimport java.util.*;class Program { public static void invertBinaryTree(BinaryTree tree) { if(tree == null) return; BinaryTree temp = tree.left; tree.left = tree.right; ..." }, { "title": "Min Height BST", "url": "/posts/min-height-bst/", "categories": "algoexpert", "tags": "java, BST", "date": "2022-06-21 21:27:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a list of integers in sorted order, return the root node of a BST such that the BST has the minimum possible height.SOLUTIONSince the list of already sorted, we can insert the mid of the list first. The elements to the left will be smaller than the mid element, so they wi..." }, { "title": "Validate BST", "url": "/posts/validate-bst/", "categories": "algoexpert", "tags": "java, BST", "date": "2022-06-21 20:08:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a tree, check whether it’s a BST.SOLUTIONAPPROACH 1 MaxOf(Left Sub Tree) &amp;lt; Node.value &amp;lt;= MinOf(Right Sub Tree)Using this relation, for each Node, we can find the max on LST and min on RST and check if the current Node belongs to that range. Recursively do t..." }, { "title": "Find kth Largest Value in BST", "url": "/posts/find-kth-largest-value-in-bst/", "categories": "algoexpert", "tags": "java, BST, important", "date": "2022-06-21 15:04:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven a BST, find the kth largest element in that BST.SOLUTIONThe trivial way is to do a inorder traversal of the BST - which will be sorted. Then return the (n-k)th element from the inorder. (We would need additional space to store inorder as a list/array)Since we are looking ..." }, { "title": "Palindrome LinkedList", "url": "/posts/palindrome-linkedlist/", "categories": "leetcode", "tags": "java, linkedlist", "date": "2022-06-18 11:26:00 +0530", "snippet": "PROBLEM DESCRIPTIONGiven the head of a singly linked list, return true if it is a palindrome. Palindrome LinkedListSOLUTIONUsing Stack (O(n) space complexity)class Solution { public boolean isPalindrome(ListNode head) { int length=0; ListNode temp=head; wh..." }, { "title": "Reverse a LinkedList", "url": "/posts/reverse-a-linkedlist/", "categories": "leetcode", "tags": "java, linkedlist", "date": "2022-06-17 18:21:00 +0530", "snippet": "PROBLEM DESCRIPTIONReverse a given LinkedList. Reverse a LinkedListSOLUTIONITERATIVE APPROACHclass Solution { public ListNode reverseList(ListNode head) { if(head == null) return null; ListNode p=null,c=head, n=head.next; while(n!=null){ ..." }, { "title": "Squares of a Sorted Array", "url": "/posts/squares-of-a-sorted-array/", "categories": "leetcode", "tags": "java, arrays", "date": "2022-06-16 23:50:00 +0530", "snippet": "Problem DescriptionGiven an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.Squares of a Sorted ArraySolutionThe trivial solution is to calculate power of all the elements and then sort it.IntuitionThe largest element..." }, { "title": "Remove nth Node From End of LinkedList", "url": "/posts/remove-nth-node-from-end-of-linkedlist/", "categories": "leetcode", "tags": "java, linkedlist", "date": "2022-06-16 22:54:00 +0530", "snippet": "PROBLEM DESCRIPTION: Remove nth Node From End of LinkedListGiven a LinkedList and an integer n, remove nth Node from the end of the list.SOLUTIONOne approach that will work is to first get the length of the LinkedList by looping through all the elements. Then the element go remove will be (Length..." }, { "title": "Linked List Cycle", "url": "/posts/linked-list-cycle/", "categories": "leetcode", "tags": "java, linkedlist", "date": "2022-06-16 16:11:00 +0530", "snippet": "PROBLEM DESCRIPTION: Linked List Cycle - Find Start of CycleIf there is a cycle in the LinkedList, find the Node where the cycle starts.SOLUTIONWe can easily find if the cycle exists by using slow and fast pointers. If they meet, we know that there is a cycle in the list. From the intersection po..." }, { "title": "Power Function", "url": "/posts/power-function/", "categories": "miscelleneous", "tags": "java, miscelleneous, important", "date": "2022-06-15 23:51:00 +0530", "snippet": "Problem DescriptionGiven integers A and N, find A power N. (Recursive Approach)leetcodeSolutionA simple way to solve recursively is by doing something like:public static int calc(int a, int n) { if(n == 0) return 1; return a * calc(a, n-1);}This works but it takes O(n) time. We can optimize..." }, { "title": "Reverse String", "url": "/posts/reverse-string/", "categories": "leetcode", "tags": "java, strings", "date": "2022-06-15 02:04:00 +0530", "snippet": "Problem DescriptionGiven a character array, reverse it.Reverse StringSolutionWe can use recursion for this, although it will not be O(1) space complexity. The other approach is to use two pointers - front and back. Each time swap the two elements and keep moving to the inner elements.Recursive So..." }, { "title": "Find Leader in an Array (Carry Forward Technique)", "url": "/posts/find-leader-in-an-array-carry-forward-technique/", "categories": "arrays", "tags": "java, arrays, geeksforgeeks", "date": "2022-06-14 23:35:00 +0530", "snippet": "Problem DescriptionGiven an array, find the numbers of leaders in the array. A leader is an element which is strictly greater than all the elements on its right.We can consider the last element to be the leader.Leaders in an arraySolutionThe idea is to keep a track of the largest number of right ..." }, { "title": "Subarray with 0 sum", "url": "/posts/subarray-with-0-sum/", "categories": "arrays", "tags": "java, arrays, geeksforgeeks", "date": "2022-06-14 13:59:00 +0530", "snippet": "Problem DescriptionGiven an array of positive and negative numbers, find if there is a subarray (of size at-least one) with 0 sum.Subarray with 0 sumSolutionIf the sum of elements for a given range is x. And there exists another range x as shown in the above diagram which sum x. That means that t..." }, { "title": "Equilibrium Index of an Array", "url": "/posts/equilibrium-index-of-an-array/", "categories": "arrays", "tags": "java, arrays, geeksforgeeks", "date": "2022-06-14 11:44:00 +0530", "snippet": "Problem DescriptionCheck if there is any index for which the sum of all elements on the left side equals sum of all elements on the right. Equilibrium Index of an ArraySolutionWe can make use of prefix array to solve this optimally. Fist, we initialize the prefix array. For every i from 0 to N-1,..." }, { "title": "Prefix Sum Array", "url": "/posts/prefix-sum-array/", "categories": "arrays", "tags": "java, arrays, geeksforgeeks", "date": "2022-06-14 01:17:00 +0530", "snippet": "Problem DescriptionFind prefix Array Sum of a given array. Prefix Sum ArraySolutionpackage com.arrays;import java.util.Arrays;public class PrefixSum { public static void main(String[] args) { int[] arr = {10, 20, 10, 5, 15}; System.out.println(Arrays.toString(getPrefixSumArray(arr))); } pu..." }, { "title": "Path Sum - Binary Tree", "url": "/posts/path-sum-binary-tree/", "categories": "leetcode", "tags": "java, binarytree", "date": "2022-06-13 02:25:00 +0530", "snippet": "PROBLEM DESCRIPTION: Path Sum Binary Search TreeGiven the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.SOLUTIONclass Solution { public boolean hasPathSum(TreeNode root, int sum) ..." }, { "title": "Symmetric Binary Tree", "url": "/posts/symmetric-binary-tree/", "categories": "leetcode", "tags": "java, binarytree", "date": "2022-06-13 00:46:00 +0530", "snippet": "PROBLEM DESCRIPTION: Symmetric Binary TreeGiven the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).SOLUTIONclass Solution { public boolean isSymmetric(TreeNode root) { if(root == null) return false; return isSym(root.l..." }, { "title": "Maximum Depth of Binary Tree", "url": "/posts/maximum-depth-of-binary-tree/", "categories": "leetcode", "tags": "java, binarytree", "date": "2022-06-12 23:31:00 +0530", "snippet": "Problem Description: Maximum Depth of Binary TreeSolutionThe bottom-up approach will look like this:/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * T..." }, { "title": "Binary Tree Level Order Traversal", "url": "/posts/binary-tree-level-order-traversal/", "categories": "leetcode", "tags": "java, binarytree", "date": "2022-06-12 22:59:00 +0530", "snippet": "Problem Description: Binary Tree Level Order TraversalSolutionFor this, we can use a Queue Data Structure. We first keep the root element already pushed in the queue. Then we dequeue “all elements in the queue” by taking the size of the queue. (For the first time, it will iterate just once since..." }, { "title": "Rotate an Array k times", "url": "/posts/rotate-an-array-k-times/", "categories": "arrays", "tags": "java, leetcode, leetcode150, arrays", "date": "2022-06-12 00:00:00 +0530", "snippet": "Problem DescriptionGiven an Array, rotate it k timesExampleArray:1 2 3 4 5 6 7 8 9k: 3Output:7 8 9 1 2 3 4 5 6leetcodeSolutionArray: 1 2 3 4 5 6 7 8 9k: 3In the output array, we can see that the last k elements will appear first, and then the rest of the elements will appear.So, step 1: reverse t..." }, { "title": "Reverse an Array", "url": "/posts/reverse-an-array/", "categories": "arrays", "tags": "java, arrays", "date": "2022-06-12 00:00:00 +0530", "snippet": "Problem Description: Given an Array, reverse itSolutionIf we swap first element with last element, then 2nd element with 2nd last element, 3rd element and 3rd last element and so on, we will finally get a reversed array.package com.arrays;import java.util.Arrays;public class ReverseArray { publi..." }, { "title": "Reverse an Array in the given Range", "url": "/posts/reverse-an-array-in-the-given-range/", "categories": "arrays", "tags": "java, arrays", "date": "2022-06-12 00:00:00 +0530", "snippet": "Problem Description: Given an Array, reverse itSolutionThis is similar to how we would reverse an array, but we will need to change the start and end index. Then keep swapping the elements from start and end one by one.package com.arrays;import java.util.Arrays;public class ReverseArray { public..." }, { "title": "Binary Search Tree - Insert", "url": "/posts/binary-search-tree-insert/", "categories": "geeksforgeeks", "tags": "java, BST", "date": "2021-04-09 00:13:00 +0530", "snippet": "PROBLEM DESCRIPTION: https://practice.geeksforgeeks.org/problems/insert-a-node-in-a-bst/1#Given a BST and a key K. If K is not present in the BST, Insert a new Node with a value equal to K into the BST. Note: If K is already present in the BST, don&#39;t modify the BST.SOLUTION//User function Tem..." }, { "title": "String Palindrome", "url": "/posts/string-palindrome/", "categories": "interviewbit", "tags": "java, strings", "date": "2021-04-07 00:00:00 +0530", "snippet": "Problem Description: Palindrome Stringpackage com.gauk;public class Solution {/* * Given a string, determine if it is a palindrome, considering only * alphanumeric characters and ignoring cases. * * Example: * * &quot;A man, a plan, a canal: Panama&quot; is a palindrome. * ..." }, { "title": "Find Square Root", "url": "/posts/find-square-root/", "categories": "miscelleneous", "tags": "java, miscelleneous", "date": "2020-04-25 00:00:00 +0530", "snippet": "Problem DescriptionGiven a number N, find the square root of that number. If the number is not a perfect square, then return -1SolutionFirst approach - Brute ForceBrute Force: Loop through all the numbers till N and check if there is any number which when multiplied with itself gives N.Second app..." } ]
