<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gkgaurav31.github.io/</id><title>Gaurav's GitHub Page</title><subtitle>Just a place for all my code.</subtitle> <updated>2025-01-31T23:25:16+05:30</updated> <author> <name>Gaurav Kumar</name> <uri>https://gkgaurav31.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://gkgaurav31.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://gkgaurav31.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Gaurav Kumar </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Amount of Time for Binary Tree to Be Infected</title><link href="https://gkgaurav31.github.io/posts/amount-of-time-for-binary-tree-to-be-infected/" rel="alternate" type="text/html" title="Amount of Time for Binary Tree to Be Infected" /><published>2025-01-31T23:03:00+05:30</published> <updated>2025-01-31T23:24:40+05:30</updated> <id>https://gkgaurav31.github.io/posts/amount-of-time-for-binary-tree-to-be-infected/</id> <content src="https://gkgaurav31.github.io/posts/amount-of-time-for-binary-tree-to-be-infected/" /> <author> <name>Gaurav Kumar</name> </author> <category term="binarytree" /> <summary> PROBLEM DESCRIPTION You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start. Each minute, a node becomes infected if: The node is currently uninfected. The node is adjacent to an infected node. Return the number of minutes needed for the entire tree to be infected. leetcode SOLUTION APPROACH 1 If th... </summary> </entry> <entry><title>HTTP Cookie</title><link href="https://gkgaurav31.github.io/posts/http-cookie/" rel="alternate" type="text/html" title="HTTP Cookie" /><published>2024-11-14T22:26:00+05:30</published> <updated>2024-11-14T23:09:14+05:30</updated> <id>https://gkgaurav31.github.io/posts/http-cookie/</id> <content src="https://gkgaurav31.github.io/posts/http-cookie/" /> <author> <name>Gaurav Kumar</name> </author> <category term="clean_code" /> <summary> HTTP is stateless, meaning each request is independent, with no memory of previous requests. For example, if you visit a website and add items to a shopping cart, the server doesn’t remember your cart between page loads. HTTP cookies solve this by storing small pieces of data on your browser, allowing the server to “remember” your state. HTTP Cookies by Hussein Nasser CREATE COOKIE CLIENT SI... </summary> </entry> <entry><title>Cross-Site Scripting (XSS)</title><link href="https://gkgaurav31.github.io/posts/cross-site-scripting-xss/" rel="alternate" type="text/html" title="Cross-Site Scripting (XSS)" /><published>2024-11-13T22:49:00+05:30</published> <updated>2025-01-31T23:13:45+05:30</updated> <id>https://gkgaurav31.github.io/posts/cross-site-scripting-xss/</id> <content src="https://gkgaurav31.github.io/posts/cross-site-scripting-xss/" /> <author> <name>Gaurav Kumar</name> </author> <category term="clean_code" /> <summary> Type of injection attack where malicious scripts are injected in trusted websites, and executed by the visitor’s browser. Let us see a sample to understand a XSS security issue: &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Simple XSS Demo&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Simple XSS Example&amp;lt;/h1&amp;gt; &amp;lt;form method="GET" action=""&amp;gt; ... </summary> </entry> <entry><title>Content Security Policy</title><link href="https://gkgaurav31.github.io/posts/content-security-policy/" rel="alternate" type="text/html" title="Content Security Policy" /><published>2024-11-13T21:55:00+05:30</published> <updated>2024-11-13T22:48:21+05:30</updated> <id>https://gkgaurav31.github.io/posts/content-security-policy/</id> <content src="https://gkgaurav31.github.io/posts/content-security-policy/" /> <author> <name>Gaurav Kumar</name> </author> <category term="clean_code" /> <summary> Content Security Policy (CSP) is a security feature that helps prevent various types of attacks, such as Cross-Site Scripting (XSS) and data injection attacks, by controlling the sources from which resources like scripts, images, and fonts can be loaded. Let us understand this using a simple HTML. Here is a simple HTML which does not use Content-Security-Policy. This will load the required fo... </summary> </entry> <entry><title>Reverse Engineering 101</title><link href="https://gkgaurav31.github.io/posts/reverse-engineering-101/" rel="alternate" type="text/html" title="Reverse Engineering 101" /><published>2024-11-12T10:21:00+05:30</published> <updated>2024-11-12T10:21:00+05:30</updated> <id>https://gkgaurav31.github.io/posts/reverse-engineering-101/</id> <content src="https://gkgaurav31.github.io/posts/reverse-engineering-101/" /> <author> <name>Gaurav Kumar</name> </author> <category term="clean_code" /> <summary> GETTING STARTED WITH REVERSE ENGINEERING ASSEMBLY BASICS CPU ARCHITECTURE: REGISTERS, MEMORY AND MACHINE CODE A GENERAL FLOW OF PROGRAM EXECUTION Program on Disk (EXE): The executable file (.exe) is stored on disk. OS Loader: The operating system loads the program from the disk into the primary memory. Primary Memory (RAM): Here, the program is loaded as binary data. CPU (Fetch-Dec... </summary> </entry> </feed>
